<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.15.0" xml:lang="en-US">
  <compounddef id="dir_9d9ceaf91d4bf5f6e8ea498a31d17cbb" kind="dir">
    <compoundname>Source/Tests/TextEditor/Basis</compoundname>
    <innerdir refid="dir_352b5ee64e00ec6554ca2ad6b165e159">Source/Tests/TextEditor/Basis/Autocompletes</innerdir>
    <innerdir refid="dir_d1c7061b80a82cb1e16c6405f4d6909b">Source/Tests/TextEditor/Basis/Characters</innerdir>
    <innerdir refid="dir_88ffa49e222bc86f161aebf9883498fc">Source/Tests/TextEditor/Basis/Commands</innerdir>
    <innerdir refid="dir_8fdbf57b08a9d230268a14af5cd410b2">Source/Tests/TextEditor/Basis/CompilerServices</innerdir>
    <innerdir refid="dir_eb76f688220b063e586fa8f1bfbf8703">Source/Tests/TextEditor/Basis/ComponentRenderers</innerdir>
    <innerdir refid="dir_a91e7d5f16d365763a9e685bf9780bd2">Source/Tests/TextEditor/Basis/Cursors</innerdir>
    <innerdir refid="dir_3758b40bfe744224bf455760d9501d87">Source/Tests/TextEditor/Basis/Decorations</innerdir>
    <innerdir refid="dir_ebeee9e462c0e43f8798ab2ad9a9d411">Source/Tests/TextEditor/Basis/Diffs</innerdir>
    <innerdir refid="dir_87052bbb54c107605b03716969842fec">Source/Tests/TextEditor/Basis/Events</innerdir>
    <innerdir refid="dir_bfa04d00ea7dcf85d480f98910f6fcb1">Source/Tests/TextEditor/Basis/Groups</innerdir>
    <innerdir refid="dir_70bf715a427b4052c26756c088a59c70">Source/Tests/TextEditor/Basis/Htmls</innerdir>
    <innerdir refid="dir_1f641c5c440c9f280d5f4662e15b19c1">Source/Tests/TextEditor/Basis/Installations</innerdir>
    <innerdir refid="dir_6f85ac8456ca8fd2bd43d5d9bfe94d9d">Source/Tests/TextEditor/Basis/JavaScriptObjects</innerdir>
    <innerdir refid="dir_6ea8abfc19b0e8fd4126d009c81ffdd4">Source/Tests/TextEditor/Basis/Keymaps</innerdir>
    <innerdir refid="dir_e2a377eca8d500657b905b16cadc7731">Source/Tests/TextEditor/Basis/Lexes</innerdir>
    <innerdir refid="dir_f507c9df5705bb7fc2649282c4429a91">Source/Tests/TextEditor/Basis/Options</innerdir>
    <innerdir refid="dir_e0475c484fc3fa593c0c5d1968dbb8af">Source/Tests/TextEditor/Basis/Rows</innerdir>
    <innerdir refid="dir_e2e62388e611539f59791a5955803264">Source/Tests/TextEditor/Basis/TextEditors</innerdir>
    <innerdir refid="dir_e32f811e75c4a16c9b9b27fd6929cd18">Source/Tests/TextEditor/Basis/UnitTesting</innerdir>
    <innerdir refid="dir_d9d9a62519db8966d2773f0db3a299f3">Source/Tests/TextEditor/Basis/Virtualizations</innerdir>
    <innerfile refid="_service_tests_8cs">ServiceTests.cs</innerfile>
    <innerfile refid="_tests_helper_8cs">TestsHelper.cs</innerfile>
    <innerfile refid="_text_editor_test_base_8cs">TextEditorTestBase.cs</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>One might decide to have a unit test for every public API.</para>
<para>That is the idea of this folder. A one to one unit test per public API at minimum.</para>
<para>Whether every public API will be done or not is being decided upon. But, perhaps that wording illustrates the purpose of this folder.</para>
<para><hruler/>
</para>
<para>Ideas:</para>
<para><itemizedlist>
<listitem><para>Automate test heatmap... If a C# compiler service could identify all publically scoped API, it could verify if after the basis was ran whether all public API was used.</para>
</listitem><listitem><para>Visualize the &quot;basis&quot;... so one could look at a given release of <ref refid="namespace_luthetus_1_1_ide" kindref="compound">Luthetus.Ide</ref> and then bring up the &quot;UnitTests-Basis-Visualization&quot; for that given release.<itemizedlist>
<listitem><para>Draw a graph of all public API references.</para>
</listitem><listitem><para>Color the connection green if no exception occurred.</para>
</listitem><listitem><para>Color the connection red if an exception occurred.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>Automate test generation...<itemizedlist>
<listitem><para>Try any meaningful arguments, automatically as their own test cast. Ex: a method which accepts an &apos;int&apos;. One could decide that meaningful arguments are [ Int.Min, -2, -1, 0, 1, 2 Int.Max ]</para>
</listitem><listitem><para>Concerns: could automated test cases result in bad outcomes? I.e. somehow the test case does bank.Withdraw(Int.Max). As per the concern, none of this automation exists at the moment. </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <location file="Source/Tests/TextEditor/Basis/"/>
  </compounddef>
</doxygen>
