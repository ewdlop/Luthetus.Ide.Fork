<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.15.0" xml:lang="en-US">
  <compounddef id="_expression_tests_8cs" kind="file" language="C#">
    <compoundname>ExpressionTests.cs</compoundname>
    <innerclass refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests" prot="public">Luthetus::CompilerServices::CSharp::Tests::SmokeTests::Parsers::ExpressionTests</innerclass>
    <innerclass refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" prot="public">Luthetus::CompilerServices::CSharp::Tests::SmokeTests::Parsers::ExpressionTests::Test</innerclass>
    <innernamespace refid="namespace_luthetus">Luthetus</innernamespace>
    <innernamespace refid="namespace_luthetus_1_1_compiler_services">Luthetus::CompilerServices</innernamespace>
    <innernamespace refid="namespace_luthetus_1_1_compiler_services_1_1_c_sharp">Luthetus::CompilerServices::CSharp</innernamespace>
    <innernamespace refid="namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests">Luthetus::CompilerServices::CSharp::Tests</innernamespace>
    <innernamespace refid="namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests">Luthetus::CompilerServices::CSharp::Tests::SmokeTests</innernamespace>
    <innernamespace refid="namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers">Luthetus::CompilerServices::CSharp::Tests::SmokeTests::Parsers</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using<sp/></highlight><highlight class="normal">System.Text;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models" kindref="compound">Luthetus.TextEditor.RazorLib.Lexers.Models</ref>;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services" kindref="compound">Luthetus.TextEditor.RazorLib.CompilerServices</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces" kindref="compound">Luthetus.TextEditor.RazorLib.CompilerServices.Interfaces</ref>;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax" kindref="compound">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax</ref>;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens" kindref="compound">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Tokens</ref>;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes" kindref="compound">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes</ref>;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_interfaces" kindref="compound">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes.Interfaces</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_enums" kindref="compound">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes.Enums</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case" kindref="compound">Luthetus.CompilerServices.CSharp.LexerCase</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case" kindref="compound">Luthetus.CompilerServices.CSharp.ParserCase</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals" kindref="compound">Luthetus.CompilerServices.CSharp.ParserCase.Internals</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_facts" kindref="compound">Luthetus.CompilerServices.CSharp.Facts</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers" kindref="compound">Luthetus.CompilerServices.CSharp.Tests.SmokeTests.Parsers</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">partial<sp/>class<sp/></highlight><highlight class="normal"><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests" kindref="compound">ExpressionTests</ref></highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a85542ea22f37895cc6f9b559dbe1eaed" kindref="member">Test</ref></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a85542ea22f37895cc6f9b559dbe1eaed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a85542ea22f37895cc6f9b559dbe1eaed" kindref="member">Test</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sourceText)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1ae1196b4524c15c74a09e13302d602373" kindref="member">SourceText</ref><sp/>=<sp/>sourceText;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a8fb1c759db72bf3124d98ef06c1fc577" kindref="member">ResourceUri</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca" kindref="member">ResourceUri</ref>(</highlight><highlight class="stringliteral">&quot;./unitTesting.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a9b4a179663dd100781fb915958bae8a2" kindref="member">Lexer</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer" kindref="compound">CSharpLexer</ref>(<ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a8fb1c759db72bf3124d98ef06c1fc577" kindref="member">ResourceUri</ref>,<sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1ae1196b4524c15c74a09e13302d602373" kindref="member">SourceText</ref>);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a9b4a179663dd100781fb915958bae8a2" kindref="member">Lexer</ref>.Lex();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a13bafd9bd771582e260906b5151d5d6a" kindref="member">Parser</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_c_sharp_parser" kindref="compound">CSharpParser</ref>(<ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a9b4a179663dd100781fb915958bae8a2" kindref="member">Lexer</ref>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1ac5cb7d5e51e4651ad88d69ea1cdbe726" kindref="member">CompilationUnit</ref><sp/>=<sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a13bafd9bd771582e260906b5151d5d6a" kindref="member">Parser</ref>.Parse();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1ae1196b4524c15c74a09e13302d602373" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1ae1196b4524c15c74a09e13302d602373" kindref="member">SourceText</ref><sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="32" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a8fb1c759db72bf3124d98ef06c1fc577" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a8fb1c759db72bf3124d98ef06c1fc577" kindref="member">ResourceUri</ref><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a8fb1c759db72bf3124d98ef06c1fc577" kindref="member">ResourceUri</ref><sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="33" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a9b4a179663dd100781fb915958bae8a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer" kindref="compound">CSharpLexer</ref><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a9b4a179663dd100781fb915958bae8a2" kindref="member">Lexer</ref><sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="34" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a13bafd9bd771582e260906b5151d5d6a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_c_sharp_parser" kindref="compound">CSharpParser</ref><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a13bafd9bd771582e260906b5151d5d6a" kindref="member">Parser</ref><sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="35" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1ac5cb7d5e51e4651ad88d69ea1cdbe726" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1ac5cb7d5e51e4651ad88d69ea1cdbe726" kindref="member">CompilationUnit</ref><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1ac5cb7d5e51e4651ad88d69ea1cdbe726" kindref="member">CompilationUnit</ref><sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="39" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a1b45797970fa1517aa5a04992a7ed165" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a1b45797970fa1517aa5a04992a7ed165" kindref="member">Numeric_Add_BinaryExpressionNode</ref>()</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">@&quot;1<sp/>+<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node" kindref="compound">BinaryExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>textTypeClause<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>leftLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.LeftExpressionNode;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryOperatorNode<sp/>=<sp/>binaryExpressionNode.BinaryOperatorNode;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//public<sp/>ISyntaxToken<sp/>binaryOperatorNode.OperatorToken<sp/>{<sp/>get;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>rightLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.RightExpressionNode;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="65" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a09e0de8b6b9d2252d977f837123525c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a09e0de8b6b9d2252d977f837123525c8" kindref="member">Numeric_Add_BinaryExpressionNode_More</ref>()</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">@&quot;1<sp/>+<sp/>1<sp/>+<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node" kindref="compound">BinaryExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>textTypeClause<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Left<sp/>Expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>leftBinaryExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node" kindref="compound">BinaryExpressionNode</ref>)binaryExpressionNode.LeftExpressionNode;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>leftBinaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Temporarily<sp/>swap<sp/>variables<sp/>for<sp/>sanity<sp/>#change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>rememberBinaryExpressionNode<sp/>=<sp/>binaryExpressionNode;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binaryExpressionNode<sp/>=<sp/>leftBinaryExpressionNode;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inner<sp/>Binary<sp/>Expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>leftLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.LeftExpressionNode;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryOperatorNode<sp/>=<sp/>binaryExpressionNode.BinaryOperatorNode;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//public<sp/>ISyntaxToken<sp/>binaryOperatorNode.OperatorToken<sp/>{<sp/>get;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>rightLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.RightExpressionNode;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Temporarily<sp/>swap<sp/>variables<sp/>for<sp/>sanity<sp/>#restore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binaryExpressionNode<sp/>=<sp/>rememberBinaryExpressionNode;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryOperatorNode<sp/>=<sp/>binaryExpressionNode.BinaryOperatorNode;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//public<sp/>ISyntaxToken<sp/>binaryOperatorNode.OperatorToken<sp/>{<sp/>get;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Right<sp/>Expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>rightLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.RightExpressionNode;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="126" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a039d38dd39afeac4d9c7ba82fde0b0bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a039d38dd39afeac4d9c7ba82fde0b0bc" kindref="member">Numeric_Subtract_BinaryExpressionNode</ref>()</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">@&quot;1<sp/>-<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node" kindref="compound">BinaryExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>textTypeClause<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>leftLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.LeftExpressionNode;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryOperatorNode<sp/>=<sp/>binaryExpressionNode.BinaryOperatorNode;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//public<sp/>ISyntaxToken<sp/>binaryOperatorNode.OperatorToken<sp/>{<sp/>get;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>rightLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.RightExpressionNode;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="152" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a529579397f113cd4320464e7db92873e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a529579397f113cd4320464e7db92873e" kindref="member">Numeric_Star_BinaryExpressionNode</ref>()</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">@&quot;1<sp/>*<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node" kindref="compound">BinaryExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>textTypeClause<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>leftLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.LeftExpressionNode;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryOperatorNode<sp/>=<sp/>binaryExpressionNode.BinaryOperatorNode;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//public<sp/>ISyntaxToken<sp/>binaryOperatorNode.OperatorToken<sp/>{<sp/>get;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>rightLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.RightExpressionNode;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="178" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1af5b9908be64ec7b15b927799d9475714" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1af5b9908be64ec7b15b927799d9475714" kindref="member">Numeric_Division_BinaryExpressionNode</ref>()</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">@&quot;1<sp/>/<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node" kindref="compound">BinaryExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>textTypeClause<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>leftLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.LeftExpressionNode;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryOperatorNode<sp/>=<sp/>binaryExpressionNode.BinaryOperatorNode;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//public<sp/>ISyntaxToken<sp/>binaryOperatorNode.OperatorToken<sp/>{<sp/>get;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>rightLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.RightExpressionNode;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="204" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa8dcd469a552d86c801e0c2d1b9bd268" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa8dcd469a552d86c801e0c2d1b9bd268" kindref="member">Numeric_EqualsEquals_BinaryExpressionNode</ref>()</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">@&quot;1<sp/>==<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node" kindref="compound">BinaryExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>textTypeClause<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>leftLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.LeftExpressionNode;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryOperatorNode<sp/>=<sp/>binaryExpressionNode.BinaryOperatorNode;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//public<sp/>ISyntaxToken<sp/>binaryOperatorNode.OperatorToken<sp/>{<sp/>get;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>rightLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.RightExpressionNode;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="230" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a03d6f271419bf2a66a3404bb55568546" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a03d6f271419bf2a66a3404bb55568546" kindref="member">String_BinaryExpressionNode</ref>()</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;\&quot;Asd\&quot;<sp/>+<sp/>\&quot;Fgh\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node" kindref="compound">BinaryExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>textTypeClause<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>leftLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.LeftExpressionNode;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryOperatorNode<sp/>=<sp/>binaryExpressionNode.BinaryOperatorNode;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//public<sp/>ISyntaxToken<sp/>binaryOperatorNode.OperatorToken<sp/>{<sp/>get;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>rightLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.RightExpressionNode;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="256" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a89bb68fa64e44db8bb42563d90432010" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a89bb68fa64e44db8bb42563d90432010" kindref="member">String_Interpolated</ref>()</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;$\&quot;asd\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>literalExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/>literalExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="268" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a5077c29a9776e2830fedccff05e8f6ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a5077c29a9776e2830fedccff05e8f6ab" kindref="member">String_Verbatim</ref>()</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;@\&quot;asd\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>literalExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/>literalExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="280" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a3beca01f08c489b96a8edce9f2a56653" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a3beca01f08c489b96a8edce9f2a56653" kindref="member">String_InterpolatedVerbatim</ref>()</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;$@\&quot;asd\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>literalExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/>literalExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="292" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ae3b686e3e1d7a4a4275a8359eb17826b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ae3b686e3e1d7a4a4275a8359eb17826b" kindref="member">String_VerbatimInterpolated</ref>()</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;@$\&quot;asd\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>literalExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/>literalExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="304" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a11934bbcd2cb429e01cd53329acc8e7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a11934bbcd2cb429e01cd53329acc8e7e" kindref="member">Char_BinaryExpressionNode</ref>()</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;&apos;a&apos;<sp/>+<sp/>&apos;\n&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node" kindref="compound">BinaryExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>textTypeClause<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;char&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>leftLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.LeftExpressionNode;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryOperatorNode<sp/>=<sp/>binaryExpressionNode.BinaryOperatorNode;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//public<sp/>ISyntaxToken<sp/>binaryOperatorNode.OperatorToken<sp/>{<sp/>get;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>rightLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.RightExpressionNode;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="330" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a789b098144b49e714c53893c48186065" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a789b098144b49e714c53893c48186065" kindref="member">Bool_BinaryExpressionNode</ref>()</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;false<sp/>==<sp/>true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node" kindref="compound">BinaryExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>textTypeClause<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bool&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>leftLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.LeftExpressionNode;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryOperatorNode<sp/>=<sp/>binaryExpressionNode.BinaryOperatorNode;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//public<sp/>ISyntaxToken<sp/>binaryOperatorNode.OperatorToken<sp/>{<sp/>get;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>rightLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.RightExpressionNode;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="356" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a0d3881e9150193eb0db49a4204cc1baf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a0d3881e9150193eb0db49a4204cc1baf" kindref="member">ParenthesizedExpressionNode_Test</ref>()</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;(7)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>parenthesizedExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_parenthesized_expression_node" kindref="compound">ParenthesizedExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>textTypeClause<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>parenthesizedExpressionNode.InnerExpression.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>literalExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)parenthesizedExpressionNode.InnerExpression;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">,<sp/>literalExpressionNode.LiteralSyntaxToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(parenthesizedExpressionNode.OpenParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="375" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a336210d1b4a67ba1e9e696e19491a095" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a336210d1b4a67ba1e9e696e19491a095" kindref="member">ShortCircuit</ref>()</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;(1<sp/>+<sp/>)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>parenthesizedExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_parenthesized_expression_node" kindref="compound">ParenthesizedExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>textTypeClause<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>parenthesizedExpressionNode.InnerExpression.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node" kindref="compound">BinaryExpressionNode</ref>)parenthesizedExpressionNode.InnerExpression;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>leftLiteralExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)binaryExpressionNode.LeftExpressionNode;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>binaryOperatorNode<sp/>=<sp/>binaryExpressionNode.BinaryOperatorNode;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>rightEmptyExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_empty_expression_node" kindref="compound">EmptyExpressionNode</ref>)binaryExpressionNode.RightExpressionNode;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(textTypeClause,<sp/>rightEmptyExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="400" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a2e3ee5c1d3e2307d783b03cd141c4c98" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a2e3ee5c1d3e2307d783b03cd141c4c98" kindref="member">ExplicitCastNode_IdentifierToken</ref>()</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;(MyClass)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteChildrenIndentedRecursive(topCodeBlock);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>explicitCastNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_explicit_cast_node" kindref="compound">ExplicitCastNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="413" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a782ec04c7274fe4b52486b666d001c30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a782ec04c7274fe4b52486b666d001c30" kindref="member">ExplicitCastNode_KeywordToken</ref>()</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;(int)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>explicitCastNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_explicit_cast_node" kindref="compound">ExplicitCastNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="424" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a451418bd6a001e946a1e78679aa884de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a451418bd6a001e946a1e78679aa884de" kindref="member">FunctionInvocationNode_Basic</ref>()</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;MyMethod()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>functionInvocationNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_invocation_node" kindref="compound">FunctionInvocationNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(functionInvocationNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(functionInvocationNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Empty(functionInvocationNode.FunctionParametersListingNode.FunctionParameterEntryNodeList);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="440" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a62837ac5c82cc5e704de591c22039b30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a62837ac5c82cc5e704de591c22039b30" kindref="member">FunctionInvocationNode_Parameters</ref>()</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;MyMethod(7,<sp/>\&quot;Asdfg\&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>functionInvocationNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_invocation_node" kindref="compound">FunctionInvocationNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FunctionParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(functionInvocationNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>numericFunctionParameterEntryNode<sp/>=<sp/>functionInvocationNode.FunctionParametersListingNode.FunctionParameterEntryNodeList[0];</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(<ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b" kindref="member">SyntaxKind</ref>.NumericLiteralToken,<sp/>((<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)numericFunctionParameterEntryNode.ExpressionNode).LiteralSyntaxToken.SyntaxKind);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>stringFunctionParameterEntryNode<sp/>=<sp/>functionInvocationNode.FunctionParametersListingNode.FunctionParameterEntryNodeList[1];</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(<ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b" kindref="member">SyntaxKind</ref>.StringLiteralToken,<sp/>((<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)stringFunctionParameterEntryNode.ExpressionNode).LiteralSyntaxToken.SyntaxKind);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(functionInvocationNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="464" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a6fedd472f5bf7244b2b35596e040b66f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a6fedd472f5bf7244b2b35596e040b66f" kindref="member">FunctionInvocationNode_Generic</ref>()</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;MyMethod&lt;int,<sp/>MyClass&gt;()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>functionInvocationNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_invocation_node" kindref="compound">FunctionInvocationNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GenericParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(functionInvocationNode.GenericParametersListingNode);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(functionInvocationNode.GenericParametersListingNode.OpenAngleBracketToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>intGenericParameterEntryNode<sp/>=<sp/>functionInvocationNode.GenericParametersListingNode.GenericParameterEntryNodeList[0];</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">,<sp/>intGenericParameterEntryNode.TypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>stringGenericParameterEntryNode<sp/>=<sp/>functionInvocationNode.GenericParametersListingNode.GenericParameterEntryNodeList[1];</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;MyClass&quot;</highlight><highlight class="normal">,<sp/>stringGenericParameterEntryNode.TypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(functionInvocationNode.GenericParametersListingNode.CloseAngleBracketToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(functionInvocationNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(functionInvocationNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="492" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ab54d39a8a53ff3c666728c5c9c70941d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ab54d39a8a53ff3c666728c5c9c70941d" kindref="member">FunctionInvocationNode_Generic_Parameters</ref>()</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;MyMethod&lt;int,<sp/>MyClass&gt;(7,<sp/>\&quot;Asdfg\&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>functionInvocationNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_invocation_node" kindref="compound">FunctionInvocationNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GenericParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(functionInvocationNode.GenericParametersListingNode);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(functionInvocationNode.GenericParametersListingNode.OpenAngleBracketToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>intGenericParameterEntryNode<sp/>=<sp/>functionInvocationNode.GenericParametersListingNode.GenericParameterEntryNodeList[0];</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">,<sp/>intGenericParameterEntryNode.TypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>stringGenericParameterEntryNode<sp/>=<sp/>functionInvocationNode.GenericParametersListingNode.GenericParameterEntryNodeList[1];</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;MyClass&quot;</highlight><highlight class="normal">,<sp/>stringGenericParameterEntryNode.TypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(functionInvocationNode.GenericParametersListingNode.CloseAngleBracketToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FunctionParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(functionInvocationNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>numericFunctionParameterEntryNode<sp/>=<sp/>functionInvocationNode.FunctionParametersListingNode.FunctionParameterEntryNodeList[0];</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(<ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b" kindref="member">SyntaxKind</ref>.NumericLiteralToken,<sp/>((<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)numericFunctionParameterEntryNode.ExpressionNode).LiteralSyntaxToken.SyntaxKind);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>stringFunctionParameterEntryNode<sp/>=<sp/>functionInvocationNode.FunctionParametersListingNode.FunctionParameterEntryNodeList[1];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(<ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b" kindref="member">SyntaxKind</ref>.StringLiteralToken,<sp/>((<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)stringFunctionParameterEntryNode.ExpressionNode).LiteralSyntaxToken.SyntaxKind);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(functionInvocationNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="534" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a04e1a3acf430552e52811eeba8dfafe2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a04e1a3acf430552e52811eeba8dfafe2" kindref="member">ConstructorInvocationNode_Basic</ref>()</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>Person()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>constructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)topCodeBlock.GetChildList()[1];</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructorInvocationExpressionNode.ResultTypeClauseNode;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.FunctionParametersListingNode);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Empty(constructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="562" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ab3f32884460eb2bd41c1e0dfe032196a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ab3f32884460eb2bd41c1e0dfe032196a" kindref="member">ConstructorInvocationNode_Parameters</ref>()</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>Person(18,<sp/>\&quot;John\&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>constructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)topCodeBlock.GetChildList()[1];</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructorInvocationExpressionNode.ResultTypeClauseNode;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.FunctionParametersListingNode);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FunctionParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(2,<sp/>constructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList.Count);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="594" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a877f53dd75ed0b4398795b4126837543" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a877f53dd75ed0b4398795b4126837543" kindref="member">ConstructorInvocationNode_Generic</ref>()</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>Dictionary&lt;int,<sp/>Person&gt;()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>constructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)topCodeBlock.GetChildList()[1];</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ResultTypeClauseNode.GenericParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode.OpenAngleBracketToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(2,<sp/>constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode.GenericParameterEntryNodeList.Count);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode.CloseAngleBracketToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.FunctionParametersListingNode);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Empty(constructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="622" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aae106b4b7d51e88010752d72dcf437b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aae106b4b7d51e88010752d72dcf437b3" kindref="member">ConstructorInvocationNode_Generic_Parameters_MISSING_NumericLiteralToken_A</ref>()</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>constructor<sp/>parameters<sp/>are<sp/>nonsensical<sp/>and<sp/>just<sp/>exist<sp/>for<sp/>the<sp/>sake<sp/>of<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>Dictionary&lt;int,<sp/>Person&gt;(0,<sp/>\&quot;Test\&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>token<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/><ref refid="namespacetest" kindref="compound">test</ref>.Lexer.SyntaxTokenList)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.WriteLine(token.SyntaxKind);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="636" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a014805396f0bad679a52393f7002a3da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a014805396f0bad679a52393f7002a3da" kindref="member">ConstructorInvocationNode_Generic_Parameters_MISSING_NumericLiteralToken_B</ref>()</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>turns<sp/>out<sp/>that<sp/>&quot;0&quot;<sp/>does<sp/>not<sp/>Lex<sp/>to<sp/>a<sp/>NumericLiteralToken.</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>one<sp/>of<sp/>the<sp/>most<sp/>ridiculous<sp/>bugs<sp/>I&apos;ve<sp/>ever<sp/>seen,</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>because<sp/>how<sp/>am<sp/>I<sp/>only<sp/>now<sp/>seeing<sp/>this?<sp/>How<sp/>long<sp/>was<sp/>this<sp/>an<sp/>issue<sp/>for???</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>doesn&apos;t<sp/>Lex<sp/>to<sp/>anything,<sp/>it<sp/>just<sp/>returns<sp/>EndOfFileToken,<sp/>or<sp/>if<sp/>more<sp/>than<sp/>&quot;0&quot;<sp/>is<sp/>in<sp/>the<sp/>text,</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>skips<sp/>over<sp/>where<sp/>the<sp/>0-token<sp/>would<sp/>be.</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Oh<sp/>my<sp/>gosh,<sp/>I&apos;ve<sp/>checked<sp/>the<sp/>&apos;CSharpLexer.cs&apos;<sp/>and<sp/>in<sp/>the<sp/>switch<sp/>statement<sp/>that</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>within<sp/>a<sp/>while<sp/>loop<sp/>that<sp/>goes<sp/>over<sp/>every<sp/>character<sp/>in<sp/>the<sp/>string,</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>hardcoded<sp/>cases<sp/>1...9<sp/>inclusive<sp/>both<sp/>ends<sp/>but<sp/>never<sp/>&apos;0&apos;.</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Someone<sp/>needs<sp/>to<sp/>take<sp/>away<sp/>my<sp/>keyboard<sp/>because<sp/>I<sp/>am<sp/>dangerously<sp/>stupid.</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TODO:<sp/>Anything<sp/>similar<sp/>to<sp/>this<sp/>in<sp/>the<sp/>future<sp/>should<sp/>return<sp/>a<sp/>&apos;BadToken&apos;<sp/>or<sp/>some<sp/>sort.</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>constructor<sp/>parameters<sp/>are<sp/>nonsensical<sp/>and<sp/>just<sp/>exist<sp/>for<sp/>the<sp/>sake<sp/>of<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>token<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/><ref refid="namespacetest" kindref="compound">test</ref>.Lexer.SyntaxTokenList)</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.WriteLine(token.SyntaxKind);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="671" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa73f8d20ed94d015ee6a49ed122a646e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa73f8d20ed94d015ee6a49ed122a646e" kindref="member">ConstructorInvocationNode_Generic_Parameters</ref>()</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>constructor<sp/>parameters<sp/>are<sp/>nonsensical<sp/>and<sp/>just<sp/>exist<sp/>for<sp/>the<sp/>sake<sp/>of<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>Dictionary&lt;int,<sp/>Person&gt;(0,<sp/>\&quot;Test\&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>constructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)topCodeBlock.GetChildList()[1];</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ResultTypeClauseNode.GenericParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode.OpenAngleBracketToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(2,<sp/>constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode.GenericParameterEntryNodeList.Count);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>intGenericParameterEntryNode<sp/>=<sp/>constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode.GenericParameterEntryNodeList[0];</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">,<sp/>intGenericParameterEntryNode.TypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>personGenericParameterEntryNode<sp/>=<sp/>constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode.GenericParameterEntryNodeList[1];</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;Person&quot;</highlight><highlight class="normal">,<sp/>personGenericParameterEntryNode.TypeClauseNode.TypeIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode.CloseAngleBracketToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FunctionParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.FunctionParametersListingNode);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(2,<sp/>constructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList.Count);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="711" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a42c129f9a23b9ea2b5ae07eb3c67bee7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a42c129f9a23b9ea2b5ae07eb3c67bee7" kindref="member">ConstructorInvocationNode_NoTypeClauseNode</ref>()</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;new()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>constructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(constructorInvocationExpressionNode.ResultTypeClauseNode);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FunctionParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.FunctionParametersListingNode);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Empty(constructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="736" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a0b7fea0e9af1af51f7c5a5c1e53ba3a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a0b7fea0e9af1af51f7c5a5c1e53ba3a2" kindref="member">ObjectInitializationNode_Parameters_NoTrailingComma</ref>()</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>MyClass<sp/>{<sp/>FirstName<sp/>=<sp/>firstName,<sp/>LastName<sp/>=<sp/>lastName<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>constructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructorInvocationExpressionNode.ResultTypeClauseNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FunctionParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(constructorInvocationExpressionNode.FunctionParametersListingNode);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ObjectInitializationParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{<sp/>FirstName<sp/>=<sp/>firstName,<sp/>LastName<sp/>=<sp/>lastName<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>firstNameObjectInitializationParameterEntryNode<sp/>=<sp/>constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList[0];</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(firstNameObjectInitializationParameterEntryNode.PropertyIdentifierToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;FirstName&quot;</highlight><highlight class="normal">,<sp/>firstNameObjectInitializationParameterEntryNode.PropertyIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(firstNameObjectInitializationParameterEntryNode.EqualsToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>ambiguousIdentifierExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_ambi6c9b6a5b7a1d6dc1278537e7b1a3ccbc" kindref="compound">AmbiguousIdentifierExpressionNode</ref>)firstNameObjectInitializationParameterEntryNode.ExpressionNode;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;firstName&quot;</highlight><highlight class="normal">,<sp/>ambiguousIdentifierExpressionNode.Token.TextSpan.GetText());</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>lastNameObjectInitializationParameterEntryNode<sp/>=<sp/>constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList[1];</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(lastNameObjectInitializationParameterEntryNode.PropertyIdentifierToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;LastName&quot;</highlight><highlight class="normal">,<sp/>lastNameObjectInitializationParameterEntryNode.PropertyIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(lastNameObjectInitializationParameterEntryNode.EqualsToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>ambiguousIdentifierExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_ambi6c9b6a5b7a1d6dc1278537e7b1a3ccbc" kindref="compound">AmbiguousIdentifierExpressionNode</ref>)lastNameObjectInitializationParameterEntryNode.ExpressionNode;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;lastName&quot;</highlight><highlight class="normal">,<sp/>ambiguousIdentifierExpressionNode.Token.TextSpan.GetText());</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="786" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a05ab106f16c0dd32ec45ca38b67b0f5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a05ab106f16c0dd32ec45ca38b67b0f5e" kindref="member">ObjectInitializationNode__Parameters_WithTrailingComma</ref>()</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>MyClassAaa<sp/>{<sp/>FirstName<sp/>=<sp/>firstName,<sp/>LastName<sp/>=<sp/>lastName,<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>constructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructorInvocationExpressionNode.ResultTypeClauseNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FunctionParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(constructorInvocationExpressionNode.FunctionParametersListingNode);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ObjectInitializationParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{<sp/>FirstName<sp/>=<sp/>firstName,<sp/>LastName<sp/>=<sp/>lastName<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>firstNameObjectInitializationParameterEntryNode<sp/>=<sp/>constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList[0];</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;FirstName&quot;</highlight><highlight class="normal">,<sp/>firstNameObjectInitializationParameterEntryNode.PropertyIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(firstNameObjectInitializationParameterEntryNode.EqualsToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>ambiguousIdentifierExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_ambi6c9b6a5b7a1d6dc1278537e7b1a3ccbc" kindref="compound">AmbiguousIdentifierExpressionNode</ref>)firstNameObjectInitializationParameterEntryNode.ExpressionNode;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;firstName&quot;</highlight><highlight class="normal">,<sp/>ambiguousIdentifierExpressionNode.Token.TextSpan.GetText());</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>lastNameObjectInitializationParameterEntryNode<sp/>=<sp/>constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList[1];</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;LastName&quot;</highlight><highlight class="normal">,<sp/>lastNameObjectInitializationParameterEntryNode.PropertyIdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(lastNameObjectInitializationParameterEntryNode.EqualsToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>ambiguousIdentifierExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_ambi6c9b6a5b7a1d6dc1278537e7b1a3ccbc" kindref="compound">AmbiguousIdentifierExpressionNode</ref>)lastNameObjectInitializationParameterEntryNode.ExpressionNode;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;lastName&quot;</highlight><highlight class="normal">,<sp/>ambiguousIdentifierExpressionNode.Token.TextSpan.GetText());</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="834" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a5baae3b4753b8ae57ab6ad8e2b00ae17" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a5baae3b4753b8ae57ab6ad8e2b00ae17" kindref="member">ObjectInitializationNode_NoParameters_NoTrailingComma</ref>()</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>MyClassAaa<sp/>{<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>constructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructorInvocationExpressionNode.ResultTypeClauseNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FunctionParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(constructorInvocationExpressionNode.FunctionParametersListingNode);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ObjectInitializationParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Empty(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="864" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a77097dabad79975d43c6eae457103650" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a77097dabad79975d43c6eae457103650" kindref="member">ObjectInitializationNode_NoParameters_WithTrailingComma</ref>()</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>MyClassAaa<sp/>{<sp/>,<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>constructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructorInvocationExpressionNode.ResultTypeClauseNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FunctionParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(constructorInvocationExpressionNode.FunctionParametersListingNode);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ObjectInitializationParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Empty(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="894" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1acd0d286f7ff57b46fbc60035f75ba1f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1acd0d286f7ff57b46fbc60035f75ba1f3" kindref="member">ObjectInitializationNode_WithParenthesis</ref>()</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>MyClassAaa()<sp/>{<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>constructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructorInvocationExpressionNode.ResultTypeClauseNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FunctionParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.FunctionParametersListingNode);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Empty(constructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ObjectInitializationParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Empty(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="927" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa190fff943e737a2b8af193068176eed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa190fff943e737a2b8af193068176eed" kindref="member">CollectionInitializationNode_Parameters_NoTrailingComma</ref>()</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>List&lt;int&gt;<sp/>{<sp/>1,<sp/>2<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>constructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructorInvocationExpressionNode.ResultTypeClauseNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FunctionParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(constructorInvocationExpressionNode.FunctionParametersListingNode);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ObjectInitializationParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{<sp/>1,<sp/>2<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>firstCollectionInitializationParameterEntryNode<sp/>=<sp/>constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList[0];</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(firstCollectionInitializationParameterEntryNode.IsCollectionInitialization);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>literalExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)firstCollectionInitializationParameterEntryNode.ExpressionNode;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>literalExpressionNode.LiteralSyntaxToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(literalExpressionNode.LiteralSyntaxToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>secondCollectionInitializationParameterEntryNode<sp/>=<sp/>constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList[1];</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(secondCollectionInitializationParameterEntryNode.IsCollectionInitialization);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>literalExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)secondCollectionInitializationParameterEntryNode.ExpressionNode;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/>literalExpressionNode.LiteralSyntaxToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(literalExpressionNode.LiteralSyntaxToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="973" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa8e6cd46befdb2b0d6348a57db7d2cf1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa8e6cd46befdb2b0d6348a57db7d2cf1" kindref="member">CollectionInitializationNode_Parameters_WithTrailingComma</ref>()</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>List&lt;Person&gt;<sp/>{<sp/>new<sp/>Person(1,<sp/>\&quot;John\&quot;),<sp/>new(2,<sp/>\&quot;Jane\&quot;),<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>constructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructorInvocationExpressionNode.ResultTypeClauseNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FunctionParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(constructorInvocationExpressionNode.FunctionParametersListingNode);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ObjectInitializationParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{<sp/>new<sp/>Person(1,<sp/>&quot;John&quot;),<sp/>new(2,<sp/>&quot;Jane&quot;),<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new<sp/>Person(1,<sp/>&quot;John&quot;),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>firstCollectionInitializationParameterEntryNode<sp/>=<sp/>constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList[0];</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(firstCollectionInitializationParameterEntryNode.IsCollectionInitialization);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>innerConstructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)firstCollectionInitializationParameterEntryNode.ExpressionNode;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(innerConstructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assert.Equal(innerConstructorInvocationExpressionNode.ResultTypeClauseNode);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>innerFunctionParametersListingNode<sp/>(1,<sp/>&quot;John&quot;),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>innerFunctionParametersListingNode<sp/>=<sp/>innerConstructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList[0];</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>literalExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)innerFunctionParametersListingNode.ExpressionNode;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>literalExpressionNode.LiteralSyntaxToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.False(innerFunctionParametersListingNode.HasOutKeyword);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.False(innerFunctionParametersListingNode.HasInKeyword);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.False(innerFunctionParametersListingNode.HasRefKeyword);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;John&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>innerFunctionParametersListingNode<sp/>=<sp/>innerConstructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList[1];</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>literalExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)innerFunctionParametersListingNode.ExpressionNode;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;John&quot;</highlight><highlight class="normal">,<sp/>literalExpressionNode.LiteralSyntaxToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.False(innerFunctionParametersListingNode.HasOutKeyword);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.False(innerFunctionParametersListingNode.HasInKeyword);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.False(innerFunctionParametersListingNode.HasRefKeyword);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(innerConstructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new(2,<sp/>&quot;Jane&quot;),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>secondCollectionInitializationParameterEntryNode<sp/>=<sp/>constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList[1];</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(secondCollectionInitializationParameterEntryNode.IsCollectionInitialization);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>innerConstructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)secondCollectionInitializationParameterEntryNode.ExpressionNode;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(innerConstructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>innerFunctionParametersListingNode<sp/>(2,<sp/>&quot;Jane&quot;),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>innerFunctionParametersListingNode<sp/>=<sp/>innerConstructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList[0];</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>literalExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)innerFunctionParametersListingNode.ExpressionNode;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/>literalExpressionNode.LiteralSyntaxToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.False(innerFunctionParametersListingNode.HasOutKeyword);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.False(innerFunctionParametersListingNode.HasInKeyword);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.False(innerFunctionParametersListingNode.HasRefKeyword);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Jane&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>innerFunctionParametersListingNode<sp/>=<sp/>innerConstructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList[1];</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>literalExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node" kindref="compound">LiteralExpressionNode</ref>)innerFunctionParametersListingNode.ExpressionNode;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;Jane&quot;</highlight><highlight class="normal">,<sp/>literalExpressionNode.LiteralSyntaxToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.False(innerFunctionParametersListingNode.HasOutKeyword);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.False(innerFunctionParametersListingNode.HasInKeyword);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.False(innerFunctionParametersListingNode.HasRefKeyword);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Assert.Equal(&quot;2&quot;,<sp/>literalExpressionNode.LiteralSyntaxToken.TextSpan.GetText());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Assert.True(literalExpressionNode.LiteralSyntaxToken.ConstructorWasInvoked);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(innerConstructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1081" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a03ca74ec537fbd03ad8edd9b358a8176" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a03ca74ec537fbd03ad8edd9b358a8176" kindref="member">CollectionInitializationNode_NoParameters_NoTrailingComma</ref>()</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>List&lt;int&gt;<sp/>{<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>constructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructorInvocationExpressionNode.ResultTypeClauseNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FunctionParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(constructorInvocationExpressionNode.FunctionParametersListingNode);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ObjectInitializationParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Empty(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1111" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a83177b5d8509cb331770228a9d1ee9dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a83177b5d8509cb331770228a9d1ee9dd" kindref="member">CollectionInitializationNode_NoParameters_WithTrailingComma</ref>()</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>List&lt;Person&gt;<sp/>{<sp/>,<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>constructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructorInvocationExpressionNode.ResultTypeClauseNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FunctionParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Null(constructorInvocationExpressionNode.FunctionParametersListingNode);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ObjectInitializationParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Empty(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1141" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a83abf38bb6118d54a036116f57174410" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a83abf38bb6118d54a036116f57174410" kindref="member">CollectionInitializationNode_WithParenthesis</ref>()</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>List&lt;Person&gt;()<sp/>{<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>constructorInvocationExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79" kindref="compound">ConstructorInvocationExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructorInvocationExpressionNode.ResultTypeClauseNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FunctionParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.FunctionParametersListingNode);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Empty(constructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ObjectInitializationParametersListingNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Empty(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1175" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1acf86926827eb50318740028eb6674130" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1acf86926827eb50318740028eb6674130" kindref="member">LambdaFunction_Expression_NoParameter</ref>()</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;()<sp/>=&gt;<sp/>\&quot;Abc\&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>lambdaExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_lambda_expression_node" kindref="compound">LambdaExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(lambdaExpressionNode.CodeBlockNodeIsExpression);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Empty(lambdaExpressionNode.VariableDeclarationNodeList);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1188" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa9223991fc39094eeea60b37e6d8d255" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa9223991fc39094eeea60b37e6d8d255" kindref="member">LambdaFunction_Expression_SingleParameter</ref>()</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Goal:<sp/>Parse<sp/>lambda<sp/>expression<sp/>variable<sp/>declarations<sp/>(2024-11-03)</highlight></codeline>
<codeline lineno="1192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>================================================================</highlight></codeline>
<codeline lineno="1193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;intPerson&apos;<sp/>is<sp/>to<sp/>signify<sp/>&apos;int&apos;<sp/>or<sp/>&apos;Person&apos;<sp/>because<sp/>this<sp/>is<sp/>a<sp/>&apos;keyword&apos;<sp/>and<sp/>an<sp/>&apos;identifier&apos;.</highlight></codeline>
<codeline lineno="1195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>So<sp/>remember<sp/>the<sp/>general<sp/>type<sp/>clause<sp/>matching<sp/>not<sp/>just<sp/>an<sp/>identifier.</highlight></codeline>
<codeline lineno="1196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rename<sp/>&apos;x&apos;<sp/>to<sp/>&apos;argsX&apos;?</highlight></codeline>
<codeline lineno="1198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Technically<sp/>&apos;intPerson&apos;<sp/>does<sp/>not<sp/>encompass<sp/>the<sp/>case<sp/>of<sp/>a<sp/>contextual<sp/>keyword...</highlight></codeline>
<codeline lineno="1200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-10<sp/>points</highlight></codeline>
<codeline lineno="1201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cases:</highlight></codeline>
<codeline lineno="1203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>================================================================</highlight></codeline>
<codeline lineno="1204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>()<sp/>=&gt;<sp/>...;</highlight></codeline>
<codeline lineno="1205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/></highlight></codeline>
<codeline lineno="1206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>BreakList:<sp/>[(StatementDelimiterToken,<sp/>null)]</highlight></codeline>
<codeline lineno="1207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>EmptyExpressionNode<sp/>+<sp/>OpenParenthesisToken<sp/>=&gt;</highlight></codeline>
<codeline lineno="1208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Push(new<sp/>ParenthesizedExpressionNode());</highlight></codeline>
<codeline lineno="1210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>new<sp/>EmptyExpressionNode();</highlight></codeline>
<codeline lineno="1211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>BreakList:<sp/>[(StatementDelimiterToken,<sp/>null),<sp/>(CloseParenthesisToken,<sp/>ParenthesizedExpressionNode)]</highlight></codeline>
<codeline lineno="1214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>EmptyExpressionNode<sp/>+<sp/>CloseParenthesisToken<sp/>=&gt;</highlight></codeline>
<codeline lineno="1215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(peek(1)==EqualsToken<sp/>&amp;&amp;<sp/>peek(2)==CloseAngleBracketToken)</highlight></codeline>
<codeline lineno="1217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>LambdaExpressionNode;</highlight></codeline>
<codeline lineno="1218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ParenthesizedExpressionNode;</highlight></codeline>
<codeline lineno="1220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Related<sp/>case<sp/>of<sp/>ParenthesizedExpressionNode<sp/>with<sp/>empty<sp/>inner<sp/>expression<sp/>then<sp/>StatementDelimiterToken:</highlight></codeline>
<codeline lineno="1223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>();</highlight></codeline>
<codeline lineno="1224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>================================================================</highlight></codeline>
<codeline lineno="1226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>x<sp/>=&gt;<sp/>...;</highlight></codeline>
<codeline lineno="1227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Related<sp/>case<sp/>of<sp/>VariableAssignmentExpressionNode:</highlight></codeline>
<codeline lineno="1229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>x<sp/>=<sp/>...;</highlight></codeline>
<codeline lineno="1230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Related<sp/>case<sp/>of<sp/>FunctionInvocationNode:</highlight></codeline>
<codeline lineno="1232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>x();</highlight></codeline>
<codeline lineno="1233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>================================================================</highlight></codeline>
<codeline lineno="1235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>intPerson<sp/>x<sp/>=&gt;<sp/>...;</highlight></codeline>
<codeline lineno="1236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/></highlight></codeline>
<codeline lineno="1237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>This<sp/>case<sp/>is<sp/>actually<sp/>quite<sp/>unique.</highlight></codeline>
<codeline lineno="1238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmbiguousIdentifierNode<sp/>AmbiguousIdentifierNode<sp/>=&gt;<sp/>...;</highlight></codeline>
<codeline lineno="1239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>Two<sp/>consecutive<sp/>AmbiguousIdentifierNode(s)<sp/>can<sp/>happen<sp/>in<sp/>other<sp/>syntax.</highlight></codeline>
<codeline lineno="1241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>But,<sp/>these<sp/>other<sp/>syntax<sp/>begin<sp/>with<sp/>a<sp/>keyword.</highlight></codeline>
<codeline lineno="1242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>So,<sp/>the<sp/>lack<sp/>of<sp/>a<sp/>keyword<sp/>prior<sp/>to<sp/>the<sp/>two<sp/>nodes<sp/>is<sp/>indicative<sp/>of<sp/>it<sp/>being<sp/>a<sp/>lambda<sp/>expression.</highlight></codeline>
<codeline lineno="1243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Perhaps<sp/>check<sp/>if<sp/>following<sp/>the<sp/>two<sp/>nodes<sp/>there<sp/>is<sp/>a<sp/>&apos;=&gt;&apos;<sp/>syntax<sp/>prior<sp/>to<sp/>deciding<sp/>it<sp/>is<sp/>a<sp/>lambda<sp/>expression.</highlight></codeline>
<codeline lineno="1245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>there<sp/>is<sp/>NOT<sp/>&apos;=&gt;&apos;<sp/>then<sp/>decide<sp/>it<sp/>is<sp/>a<sp/>BadExpressionNode.</highlight></codeline>
<codeline lineno="1246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/></highlight></codeline>
<codeline lineno="1247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Although,<sp/>this<sp/>actually<sp/>is<sp/>the<sp/>exact<sp/>same<sp/>scenario<sp/>as:</highlight></codeline>
<codeline lineno="1248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(intPerson<sp/>x)<sp/>=&gt;<sp/>...;</highlight></codeline>
<codeline lineno="1249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>is<sp/>the<sp/>same<sp/>because<sp/>they<sp/>both<sp/>start<sp/>with<sp/>an<sp/>EmptyExpressionNode<sp/>upon<sp/>encountering<sp/>the<sp/>two<sp/>consecutive</highlight></codeline>
<codeline lineno="1251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmbiguousIdentifierNode(s).</highlight></codeline>
<codeline lineno="1252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1253"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>So,<sp/>only<sp/>checking<sp/>for<sp/>the<sp/>next<sp/>few<sp/>tokens<sp/>to<sp/>be<sp/>&apos;=&gt;&apos;<sp/>won&apos;t<sp/>work.</highlight></codeline>
<codeline lineno="1254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Because<sp/>there<sp/>could<sp/>be<sp/>an<sp/>unknown<sp/>amount<sp/>of<sp/>parameters<sp/>being<sp/>defined,<sp/>such<sp/>that<sp/>a<sp/>&apos;,&apos;<sp/>is<sp/>found<sp/>instead<sp/>of<sp/>a<sp/>&apos;=&gt;&apos;.</highlight></codeline>
<codeline lineno="1255"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>As<sp/>well,<sp/>there<sp/>could<sp/>be<sp/>&apos;)&apos;<sp/>found<sp/>if<sp/>reading<sp/>the<sp/>final<sp/>parameter.</highlight></codeline>
<codeline lineno="1256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>================================================================</highlight></codeline>
<codeline lineno="1258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(x)<sp/>=&gt;<sp/>...;</highlight></codeline>
<codeline lineno="1259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/></highlight></codeline>
<codeline lineno="1260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>BreakList:<sp/>[(StatementDelimiterToken,<sp/>null)]</highlight></codeline>
<codeline lineno="1261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>EmptyExpressionNode<sp/>+<sp/>OpenParenthesisToken<sp/>=&gt;</highlight></codeline>
<codeline lineno="1262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Push(new<sp/>ParenthesizedExpressionNode());</highlight></codeline>
<codeline lineno="1264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>new<sp/>EmptyExpressionNode();</highlight></codeline>
<codeline lineno="1265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>BreakList:<sp/>[(StatementDelimiterToken,<sp/>null),<sp/>(CloseParenthesisToken,<sp/>ParenthesizedExpressionNode)]</highlight></codeline>
<codeline lineno="1268"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>EmptyExpressionNode<sp/>+<sp/>IdentifierToken<sp/>=&gt;<sp/>AmbiguousIdentifierExpressionNode;</highlight></codeline>
<codeline lineno="1269"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1270"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>BreakList:<sp/>[(StatementDelimiterToken,<sp/>null),<sp/>(CloseParenthesisToken,<sp/>ParenthesizedExpressionNode)]</highlight></codeline>
<codeline lineno="1271"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmbiguousIdentifierExpressionNode<sp/>+<sp/>CloseParenthesisToken<sp/>=&gt;</highlight></codeline>
<codeline lineno="1272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(peek(1)==EqualsToken<sp/>&amp;&amp;<sp/>peek(2)==CloseAngleBracketToken)</highlight></codeline>
<codeline lineno="1274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>LambdaExpressionNode;</highlight></codeline>
<codeline lineno="1275"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1276"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ParenthesizedExpressionNode;</highlight></codeline>
<codeline lineno="1277"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Related<sp/>case<sp/>of<sp/>explicit<sp/>casting:</highlight></codeline>
<codeline lineno="1280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>(intPerson)x;</highlight></codeline>
<codeline lineno="1281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>EmptyExpressionNode<sp/>+<sp/>OpenParenthesisToken<sp/>=&gt;<sp/>ParenthesizedExpressionNode;</highlight></codeline>
<codeline lineno="1282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>(intPerson)<sp/>=&gt;<sp/>...;</highlight></codeline>
<codeline lineno="1284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>EmptyExpressionNode<sp/>+<sp/>OpenParenthesisToken<sp/>=&gt;<sp/>ParenthesizedExpressionNode;</highlight></codeline>
<codeline lineno="1285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>================================================================</highlight></codeline>
<codeline lineno="1287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(intPerson<sp/>x)<sp/>=&gt;<sp/>...;</highlight></codeline>
<codeline lineno="1288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1289"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>One<sp/>of<sp/>the<sp/>main<sp/>issues<sp/>that<sp/>I&apos;m<sp/>having<sp/>is<sp/>how<sp/>to<sp/>track<sp/>the<sp/>&apos;intPerson<sp/>x&apos;<sp/>during<sp/>the</highlight></codeline>
<codeline lineno="1290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>spent<sp/>as<sp/>a<sp/>ParenthesizedExpressionNode.</highlight></codeline>
<codeline lineno="1291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1292"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>The<sp/>same<sp/>is<sp/>true<sp/>for<sp/>&apos;x,<sp/>y&apos;.</highlight></codeline>
<codeline lineno="1293"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1294"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>Because<sp/>these<sp/>syntax<sp/>are<sp/>nonsensical<sp/>to<sp/>the<sp/>ParenthesizedExpressionNode.</highlight></codeline>
<codeline lineno="1295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1296"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>I<sp/>could<sp/>store<sp/>each<sp/>&apos;AmbiguousIdentifierNode&apos;<sp/>in<sp/>the<sp/>SyntaxList<sp/>property<sp/>of<sp/>a<sp/>&apos;BadExpressionNode&apos;.</highlight></codeline>
<codeline lineno="1297"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>Then,<sp/>if<sp/>I<sp/>later<sp/>determine<sp/>that<sp/>im<sp/>looking<sp/>at<sp/>a<sp/>LambdaExpressionNode</highlight></codeline>
<codeline lineno="1299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>can<sp/>give<sp/>the<sp/>LambdaExpressionNode<sp/>the<sp/>&apos;BadExpressionNode&apos;.</highlight></codeline>
<codeline lineno="1300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>At<sp/>that<sp/>point<sp/>the<sp/>LambdaExpressionNode<sp/>can<sp/>then<sp/>make<sp/>sense<sp/>of<sp/>the<sp/>&apos;BadExpressionNode&apos;<sp/>itself.</highlight></codeline>
<codeline lineno="1302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1303"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>If<sp/>the<sp/>BadExpressionNode&apos;s<sp/>SyntaxList<sp/>is:<sp/>{<sp/>&apos;intPerson&apos;,<sp/>&apos;x&apos;<sp/>}.</highlight></codeline>
<codeline lineno="1304"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Then<sp/>the<sp/>LambdaExpressionNode<sp/>can<sp/>iterate<sp/>over<sp/>each<sp/>item,</highlight></codeline>
<codeline lineno="1305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>take<sp/>two<sp/>consecutive<sp/>AmbiguousIdentifierNode(s)<sp/>to<sp/>be<sp/>a<sp/>TypeClauseNode<sp/>and<sp/>&quot;variable<sp/>identifier&quot;.</highlight></codeline>
<codeline lineno="1306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/></highlight></codeline>
<codeline lineno="1307"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>Maybe<sp/>if<sp/>the<sp/>LambdaExpressionNode<sp/>finds<sp/>3<sp/>consecutive<sp/>AmbiguousIdentifierNode(s),</highlight></codeline>
<codeline lineno="1308"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>the<sp/>LambdaExpressionNode<sp/>itself<sp/>is<sp/>a<sp/>BadExpressionNode?</highlight></codeline>
<codeline lineno="1309"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1310"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>If<sp/>the<sp/>LambdaExpressionNode<sp/>finds<sp/>a<sp/>CommaToken,<sp/>then<sp/>it<sp/>can<sp/>start<sp/>tracking<sp/>a<sp/>new<sp/>parameter.</highlight></codeline>
<codeline lineno="1311"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>I&apos;d<sp/>prefer<sp/>to<sp/>not<sp/>construct<sp/>an<sp/>instance<sp/>of<sp/>ParenthesizedExpressionNode,<sp/>just<sp/>to<sp/>later<sp/>replace</highlight></codeline>
<codeline lineno="1313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>with<sp/>the<sp/>construction<sp/>of<sp/>a<sp/>LambdaExpressionNode.</highlight></codeline>
<codeline lineno="1314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>But,<sp/>that<sp/>concern<sp/>is<sp/>likely<sp/>a<sp/>minor<sp/>detail<sp/>relative<sp/>to<sp/>the<sp/>whole<sp/>of<sp/>getting<sp/>the<sp/>C#<sp/>Parser<sp/>to<sp/>work<sp/>correctly.</highlight></codeline>
<codeline lineno="1316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>================================================================</highlight></codeline>
<codeline lineno="1318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(x,<sp/>y,<sp/>*)<sp/>=&gt;<sp/>...;</highlight></codeline>
<codeline lineno="1319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1320"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>================================================================</highlight></codeline>
<codeline lineno="1321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(intPerson<sp/>x,<sp/>y,<sp/>*)<sp/>=&gt;<sp/>...;</highlight></codeline>
<codeline lineno="1322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>================================================================</highlight></codeline>
<codeline lineno="1324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(x,<sp/>intPerson<sp/>y,<sp/>*)<sp/>=&gt;<sp/>...;</highlight></codeline>
<codeline lineno="1325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>================================================================</highlight></codeline>
<codeline lineno="1327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(intPerson<sp/>x,<sp/>intPerson<sp/>y,<sp/>*)<sp/>=&gt;<sp/>...;</highlight></codeline>
<codeline lineno="1328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>================================================================</highlight></codeline>
<codeline lineno="1330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>async<sp/>...<sp/>=&gt;<sp/>...;</highlight></codeline>
<codeline lineno="1331"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;(x<sp/>=&gt;<sp/>\&quot;Abc\&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteChildrenIndented(topCodeBlock);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>parenthesizedExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_parenthesized_expression_node" kindref="compound">ParenthesizedExpressionNode</ref>)topCodeBlock.GetChildList()[1];</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>lambdaExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_lambda_expression_node" kindref="compound">LambdaExpressionNode</ref>)parenthesizedExpressionNode.InnerExpression;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(lambdaExpressionNode.CodeBlockNodeIsExpression);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(1,<sp/>lambdaExpressionNode.VariableDeclarationNodeList.Count);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>parameter<sp/>=<sp/>lambdaExpressionNode.VariableDeclarationNodeList[0];</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(TypeFacts.Empty.ToTypeClause(),<sp/>parameter.TypeClauseNode);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/>parameter.IdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(<ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_enums_1a4cbcf68aea676ee33001aa4912ffbc7e" kindref="member">VariableKind</ref>.Local,<sp/>parameter.VariableKind);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1354" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a6f194347c9229bfbdf036cf963bdcb01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a6f194347c9229bfbdf036cf963bdcb01" kindref="member">LambdaFunction_Expression_ManyParameter_Async</ref>()</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;(async<sp/>(x,<sp/>index)<sp/>=&gt;<sp/>\&quot;Abc\&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>parenthesizedExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_parenthesized_expression_node" kindref="compound">ParenthesizedExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>lambdaExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_lambda_expression_node" kindref="compound">LambdaExpressionNode</ref>)parenthesizedExpressionNode.InnerExpression;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(lambdaExpressionNode.CodeBlockNodeIsExpression);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(2,<sp/>lambdaExpressionNode.VariableDeclarationNodeList.Count);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>parameter<sp/>=<sp/>lambdaExpressionNode.VariableDeclarationNodeList[0];</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(TypeFacts.Empty.ToTypeClause(),<sp/>parameter.TypeClauseNode);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/>parameter.IdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(<ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_enums_1a4cbcf68aea676ee33001aa4912ffbc7e" kindref="member">VariableKind</ref>.Local,<sp/>parameter.VariableKind);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Second<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>parameter<sp/>=<sp/>lambdaExpressionNode.VariableDeclarationNodeList[1];</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(TypeFacts.Empty.ToTypeClause(),<sp/>parameter.TypeClauseNode);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(</highlight><highlight class="stringliteral">&quot;index&quot;</highlight><highlight class="normal">,<sp/>parameter.IdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(<ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_enums_1a4cbcf68aea676ee33001aa4912ffbc7e" kindref="member">VariableKind</ref>.Local,<sp/>parameter.VariableKind);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1386" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ab452c6ddf932b4f5690ed87bf7ccb4c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ab452c6ddf932b4f5690ed87bf7ccb4c1" kindref="member">LambdaFunction_CodeBlock_NoParameter_Async</ref>()</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;async<sp/>()<sp/>=&gt;<sp/>{<sp/>WriteLine(\&quot;Abc\&quot;);<sp/>return<sp/>\&quot;Cba\&quot;;<sp/>};&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>lambdaExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_lambda_expression_node" kindref="compound">LambdaExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1399" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac0bab3b4b6a790432155ebac944e1469" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac0bab3b4b6a790432155ebac944e1469" kindref="member">LambdaFunction_CodeBlock_SingleParameter_Async</ref>()</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;async<sp/>x<sp/>=&gt;<sp/>{<sp/>return<sp/>\&quot;Abc\&quot;;<sp/>};&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>lambdaExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_lambda_expression_node" kindref="compound">LambdaExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1412" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ab2cc40dc3269f8ba37aecbb8a625e032" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ab2cc40dc3269f8ba37aecbb8a625e032" kindref="member">LambdaFunction_CodeBlock_ManyParameter</ref>()</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;(x,<sp/>index)<sp/>=&gt;<sp/>{<sp/>return<sp/>\&quot;Abc\&quot;;<sp/>};&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>lambdaExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_lambda_expression_node" kindref="compound">LambdaExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1425" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a4be78db9f7ee5b05ee0d0005ed1a1d5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a4be78db9f7ee5b05ee0d0005ed1a1d5c" kindref="member">MethodGroup</ref>()</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*var<sp/>session<sp/>=<sp/>new<sp/>ExpressionSession(</highlight></codeline>
<codeline lineno="1428"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenList:<sp/>new<sp/>List&lt;ISyntaxToken&gt;</highlight></codeline>
<codeline lineno="1429"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1430"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>public<sp/>string<sp/>GetPersonFirstNameMethod(Person<sp/>person)<sp/>{<sp/>return<sp/>person.FirstName;<sp/>}</highlight></codeline>
<codeline lineno="1431"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>list.Select(GetPersonFirstNameMethod);</highlight></codeline>
<codeline lineno="1432"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1433"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expressionStack:<sp/>new<sp/>Stack&lt;ISyntax&gt;());</highlight></codeline>
<codeline lineno="1434"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1435"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>expression<sp/>=<sp/>Parser_TEST.ParseExpression(session);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1443" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a0a9d7bc12882856b4eac39b785e7ca26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a0a9d7bc12882856b4eac39b785e7ca26" kindref="member">Action_ImplicitInvocation_NoParameter</ref>()</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*var<sp/>session<sp/>=<sp/>new<sp/>ExpressionSession(</highlight></codeline>
<codeline lineno="1446"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenList:<sp/>new<sp/>List&lt;ISyntaxToken&gt;</highlight></codeline>
<codeline lineno="1447"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1448"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Action<sp/>onSubmitAction<sp/>=<sp/>()<sp/>=&gt;<sp/>Console.WriteLine(&quot;Submitted&quot;);</highlight></codeline>
<codeline lineno="1449"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>onSubmitAction();</highlight></codeline>
<codeline lineno="1450"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1451"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expressionStack:<sp/>new<sp/>Stack&lt;ISyntax&gt;());</highlight></codeline>
<codeline lineno="1452"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1453"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>expression<sp/>=<sp/>Parser_TEST.ParseExpression(session);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1461" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ad41292b3a337038007d475d3c91300b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ad41292b3a337038007d475d3c91300b3" kindref="member">Action_ImplicitInvocation_SingleParameter</ref>()</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*var<sp/>session<sp/>=<sp/>new<sp/>ExpressionSession(</highlight></codeline>
<codeline lineno="1464"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenList:<sp/>new<sp/>List&lt;ISyntaxToken&gt;</highlight></codeline>
<codeline lineno="1465"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Action&lt;string&gt;<sp/>onSubmitAction<sp/>=<sp/>message<sp/>=&gt;<sp/>Console.WriteLine(message);</highlight></codeline>
<codeline lineno="1467"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>onSubmitAction(&quot;Hello<sp/>World!&quot;);</highlight></codeline>
<codeline lineno="1468"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1469"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expressionStack:<sp/>new<sp/>Stack&lt;ISyntax&gt;());</highlight></codeline>
<codeline lineno="1470"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1471"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>expression<sp/>=<sp/>Parser_TEST.ParseExpression(session);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1479" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a281b9a4b7abafb49fe365ca0b5c8ab25" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a281b9a4b7abafb49fe365ca0b5c8ab25" kindref="member">Action_ImplicitInvocation_ManyParameter</ref>()</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*var<sp/>session<sp/>=<sp/>new<sp/>ExpressionSession(</highlight></codeline>
<codeline lineno="1482"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenList:<sp/>new<sp/>List&lt;ISyntaxToken&gt;</highlight></codeline>
<codeline lineno="1483"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Action&lt;string,<sp/>Action&gt;<sp/>onSubmitAction<sp/>=<sp/>(message,<sp/>callback)<sp/>=&gt;<sp/>{<sp/>Console.WriteLine(message)<sp/>callback.Invoke();<sp/>};</highlight></codeline>
<codeline lineno="1485"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>onSubmitAction(&quot;Hello<sp/>World!&quot;,<sp/>()<sp/>=&gt;<sp/>Console.WriteLine(&quot;Callback<sp/>was<sp/>invoked.&quot;));</highlight></codeline>
<codeline lineno="1486"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1487"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expressionStack:<sp/>new<sp/>Stack&lt;ISyntax&gt;());</highlight></codeline>
<codeline lineno="1488"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1489"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>expression<sp/>=<sp/>Parser_TEST.ParseExpression(session);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1497" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1abbeaed4274632151a8886ab21be5587a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1abbeaed4274632151a8886ab21be5587a" kindref="member">Func_ImplicitInvocation_NoParameter</ref>()</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*var<sp/>session<sp/>=<sp/>new<sp/>ExpressionSession(</highlight></codeline>
<codeline lineno="1500"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenList:<sp/>new<sp/>List&lt;ISyntaxToken&gt;</highlight></codeline>
<codeline lineno="1501"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Func&lt;int&gt;<sp/>onSubmitAction<sp/>=<sp/>()<sp/>=&gt;<sp/>{<sp/>Console.WriteLine(&quot;Submitted&quot;);<sp/>return<sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="1503"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>var<sp/>statusCode<sp/>=<sp/>onSubmitAction();</highlight></codeline>
<codeline lineno="1504"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1505"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expressionStack:<sp/>new<sp/>Stack&lt;ISyntax&gt;());</highlight></codeline>
<codeline lineno="1506"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1507"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>expression<sp/>=<sp/>Parser_TEST.ParseExpression(session);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1515" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a7140da9023a154c61e990489b1233d76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a7140da9023a154c61e990489b1233d76" kindref="member">Func_ImplicitInvocation_SingleParameter</ref>()</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*var<sp/>session<sp/>=<sp/>new<sp/>ExpressionSession(</highlight></codeline>
<codeline lineno="1518"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenList:<sp/>new<sp/>List&lt;ISyntaxToken&gt;</highlight></codeline>
<codeline lineno="1519"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Func&lt;string,<sp/>Task&gt;<sp/>writeToConsoleAsync<sp/>=<sp/>async<sp/>message<sp/>=&gt;<sp/>{<sp/>await<sp/>Task.Delay(500);<sp/>Console.WriteLine(message);<sp/>};</highlight></codeline>
<codeline lineno="1521"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>await<sp/>writeToConsoleAsync(&quot;Hello<sp/>World!&quot;);</highlight></codeline>
<codeline lineno="1522"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1523"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expressionStack:<sp/>new<sp/>Stack&lt;ISyntax&gt;());</highlight></codeline>
<codeline lineno="1524"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1525"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>expression<sp/>=<sp/>Parser_TEST.ParseExpression(session);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1533" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ad51c9f68071de23ed97b7b18ccd69fea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ad51c9f68071de23ed97b7b18ccd69fea" kindref="member">Func_ImplicitInvocation_ManyParameter</ref>()</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*var<sp/>session<sp/>=<sp/>new<sp/>ExpressionSession(</highlight></codeline>
<codeline lineno="1536"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenList:<sp/>new<sp/>List&lt;ISyntaxToken&gt;</highlight></codeline>
<codeline lineno="1537"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Func&lt;string,<sp/>CancellationToken,<sp/>Task&gt;<sp/>writeToConsoleAsync<sp/>=<sp/>async<sp/>(message,<sp/>cancellationToken)<sp/>=&gt;<sp/>{<sp/>await<sp/>Task.Delay(500);<sp/>Console.WriteLine(message);<sp/>};</highlight></codeline>
<codeline lineno="1539"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>await<sp/>writeToConsoleAsync(&quot;Hello<sp/>World!&quot;,<sp/>CancellationToken.None);</highlight></codeline>
<codeline lineno="1540"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1541"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expressionStack:<sp/>new<sp/>Stack&lt;ISyntax&gt;());</highlight></codeline>
<codeline lineno="1542"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1543"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>expression<sp/>=<sp/>Parser_TEST.ParseExpression(session);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1551" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a662219d1c9b1fe578527aa2d23a2aa6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a662219d1c9b1fe578527aa2d23a2aa6b" kindref="member">FunctionInvocation_NamedParameters</ref>()</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*var<sp/>session<sp/>=<sp/>new<sp/>ExpressionSession(</highlight></codeline>
<codeline lineno="1554"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenList:<sp/>new<sp/>List&lt;ISyntaxToken&gt;</highlight></codeline>
<codeline lineno="1555"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>public<sp/>static<sp/>Person<sp/>PersonFactoryMethod(string<sp/>firstName,<sp/>string<sp/>lastName)<sp/>{<sp/>return<sp/>new<sp/>Person(firstName,<sp/>lastName);<sp/>}</highlight></codeline>
<codeline lineno="1557"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>PersonFactoryMethod(firstName:<sp/>&quot;John&quot;,<sp/>lastName:<sp/>&quot;Doe&quot;);</highlight></codeline>
<codeline lineno="1558"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1559"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expressionStack:<sp/>new<sp/>Stack&lt;ISyntax&gt;());</highlight></codeline>
<codeline lineno="1560"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1561"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>expression<sp/>=<sp/>Parser_TEST.ParseExpression(session);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1569" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a268b097a322dabb224c761f9053d4092" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a268b097a322dabb224c761f9053d4092" kindref="member">ConstructorInvocation_NamedParameters</ref>()</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*var<sp/>session<sp/>=<sp/>new<sp/>ExpressionSession(</highlight></codeline>
<codeline lineno="1572"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenList:<sp/>new<sp/>List&lt;ISyntaxToken&gt;</highlight></codeline>
<codeline lineno="1573"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1574"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>public<sp/>Person(string<sp/>firstName,<sp/>string<sp/>lastName)<sp/>{<sp/>FirstName<sp/>=<sp/>firstName;<sp/>LastName<sp/>=<sp/>lastName;<sp/>}</highlight></codeline>
<codeline lineno="1575"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>PersonFactoryMethod(firstName:<sp/>&quot;John&quot;,<sp/>lastName:<sp/>&quot;Doe&quot;);</highlight></codeline>
<codeline lineno="1576"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1577"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expressionStack:<sp/>new<sp/>Stack&lt;ISyntax&gt;());</highlight></codeline>
<codeline lineno="1578"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1579"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>expression<sp/>=<sp/>Parser_TEST.ParseExpression(session);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1587" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac0a8ad9f3f6ca604c800377ad1c8a13d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac0a8ad9f3f6ca604c800377ad1c8a13d" kindref="member">Record_With_Keyword</ref>()</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;person<sp/>=<sp/>person<sp/>with<sp/>{<sp/>FirstName<sp/>=<sp/>\&quot;Jane\&quot;,<sp/>LastName<sp/>=<sp/>\&quot;Doe\&quot;,<sp/>};&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1596" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac99aeea7a0a2310112220be02844dfbd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac99aeea7a0a2310112220be02844dfbd" kindref="member">GetterAndSetterThatAreNotAutoImplemented</ref>()</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*var<sp/>session<sp/>=<sp/>new<sp/>ExpressionSession(</highlight></codeline>
<codeline lineno="1599"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenList:<sp/>new<sp/>List&lt;ISyntaxToken&gt;</highlight></codeline>
<codeline lineno="1600"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1601"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*</highlight></codeline>
<codeline lineno="1602"><highlight class="comment"><sp/><sp/><sp/><sp/>public<sp/>string<sp/>ShortCircuitListStringified</highlight></codeline>
<codeline lineno="1603"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1604"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get</highlight></codeline>
<codeline lineno="1605"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1606"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_shortCircuitListStringifiedIsDirty)</highlight></codeline>
<codeline lineno="1607"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1608"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_shortCircuitListStringifiedIsDirty<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="1609"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_shortCircuitListStringified<sp/>=<sp/>string.Join(&apos;,&apos;,<sp/>session.ShortCircuitList.Select(x<sp/>=&gt;<sp/>x.DelimiterSyntaxKind));</highlight></codeline>
<codeline lineno="1610"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1611"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1612"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_shortCircuitListStringified;</highlight></codeline>
<codeline lineno="1613"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1614"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private<sp/>set<sp/>=&gt;<sp/>_shortCircuitListStringified<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1615"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/>=<sp/>string.Empty;</highlight></codeline>
<codeline lineno="1616"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1617"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1618"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expressionStack:<sp/>new<sp/>Stack&lt;ISyntax&gt;());</highlight></codeline>
<codeline lineno="1619"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1620"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>expression<sp/>=<sp/>Parser_TEST.ParseExpression(session);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1628" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a8d131521d0c3d812c1c8f2b1645727e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a8d131521d0c3d812c1c8f2b1645727e2" kindref="member">MemberAccess</ref>()</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*var<sp/>session<sp/>=<sp/>new<sp/>ExpressionSession(</highlight></codeline>
<codeline lineno="1631"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenList:<sp/>new<sp/>List&lt;ISyntaxToken&gt;</highlight></codeline>
<codeline lineno="1632"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*</highlight></codeline>
<codeline lineno="1634"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="comment">/*<sp/>x<sp/>=&gt;<sp/>x.FirstName;</highlight></codeline>
<codeline lineno="1635"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1636"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1637"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expressionStack:<sp/>new<sp/>Stack&lt;ISyntax&gt;());</highlight></codeline>
<codeline lineno="1638"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1639"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>expression<sp/>=<sp/>Parser_TEST.ParseExpression(session);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1648" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a515355c48a220fa72c8b400739b14710" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a515355c48a220fa72c8b400739b14710" kindref="member">WhileLoop_DoNotBreakScope</ref>()</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">@&quot;while<sp/>(().)<sp/>{<sp/>;<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>whileStatementNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_while_statement_node" kindref="compound">WhileStatementNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_binder" kindref="compound">IBinder</ref>)<ref refid="namespacetest" kindref="compound">test</ref>.Parser.Binder).TryGetBinderSession(<ref refid="namespacetest" kindref="compound">test</ref>.ResourceUri,<sp/>out<sp/>var<sp/>binderSession);</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(2,<sp/>binderSession.ScopeList.Count);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1662" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1adabff2d73e7e506f366e71de521660a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1adabff2d73e7e506f366e71de521660a3" kindref="member">IfStatement_StopExpressionsCreatingScope</ref>()</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight><highlight class="stringliteral">@&quot;</highlight></codeline>
<codeline lineno="1666"><highlight class="stringliteral">void<sp/>Aaa()</highlight></codeline>
<codeline lineno="1667"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="1668"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(false)</highlight></codeline>
<codeline lineno="1669"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;<sp/>//<sp/>Scope<sp/>is<sp/>being<sp/>made<sp/>here<sp/>correctly.</highlight></codeline>
<codeline lineno="1670"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1671"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Console.WriteLine();<sp/>//<sp/>But<sp/>it<sp/>erroneously<sp/>continues<sp/>defining<sp/>scope<sp/>at<sp/>each<sp/>expression<sp/>following<sp/>the<sp/>if<sp/>statement.</highlight></codeline>
<codeline lineno="1672"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1673"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>var<sp/>variable<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1674"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1675"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Console.WriteLine();<sp/>//<sp/>But<sp/>it<sp/>erroneously<sp/>continues<sp/>defining<sp/>scope<sp/>at<sp/>each<sp/>expression<sp/>following<sp/>the<sp/>if<sp/>statement.</highlight></codeline>
<codeline lineno="1676"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="1677"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_binder" kindref="compound">IBinder</ref>)<ref refid="namespacetest" kindref="compound">test</ref>.Parser.Binder).TryGetBinderSession(<ref refid="namespacetest" kindref="compound">test</ref>.ResourceUri,<sp/>out<sp/>var<sp/>binderSession);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(3,<sp/>binderSession.ScopeList.Count);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>child<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>topCodeBlock.GetChildList())</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.WriteLine(child.SyntaxKind);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.WriteLine(</highlight><highlight class="stringliteral">&quot;aaaFunctionDefinitionNode.CodeBlockNode:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>aaaFunctionDefinitionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_definition_node" kindref="compound">FunctionDefinitionNode</ref>)topCodeBlock.GetChildList()[2];</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>child<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>aaaFunctionDefinitionNode.CodeBlockNode.GetChildList())</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.WriteLine(child.SyntaxKind);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.WriteLine(((<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_ambiguous_identifier_node" kindref="compound">AmbiguousIdentifierNode</ref>)topCodeBlock.GetChildList()[1]).IdentifierToken.TextSpan.GetText());</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>functionDefinitionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_definition_node" kindref="compound">FunctionDefinitionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1702" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1acbf436e0e59a518520d7e9cd44de3813" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1acbf436e0e59a518520d7e9cd44de3813" kindref="member">CollectionIndex</ref>()</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>var<sp/>queue<sp/>=<sp/>_queueContainerMap[queueKey];<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1711" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a15331fa3eb8c6980bac99d8846c3d643" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a15331fa3eb8c6980bac99d8846c3d643" kindref="member">AwaitTask</ref>()</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>await<sp/>Task.Delay(TimeSpan.FromMilliseconds(100),<sp/>cancellationToken).ConfigureAwait(false);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1720" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a7b025cec6c47c6a0aadce81fbf127606" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a7b025cec6c47c6a0aadce81fbf127606" kindref="member">SwitchStatement</ref>()</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1723"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>The<sp/>switch<sp/>statement<sp/>cannot<sp/>be<sp/>part<sp/>of<sp/>an<sp/>expression.</highlight></codeline>
<codeline lineno="1724"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>For<sp/>this<sp/>reason,<sp/>it<sp/>starts<sp/>with<sp/>the<sp/>keyword<sp/>switch,</highlight></codeline>
<codeline lineno="1725"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>so<sp/>when<sp/>parsing<sp/>it<sp/>can<sp/>easily<sp/>be<sp/>seen<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="1726"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statement,<sp/>that<sp/>it<sp/>is<sp/>a<sp/>switch<sp/>statement.</highlight></codeline>
<codeline lineno="1727"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Switch<sp/>expression<sp/>can<sp/>be<sp/>embedded,</highlight></codeline>
<codeline lineno="1728"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>for<sp/>that<sp/>reason<sp/>it<sp/>starts<sp/>with<sp/>the<sp/>IdentifierToken,</highlight></codeline>
<codeline lineno="1729"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>order<sp/>to<sp/>enter<sp/>the<sp/>expression<sp/>parsing<sp/>code,</highlight></codeline>
<codeline lineno="1730"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>which<sp/>then<sp/>goes<sp/>on<sp/>to<sp/>see<sp/>the<sp/>&apos;switch&apos;<sp/>keyword.</highlight></codeline>
<codeline lineno="1731"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>It<sp/>isn&apos;t<sp/>to<sp/>say<sp/>that<sp/>the<sp/>language<sp/>had<sp/>to<sp/>be<sp/>written<sp/>this<sp/>way.</highlight></codeline>
<codeline lineno="1732"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>But<sp/>instead<sp/>that<sp/>it<sp/>seems<sp/>extremely<sp/>intentional.</highlight></codeline>
<codeline lineno="1733"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>The<sp/>switch<sp/>statement<sp/>has<sp/>a<sp/>scope<sp/>for<sp/>its<sp/>initial<sp/>body.</highlight></codeline>
<codeline lineno="1734"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>But,<sp/>the<sp/>individual<sp/>case(s)<sp/>do<sp/>not<sp/>create<sp/>their<sp/>own<sp/>scopes.</highlight></codeline>
<codeline lineno="1735"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>One<sp/>can<sp/>put<sp/>an<sp/>&quot;arbitrary<sp/>code<sp/>block&quot;<sp/>after<sp/>the<sp/>&apos;case&apos;<sp/>definition,</highlight></codeline>
<codeline lineno="1736"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>order<sp/>to<sp/>create<sp/>a<sp/>scope<sp/>for<sp/>that<sp/>&apos;case&apos;<sp/>specifically.</highlight></codeline>
<codeline lineno="1737"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>But<sp/>note:<sp/>this<sp/>just<sp/>always<sp/>the<sp/>case<sp/>in<sp/>C#<sp/>it<sp/>isn&apos;t<sp/>&apos;switch&apos;<sp/>specific.</highlight></codeline>
<codeline lineno="1738"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>In<sp/>C#<sp/>a<sp/>switch<sp/>statement<sp/>cannot<sp/>fall<sp/>through<sp/>its<sp/>case(s)<sp/>after</highlight></codeline>
<codeline lineno="1739"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handling<sp/>the<sp/>initial<sp/>case<sp/>that<sp/>jumped<sp/>to.</highlight></codeline>
<codeline lineno="1740"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Many<sp/>labels<sp/>can<sp/>be<sp/>defined<sp/>for<sp/>the<sp/>same<sp/>&quot;handling<sp/>code&quot;.</highlight></codeline>
<codeline lineno="1741"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>A<sp/>&apos;default&apos;<sp/>label<sp/>exists.</highlight></codeline>
<codeline lineno="1742"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>&apos;goto<sp/>default&apos;<sp/>also<sp/>exists,<sp/>but<sp/>is<sp/>this<sp/>not<sp/>just<sp/>normal<sp/>C#?</highlight></codeline>
<codeline lineno="1743"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>you<sp/>can<sp/>goto<sp/>any<sp/>label<sp/>you<sp/>have<sp/>in<sp/>scope<sp/>this<sp/>isn&apos;t<sp/>something<sp/>special.</highlight></codeline>
<codeline lineno="1744"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>But<sp/>maybe<sp/>the<sp/>&apos;default&apos;<sp/>name<sp/>for<sp/>the<sp/>label<sp/>is<sp/>uniquely<sp/>a<sp/>&apos;switch&apos;<sp/>statement<sp/>permitted<sp/>name.</highlight></codeline>
<codeline lineno="1745"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Are<sp/>you<sp/>able<sp/>to<sp/>goto<sp/>any<sp/>of<sp/>the<sp/>&quot;<sp/>case<sp/>&apos;a&apos;:<sp/>&quot;<sp/>label<sp/>definitions?</highlight></codeline>
<codeline lineno="1746"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>If<sp/>you<sp/>wanted<sp/>to<sp/>do<sp/>this,<sp/>but<sp/>could<sp/>not<sp/>&quot;goto<sp/>case<sp/>&apos;a&apos;:<sp/>&quot;</highlight></codeline>
<codeline lineno="1747"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>could<sp/>you<sp/>put<sp/>a<sp/>normal<sp/>C#<sp/>label<sp/>alongside<sp/>&quot;<sp/>case<sp/>&apos;a&apos;:<sp/>&quot;</highlight></codeline>
<codeline lineno="1748"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>goto<sp/>the<sp/>normal<sp/>C#<sp/>label?</highlight></codeline>
<codeline lineno="1749"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>I<sp/>presume<sp/>you<sp/>could<sp/>ONLY<sp/>if<sp/>you<sp/>put<sp/>the<sp/>normal<sp/>C#<sp/>label</highlight></codeline>
<codeline lineno="1750"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/>the<sp/>&apos;case&apos;<sp/>and<sp/>before<sp/>the<sp/>&quot;handling<sp/>code&quot;.</highlight></codeline>
<codeline lineno="1751"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>You<sp/>could<sp/>probably<sp/>put<sp/>a<sp/>label<sp/>anywhere<sp/>within<sp/>the<sp/>&quot;handling<sp/>code&quot;<sp/>too,</highlight></codeline>
<codeline lineno="1752"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>but<sp/>I&apos;m<sp/>speaking<sp/>of<sp/>this<sp/>example<sp/>specifically<sp/>where<sp/>you</highlight></codeline>
<codeline lineno="1753"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wanted<sp/>to<sp/>jump<sp/>in<sp/>a<sp/>equivalent<sp/>way<sp/>as<sp/>&quot;goto<sp/>case<sp/>&apos;a&apos;:<sp/>&quot;.</highlight></codeline>
<codeline lineno="1754"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>So<sp/>in<sp/>this<sp/>case<sp/>you&apos;d<sp/><sp/>want<sp/>it<sp/>after<sp/>the<sp/>label,<sp/>and<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the<sp/>&quot;handling<sp/>code&quot;.</highlight></codeline>
<codeline lineno="1755"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Is<sp/>it<sp/>possible<sp/>to<sp/>parse<sp/>the<sp/>switch<sp/>statement&apos;s<sp/>body<sp/>as<sp/>normal<sp/>C#<sp/>code,<sp/>if<sp/>I<sp/>implemented<sp/>C#<sp/>label<sp/>syntax?</highlight></codeline>
<codeline lineno="1756"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>The<sp/>issue<sp/>would<sp/>appear<sp/>to<sp/>be<sp/>with<sp/>the<sp/>&apos;case&apos;<sp/>keyword<sp/>that<sp/>is<sp/>at<sp/>the<sp/>start<sp/>of<sp/>&quot;label&quot;.</highlight></codeline>
<codeline lineno="1757"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>As<sp/>well,<sp/>the<sp/>&quot;label&quot;<sp/>doesn&apos;t<sp/>have<sp/>an<sp/>IdentifierToken,<sp/>it<sp/>instead<sp/>is<sp/>a<sp/>unique<sp/>compile<sp/>time<sp/>constant.</highlight></codeline>
<codeline lineno="1758"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>The<sp/>&apos;switch&apos;<sp/>statement<sp/>would<sp/>be<sp/>a<sp/>code<sp/>block<sp/>builder<sp/>that<sp/>skips<sp/>until<sp/>&apos;case&apos;,<sp/>then<sp/>skips<sp/>until<sp/>&apos;:&apos;.</highlight></codeline>
<codeline lineno="1759"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>At<sp/>this<sp/>point<sp/>return<sp/>to<sp/>the<sp/>main<sp/>parser<sp/>loop.</highlight></codeline>
<codeline lineno="1760"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Then<sp/>hit<sp/>the<sp/>&apos;case&apos;<sp/>keyword<sp/>which<sp/>would<sp/>actually<sp/>invoke<sp/>its<sp/>own<sp/>method<sp/>so<sp/>I<sp/>could<sp/>probably<sp/>do<sp/>this<sp/>easily.</highlight></codeline>
<codeline lineno="1761"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>public<sp/>static<sp/>void<sp/>HandleCaseTokenKeyword(KeywordToken<sp/>consumedKeywordToken,<sp/>CSharpParserModel<sp/>model)<sp/>{...}</highlight></codeline>
<codeline lineno="1762"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>ParseDefaultKeywords.cs:48<sp/>is<sp/>where<sp/>the<sp/>method<sp/>is<sp/>defined.</highlight></codeline>
<codeline lineno="1763"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>So,<sp/>the<sp/>switch<sp/>statement<sp/>needs<sp/>to<sp/>have<sp/>its<sp/>expression<sp/>parsed<sp/>(the<sp/>one<sp/>within<sp/>its<sp/>parentheses).</highlight></codeline>
<codeline lineno="1764"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Then<sp/>it<sp/>goes<sp/>to<sp/>main<sp/>loop<sp/>and<sp/>starts<sp/>parsing<sp/>the<sp/>code<sp/>block<sp/>node.</highlight></codeline>
<codeline lineno="1765"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>This<sp/>then<sp/>hits<sp/>the<sp/>&apos;case&apos;<sp/>keyword.</highlight></codeline>
<codeline lineno="1766"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Read<sp/>until<sp/>the<sp/>&apos;:&apos;<sp/>then<sp/>return<sp/>back<sp/>out<sp/>again.</highlight></codeline>
<codeline lineno="1767"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>But,<sp/>what<sp/>about<sp/>the<sp/>&apos;default&apos;<sp/>keyword?</highlight></codeline>
<codeline lineno="1768"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>If<sp/>the<sp/>statement<sp/>parsing<sp/>code<sp/>sees<sp/>the<sp/>&apos;default&apos;<sp/>keyword,</highlight></codeline>
<codeline lineno="1769"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>check<sp/>if<sp/>the<sp/>next<sp/>token<sp/>is<sp/>the<sp/>ColonToken.</highlight></codeline>
<codeline lineno="1770"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>If<sp/>so,<sp/>then<sp/>it<sp/>is<sp/>the<sp/>&apos;default&apos;<sp/>leg<sp/>of<sp/>the<sp/>switch<sp/>statement.</highlight></codeline>
<codeline lineno="1771"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>This<sp/>sounds<sp/>like<sp/>an<sp/>effective<sp/>&quot;first<sp/>approach&quot;<sp/>to<sp/>a<sp/>solution.</highlight></codeline>
<codeline lineno="1772"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>In<sp/>order<sp/>to<sp/>track<sp/>each<sp/>leg<sp/>of<sp/>the<sp/>switch<sp/>statement<sp/>I<sp/>can<sp/>create<sp/>a<sp/>new</highlight></codeline>
<codeline lineno="1773"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CodeBlockBuilder<sp/>but,<sp/>have<sp/>this<sp/>builder<sp/>act<sp/>in<sp/>a<sp/>special<sp/>way.</highlight></codeline>
<codeline lineno="1774"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>It<sp/>would<sp/>capture<sp/>the<sp/>statements<sp/>just<sp/>as<sp/>a<sp/>normal<sp/>CodeBlockBuilder,</highlight></codeline>
<codeline lineno="1775"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>but<sp/>when<sp/>the<sp/>code<sp/>block<sp/>is<sp/>finished,<sp/>it<sp/>moves<sp/>its<sp/>nodes<sp/>to<sp/>the<sp/>parentCodeBlockBuilder.</highlight></codeline>
<codeline lineno="1776"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>In<sp/>the<sp/>end,<sp/>the<sp/>&quot;special&quot;<sp/>code<sp/>block<sp/>builder<sp/>for<sp/>the<sp/>legs<sp/>would<sp/>just<sp/>track<sp/>the<sp/>start<sp/>and<sp/>end<sp/>indices.</highlight></codeline>
<codeline lineno="1777"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>But,<sp/>isn&apos;t<sp/>the<sp/>start<sp/>the<sp/>label,<sp/>and<sp/>the<sp/>end<sp/>the<sp/>next<sp/>label<sp/>or<sp/>CloseBraceToken?</highlight></codeline>
<codeline lineno="1778"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Currently<sp/>the<sp/>expression<sp/>parser<sp/>is<sp/>trying<sp/>to<sp/>parse<sp/>the<sp/>&apos;ColonToken&apos;<sp/>in<sp/>&quot;<sp/>case<sp/>&apos;a&apos;:<sp/>&quot;.</highlight></codeline>
<codeline lineno="1779"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>If<sp/>the<sp/>statement<sp/>parser<sp/>loop<sp/>could<sp/>&quot;skip&quot;<sp/>over<sp/>this,<sp/>the<sp/>parser<sp/>would<sp/>be<sp/>in<sp/>a<sp/>better<sp/>&quot;state&quot;<sp/>for<sp/>parsing<sp/>the</highlight></codeline>
<codeline lineno="1780"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remainder<sp/>of<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="1781"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight><highlight class="stringliteral">@&quot;</highlight></codeline>
<codeline lineno="1785"><highlight class="stringliteral">switch<sp/>(character)</highlight></codeline>
<codeline lineno="1786"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="1787"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>case<sp/>&apos;a&apos;:</highlight></codeline>
<codeline lineno="1788"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="1790"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1791"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>case<sp/>&apos;b&apos;:</highlight></codeline>
<codeline lineno="1792"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>case<sp/>&apos;c&apos;:</highlight></codeline>
<codeline lineno="1793"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="1794"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>case<sp/>&apos;d&apos;:</highlight></codeline>
<codeline lineno="1795"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(false)</highlight></codeline>
<codeline lineno="1796"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>default;</highlight></codeline>
<codeline lineno="1797"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="1798"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline lineno="1799"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="1800"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="1801"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1810" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac035b6e1f7c6ba3148865033288f3410" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac035b6e1f7c6ba3148865033288f3410" kindref="member">SwitchExpression</ref>()</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight><highlight class="stringliteral">@&quot;</highlight></codeline>
<codeline lineno="1814"><highlight class="stringliteral">return<sp/>character<sp/>switch</highlight></codeline>
<codeline lineno="1815"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="1816"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&apos;a&apos;<sp/>=&gt;<sp/>0,</highlight></codeline>
<codeline lineno="1817"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>_<sp/>=&gt;<sp/>1,</highlight></codeline>
<codeline lineno="1818"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="1819"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1828" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a444e0c19352ac2987da2c619606877e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a444e0c19352ac2987da2c619606877e4" kindref="member">Parenthesized_ExplicitCast</ref>()</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>((IBinder)parser.Binder)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1837" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac7dba8db531256b34155744c4e60fafc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac7dba8db531256b34155744c4e60fafc" kindref="member">FunctionParameter_OutKeyword</ref>()</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TryGetBinderSession(resourceUri,<sp/>out<sp/>IBinderSession<sp/>binderSession)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1846" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a6aee9bf181199e5b565e1252e5918044" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a6aee9bf181199e5b565e1252e5918044" kindref="member">LessThanBinaryOperator</ref>()</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;if<sp/>(_queue.Count<sp/>&lt;<sp/>0)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1857" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a974655911f8198a02c61bf33c6ef6714" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a974655911f8198a02c61bf33c6ef6714" kindref="member">GreaterThanBinaryOperator</ref>()</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;if<sp/>(_queue.Count<sp/>&gt;<sp/>0)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1868" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ae19c7e42ef391d48bbe315062e66acf6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ae19c7e42ef391d48bbe315062e66acf6" kindref="member">LessThanEqualToBinaryOperator</ref>()</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;if<sp/>(_queue.Count<sp/>&lt;=<sp/>0)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1879" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1adf8daa718a035cbf2a3415a1480fa501" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1adf8daa718a035cbf2a3415a1480fa501" kindref="member">GreaterThanEqualToBinaryOperator</ref>()</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">&quot;if<sp/>(_queue.Count<sp/>&gt;=<sp/>0)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1890" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a05b736e71d7b84c1465a1be698467b74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a05b736e71d7b84c1465a1be698467b74" kindref="member">FunctionParameterOptional</ref>()</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight><highlight class="stringliteral">@&quot;</highlight></codeline>
<codeline lineno="1894"><highlight class="stringliteral">public<sp/>void<sp/>SetProgress(double?<sp/>decimalPercentProgress,<sp/>string?<sp/>message<sp/>=<sp/>null,<sp/>string?<sp/>secondaryMessage<sp/>=<sp/>null)</highlight></codeline>
<codeline lineno="1895"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="1896"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="1897"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteChildrenIndented(topCodeBlock);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>functionDefinitionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_definition_node" kindref="compound">FunctionDefinitionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>functionArgumentEntryNodeList<sp/>=<sp/>functionDefinitionNode.FunctionArgumentsListingNode.FunctionArgumentEntryNodeList;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexParameter;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexParameter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>functionArgumentEntryNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_argument_entry_node" kindref="compound">FunctionArgumentEntryNode</ref>)functionArgumentEntryNodeList[indexParameter];</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.False(functionArgumentEntryNode.IsOptional);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexParameter<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>functionArgumentEntryNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_argument_entry_node" kindref="compound">FunctionArgumentEntryNode</ref>)functionArgumentEntryNodeList[indexParameter];</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(functionArgumentEntryNode.IsOptional);</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexParameter<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>functionArgumentEntryNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_argument_entry_node" kindref="compound">FunctionArgumentEntryNode</ref>)functionArgumentEntryNodeList[indexParameter];</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(functionArgumentEntryNode.IsOptional);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//VariableDeclarationNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//OptionalCompileTimeConstantToken</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//HasParamsKeyword</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//HasOutKeyword</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//HasInKeyword</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//HasRefKeyword</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1940" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a5e1d7aeca0a7d262b18a32e89c60f270" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a5e1d7aeca0a7d262b18a32e89c60f270" kindref="member">ConstructorInvokesConstructor</ref>()</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight><highlight class="stringliteral">@&quot;</highlight></codeline>
<codeline lineno="1944"><highlight class="stringliteral">public<sp/>class<sp/>ProgressBarModel</highlight></codeline>
<codeline lineno="1945"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="1946"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>public<sp/>ProgressBarModel(CancellationToken?<sp/>cancellationToken)</highlight></codeline>
<codeline lineno="1947"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>base(cancellationToken)</highlight></codeline>
<codeline lineno="1948"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1949"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="1951"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1960" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa2631daf7f211ec1edf5025ab35422c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa2631daf7f211ec1edf5025ab35422c3" kindref="member">ValueTuple</ref>()</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">@&quot;var<sp/>x<sp/>=<sp/>(decimalPercentProgress,<sp/>null,<sp/>cancellationToken);&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteChildrenIndented(topCodeBlock);</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>variableDeclarationNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_declaration_node" kindref="compound">VariableDeclarationNode</ref>)topCodeBlock.GetChildList()[0];</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>variableAssignmentExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ad69a0c440effe84972fb712c19f2cac6" kindref="member">VariableAssignmentExpressionNode</ref>)topCodeBlock.GetChildList()[1];</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>commaSeparatedExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_comma_separated_expression_node" kindref="compound">CommaSeparatedExpressionNode</ref>)variableAssignmentExpressionNode.ExpressionNode;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteChildrenIndented(commaSeparatedExpressionNode);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>badExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_bad_expression_node" kindref="compound">BadExpressionNode</ref>)commaSeparatedExpressionNode.GetChildList()[0];</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteChildrenIndented(badExpressionNode);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*var<sp/>variableReferenceNode<sp/>=<sp/>(VariableReferenceNode)commaSeparatedExpressionNode.InnerExpressionList[0];</highlight></codeline>
<codeline lineno="1979"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>nullKeywordToken<sp/>=<sp/>(KeywordToken)commaSeparatedExpressionNode.InnerExpressionList[1];</highlight></codeline>
<codeline lineno="1980"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>variableReferenceNode<sp/>=<sp/>(VariableReferenceNode)commaSeparatedExpressionNode.InnerExpressionList[2];*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="1999" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a077e20e75632443e1e025e7d1ea1334d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a077e20e75632443e1e025e7d1ea1334d" kindref="member">FunctionInvocationExpressionStatement</ref>()</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight><highlight class="stringliteral">@&quot;</highlight></codeline>
<codeline lineno="2003"><highlight class="stringliteral">int<sp/>decimalPercentProgress;</highlight></codeline>
<codeline lineno="2004"><highlight class="stringliteral">Func(decimalPercentProgress);</highlight></codeline>
<codeline lineno="2005"><highlight class="stringliteral">&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteChildrenIndentedRecursive(topCodeBlock,<sp/>nameof(topCodeBlock));</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>functionInvocationNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_invocation_node" kindref="compound">FunctionInvocationNode</ref>)topCodeBlock.GetChildList()[0];</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WriteChildrenIndented(functionInvocationNode,<sp/>nameof(functionInvocationNode));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>identifierToken<sp/>=<sp/>(<ref refid="struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_identifier_token" kindref="compound">IdentifierToken</ref>)functionInvocationNode.GetChildList()[0];</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>functionParametersListingNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_parameters_listing_node" kindref="compound">FunctionParametersListingNode</ref>)functionInvocationNode.GetChildList()[1];</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assertions<sp/>relating<sp/>to<sp/>functionParametersListingNode&apos;s<sp/>properties<sp/>are<sp/>in<sp/>this<sp/>code<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(functionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(1,<sp/>functionParametersListingNode.FunctionParameterEntryNodeList.Count);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(functionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>typeClauseNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node" kindref="compound">TypeClauseNode</ref>)functionInvocationNode.GetChildList()[2];</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException();</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="2030" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a9b3d7ae54cb17209f0140fd6f99508da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a9b3d7ae54cb17209f0140fd6f99508da" kindref="member">TypeClauseNode_Identifier</ref>()</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">@&quot;Person&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteChildrenIndentedRecursive(topCodeBlock,<sp/>nameof(topCodeBlock));</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.WriteLine($</highlight><highlight class="stringliteral">&quot;topCodeBlock:<sp/>{topCodeBlock.GetChildList().Length}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>typeClauseNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node" kindref="compound">TypeClauseNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(<ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b" kindref="member">SyntaxKind</ref>.TypeClauseNode,<sp/>typeClauseNode.SyntaxKind);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="2043" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a770a57e063c0ccfd8dd1c357127e7787" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a770a57e063c0ccfd8dd1c357127e7787" kindref="member">TypeClauseNode_Keyword</ref>()</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">@&quot;int&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteChildrenIndentedRecursive(topCodeBlock,<sp/>nameof(topCodeBlock));</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>typeClauseNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node" kindref="compound">TypeClauseNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(<ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b" kindref="member">SyntaxKind</ref>.TypeClauseNode,<sp/>typeClauseNode.SyntaxKind);</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="2055" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ae57874b03ab136bfedf13942bd9ef3f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ae57874b03ab136bfedf13942bd9ef3f0" kindref="member">TypeClauseNode_Var</ref>()</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">@&quot;var&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteChildrenIndentedRecursive(topCodeBlock,<sp/>nameof(topCodeBlock));</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>typeClauseNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node" kindref="compound">TypeClauseNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(<ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b" kindref="member">SyntaxKind</ref>.TypeClauseNode,<sp/>typeClauseNode.SyntaxKind);</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="2067" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a4b0363e8f3610767404f2f27b77a319c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a4b0363e8f3610767404f2f27b77a319c" kindref="member">TypeClauseNode_Generic</ref>()</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">@&quot;List&lt;int&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteChildrenIndentedRecursive(topCodeBlock,<sp/>nameof(topCodeBlock));</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>typeClauseNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node" kindref="compound">TypeClauseNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(<ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b" kindref="member">SyntaxKind</ref>.TypeClauseNode,<sp/>typeClauseNode.SyntaxKind);</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="2079" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a4eaa17fd5d866c7249fb516041d5671d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a4eaa17fd5d866c7249fb516041d5671d" kindref="member">TypeClauseNode_Nullable_Keyword</ref>()</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">@&quot;int?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteChildrenIndentedRecursive(topCodeBlock,<sp/>nameof(topCodeBlock));</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>typeClauseNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node" kindref="compound">TypeClauseNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(<ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b" kindref="member">SyntaxKind</ref>.TypeClauseNode,<sp/>typeClauseNode.SyntaxKind);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="2091" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a83ba898ca20ea3b158908376d2d541b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a83ba898ca20ea3b158908376d2d541b7" kindref="member">TypeClauseNode_Nullable_Identifier</ref>()</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">@&quot;Person?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteChildrenIndentedRecursive(topCodeBlock,<sp/>nameof(topCodeBlock));</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>typeClauseNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node" kindref="compound">TypeClauseNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(<ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b" kindref="member">SyntaxKind</ref>.TypeClauseNode,<sp/>typeClauseNode.SyntaxKind);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="2103" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a1c74fa54631496aedf56fe4dfd936891" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a1c74fa54631496aedf56fe4dfd936891" kindref="member">TypeClauseNode_GenericNullable</ref>()</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">@&quot;List&lt;int&gt;?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteChildrenIndentedRecursive(topCodeBlock,<sp/>nameof(topCodeBlock));</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>typeClauseNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node" kindref="compound">TypeClauseNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(<ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b" kindref="member">SyntaxKind</ref>.TypeClauseNode,<sp/>typeClauseNode.SyntaxKind);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/>[Fact]</highlight></codeline>
<codeline lineno="2115" refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ad69a0c440effe84972fb712c19f2cac6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ad69a0c440effe84972fb712c19f2cac6" kindref="member">VariableAssignmentExpressionNode</ref>()</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><ref refid="namespacetest" kindref="compound">test</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test" kindref="compound">Test</ref>(</highlight><highlight class="stringliteral">@&quot;someVariable<sp/>=<sp/>2;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>topCodeBlock<sp/>=<sp/><ref refid="namespacetest" kindref="compound">test</ref>.CompilationUnit.RootCodeBlockNode;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteChildrenIndentedRecursive(topCodeBlock,<sp/>nameof(topCodeBlock));</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>variableAssignmentExpressionNode<sp/>=<sp/>(<ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ad69a0c440effe84972fb712c19f2cac6" kindref="member">VariableAssignmentExpressionNode</ref>)topCodeBlock.GetChildList().Single();</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Equal(<ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b" kindref="member">SyntaxKind</ref>.VariableAssignmentExpressionNode,<sp/>variableAssignmentExpressionNode.SyntaxKind);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NotImplementedException(</highlight><highlight class="stringliteral">&quot;See<sp/>ExpressionAsStatementTests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WriteChildrenIndented(<ref refid="interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node" kindref="compound">ISyntaxNode</ref><sp/>node,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;node&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.WriteLine($</highlight><highlight class="stringliteral">&quot;foreach<sp/>(var<sp/>child<sp/>in<sp/>{name}.GetChildList())&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>child<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>node.<ref refid="interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node_1a73d81f1c4e42db7e80bfdd4db97c10fe" kindref="member">GetChildList</ref>())</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.WriteLine(</highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>+<sp/>child.SyntaxKind);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.WriteLine();</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WriteChildrenIndentedRecursive(<ref refid="interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node" kindref="compound">ISyntaxNode</ref><sp/>node,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;node&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indentation<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>indentationStringBuilder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>StringBuilder();</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>indentation;<sp/>i++)</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indentationStringBuilder.Append(</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.WriteLine($</highlight><highlight class="stringliteral">&quot;{indentationStringBuilder.ToString()}{node.SyntaxKind}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>child<sp/>tokens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indentationStringBuilder.Append(</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>childIndentation<sp/>=<sp/>indentationStringBuilder.ToString();</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>child<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>node.<ref refid="interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node_1a73d81f1c4e42db7e80bfdd4db97c10fe" kindref="member">GetChildList</ref>())</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child<sp/>is<sp/><ref refid="interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node" kindref="compound">ISyntaxNode</ref><sp/>syntaxNode)</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteChildrenIndentedRecursive(syntaxNode,<sp/></highlight><highlight class="stringliteral">&quot;node&quot;</highlight><highlight class="normal">,<sp/>indentation<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child<sp/>is<sp/><ref refid="interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_token" kindref="compound">ISyntaxToken</ref><sp/>syntaxToken)</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.WriteLine($</highlight><highlight class="stringliteral">&quot;{childIndentation}{child.SyntaxKind}__{syntaxToken.TextSpan.GetText()}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indentation<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Console.WriteLine();</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2163"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Source/Tests/CompilerServices/CSharp/SmokeTests/Parsers/ExpressionTests.cs"/>
  </compounddef>
</doxygen>
