<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.15.0" xml:lang="en-US">
  <compounddef id="_common_2usage_8md" kind="file" language="Markdown">
    <compoundname>usage.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Luthetus.Common<sp/>(v1.4.0)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Usage</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Source<sp/>Code</highlight></codeline>
<codeline><highlight class="normal">The<sp/>.NET<sp/>Solution:<sp/>[Luthetus.Common.Usage.sln](../../Source/Tutorials/Common/Luthetus.Common.Usage.sln),</highlight></codeline>
<codeline><highlight class="normal">was<sp/>made<sp/>by<sp/>following<sp/>steps<sp/>described<sp/>here.<sp/>So,<sp/>the<sp/>completed<sp/>result<sp/>can<sp/>be<sp/>found<sp/>there.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Goal</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Add<sp/>the<sp/>`Light<sp/>and<sp/>Dark<sp/>theme`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Steps</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Create<sp/>a<sp/>codebehind<sp/>for<sp/>the<sp/>file:<sp/>`Shared/MainLayout.razor`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>*NOTE:*<sp/>In<sp/>many<sp/>C#<sp/>Project<sp/>templates,<sp/>`Shared/MainLayout.razor`<sp/>inherits<sp/>from<sp/>`LayoutComponentBase`<sp/>instead<sp/>of<sp/>`ComponentBase`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```csharp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Shared/MainLayout.razor.cs</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>Microsoft.AspNetCore.Components;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>Luthetus.Common.Usage.RazorLib.Shared;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">public<sp/>partial<sp/>class<sp/>MainLayout<sp/>:<sp/>LayoutComponentBase</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Inject<sp/>the<sp/>`IAppOptionsService`<sp/>interface.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```csharp</highlight></codeline>
<codeline><highlight class="normal">[Inject]</highlight></codeline>
<codeline><highlight class="normal">private<sp/>IAppOptionsService<sp/>AppOptionsService<sp/>{<sp/>get;<sp/>set;<sp/>}<sp/>=<sp/>null!;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>We<sp/>need<sp/>to<sp/>subscribe<sp/>to<sp/>the<sp/>state<sp/>changes<sp/>of<sp/>the<sp/>IAppOptionsService.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>When<sp/>subscribing<sp/>to<sp/>an<sp/>event.<sp/>It<sp/>is<sp/>possible<sp/>to<sp/>create<sp/>a<sp/>memory<sp/>leak,<sp/>if<sp/>one<sp/>does<sp/>not<sp/>unsubscribe<sp/>from<sp/>the<sp/>event<sp/>at<sp/>a<sp/>later<sp/>point.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>For<sp/>this<sp/>reason,<sp/>I&apos;ll<sp/>perform<sp/>the<sp/>steps<sp/>in<sp/>an<sp/>order<sp/>that<sp/>ensures<sp/>my<sp/>code<sp/>will<sp/>not<sp/>compile<sp/>if<sp/>I<sp/>forget<sp/>to<sp/>unsubscribe.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Have<sp/>`MainLayout`<sp/>implement<sp/>the<sp/>interface:<sp/>`IDisposable`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Then<sp/>using<sp/>a<sp/>refactor,<sp/>one<sp/>can<sp/>autocomplete<sp/>the<sp/>method<sp/>definition<sp/>for<sp/>`void<sp/>Dispose()`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>At<sp/>this<sp/>step,<sp/>here<sp/>is<sp/>the<sp/>entirety<sp/>of<sp/>my<sp/>`Shared/MainLayout.razor.cs`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```csharp</highlight></codeline>
<codeline><highlight class="normal">using<sp/>Luthetus.Common.RazorLib.Options.Models;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>Microsoft.AspNetCore.Components;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>Luthetus.Common.Usage.RazorLib.Shared;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">public<sp/>partial<sp/>class<sp/>MainLayout<sp/>:<sp/>LayoutComponentBase,<sp/>IDisposable</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[Inject]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>private<sp/>IAppOptionsService<sp/>AppOptionsService<sp/>{<sp/>get;<sp/>set;<sp/>}<sp/>=<sp/>null!;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>void<sp/>Dispose()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>NotImplementedException();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Replace<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>`Dispose()`<sp/>method<sp/>with<sp/>`replaceAppOptionsService.AppOptionsStateWrap.StateChanged<sp/>-=<sp/>;`.<sp/>It<sp/>looks<sp/>as<sp/>follows<sp/>for<sp/>me:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```csharp</highlight></codeline>
<codeline><highlight class="normal">public<sp/>void<sp/>Dispose()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AppOptionsService.AppOptionsStateWrap.StateChanged<sp/>-=<sp/>;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Override<sp/>the<sp/>Blazor<sp/>lifecycle<sp/>method<sp/>named<sp/>`OnInitialized()`.<sp/>See<sp/>this<sp/>code<sp/>snippet:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```csharp</highlight></codeline>
<codeline><highlight class="normal">protected<sp/>override<sp/>void<sp/>OnInitialized()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>base.OnInitialized();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>In<sp/>`OnInitialized()`<sp/>we<sp/>can<sp/>subscribe<sp/>to<sp/>the<sp/>`AppOptionsService`<sp/>state<sp/>changes.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Add<sp/>into<sp/>the<sp/>method<sp/>override<sp/>for<sp/>`OnInitialized()`,<sp/>above<sp/>the<sp/>`base.OnInitialized();`,<sp/>this<sp/>line<sp/>of<sp/>code:<sp/>`AppOptionsService.AppOptionsStateWrap.StateChanged<sp/>+=<sp/>AppOptionsStateWrap_StateChanged;`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```csharp</highlight></codeline>
<codeline><highlight class="normal">protected<sp/>override<sp/>void<sp/>OnInitialized()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AppOptionsService.AppOptionsStateWrap.StateChanged<sp/>+=<sp/>AppOptionsStateWrap_StateChanged;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>base.OnInitialized();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>*NOTE:*<sp/>When<sp/>I<sp/>was<sp/>typing<sp/>out<sp/>the<sp/>previously<sp/>shown<sp/>line<sp/>of<sp/>code,<sp/>when<sp/>I<sp/>typed<sp/>the<sp/>`+=`<sp/>part<sp/>and<sp/>hit<sp/>`space`,<sp/>I<sp/>was<sp/>prompted<sp/>by<sp/>Visual<sp/>Studio<sp/>to<sp/>hit<sp/>`tab`<sp/>to<sp/>autocomplete<sp/>out<sp/>an<sp/>EventHandler.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```csharp</highlight></codeline>
<codeline><highlight class="normal">private<sp/>void<sp/>AppOptionsStateWrap_StateChanged(object?<sp/>sender,<sp/>EventArgs<sp/>e)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>NotImplementedException();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Now<sp/>that<sp/>we<sp/>have<sp/>the<sp/>subscription<sp/>occurring<sp/>in<sp/>the<sp/>`OnInitialized()`,<sp/>we<sp/>can<sp/>go<sp/>back<sp/>to<sp/>the<sp/>`Dispose()`<sp/>implementation.<sp/>We<sp/>had<sp/>left<sp/>out<sp/>the<sp/>right<sp/>hand<sp/>side<sp/>of<sp/>the<sp/>unsubscribe<sp/>statement.<sp/>Replace<sp/>that<sp/>line<sp/>with<sp/>this:<sp/>`AppOptionsService.AppOptionsStateWrap.StateChanged<sp/>-=<sp/>AppOptionsStateWrap_StateChanged;`.<sp/>Now<sp/>the<sp/>code<sp/>will<sp/>compile<sp/>again.<sp/>My<sp/>code<sp/>snippet<sp/>for<sp/>`MainLayout.razor.cs`<sp/>is<sp/>shown<sp/>here:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```csharp</highlight></codeline>
<codeline><highlight class="normal">using<sp/>Luthetus.Common.RazorLib.Options.Models;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>Microsoft.AspNetCore.Components;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>Luthetus.Common.Usage.RazorLib.Shared;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">public<sp/>partial<sp/>class<sp/>MainLayout<sp/>:<sp/>LayoutComponentBase,<sp/>IDisposable</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[Inject]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>private<sp/>IAppOptionsService<sp/>AppOptionsService<sp/>{<sp/>get;<sp/>set;<sp/>}<sp/>=<sp/>null!;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>protected<sp/>override<sp/>void<sp/>OnInitialized()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppOptionsService.AppOptionsStateWrap.StateChanged<sp/>+=<sp/>AppOptionsStateWrap_StateChanged;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base.OnInitialized();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>private<sp/>void<sp/>AppOptionsStateWrap_StateChanged(object?<sp/>sender,<sp/>EventArgs<sp/>e)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>NotImplementedException();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>void<sp/>Dispose()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppOptionsService.AppOptionsStateWrap.StateChanged<sp/>-=<sp/>AppOptionsStateWrap_StateChanged;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>We<sp/>need<sp/>to<sp/>re-render<sp/>the<sp/>component<sp/>anytime<sp/>that<sp/>the<sp/>AppOptionsState<sp/>has<sp/>its<sp/>state<sp/>change.<sp/>So,<sp/>the<sp/>`AppOptionsStateWrap_StateChanged()`<sp/>method<sp/>needs<sp/>to<sp/>be<sp/>changed.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Make<sp/>the<sp/>`AppOptionsStateWrap_StateChanged()`<sp/>method<sp/>`async`.<sp/>But<sp/>keep<sp/>`void`,<sp/>since<sp/>it<sp/>is<sp/>being<sp/>used<sp/>as<sp/>an<sp/>EventHandler.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Within<sp/>the<sp/>body<sp/>for<sp/>`AppOptionsStateWrap_StateChanged()`,<sp/>put<sp/>this<sp/>line<sp/>of<sp/>code:<sp/>`await<sp/>InvokeAsync(StateHasChanged);`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>total,<sp/>my<sp/>`AppOptionsStateWrap_StateChanged()`<sp/>method<sp/>looks<sp/>as<sp/>follows:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```csharp</highlight></codeline>
<codeline><highlight class="normal">private<sp/>async<sp/>void<sp/>AppOptionsStateWrap_StateChanged(object?<sp/>sender,<sp/>EventArgs<sp/>e)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>await<sp/>InvokeAsync(StateHasChanged);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>I<sp/>want<sp/>a<sp/>&amp;lt;`select`&amp;gt;<sp/>HTML<sp/>element<sp/>where<sp/>the<sp/>options<sp/>are<sp/>the<sp/>various<sp/>themes<sp/>that<sp/>one<sp/>can<sp/>choose.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>`Shared/MainLayout.razor`<sp/>has<sp/>a<sp/>&amp;lt;`div`&amp;gt;<sp/>HTML<sp/>element<sp/>with<sp/>the<sp/>css<sp/>class:<sp/>`top-row`.<sp/>Inside<sp/>this<sp/>HTML<sp/>element<sp/>I<sp/>will<sp/>be<sp/>putting<sp/>the<sp/>&amp;lt;`select`&amp;gt;<sp/>HTML<sp/>element.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>This<sp/>&amp;lt;`select`&amp;gt;<sp/>HTML<sp/>element<sp/>already<sp/>exists<sp/>within<sp/>the<sp/>Luthetus.Common<sp/>NuGet<sp/>Package.<sp/>Inside<sp/>the<sp/>previously<sp/>described<sp/>&amp;lt;`div`&amp;gt;<sp/>add<sp/>the<sp/>markup:<sp/>`&lt;Luthetus.Common.RazorLib.Options.Displays.InputAppTheme<sp/>/&gt;`<sp/>as<sp/>shown<sp/>in<sp/>the<sp/>following<sp/>snippet:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```html</highlight></codeline>
<codeline><highlight class="normal">&lt;!--<sp/>MainLayout.razor<sp/>--&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">@inherits<sp/>LayoutComponentBase</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;PageTitle&gt;Luthetus.Common.Usage.ServerSide&lt;/PageTitle&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;Luthetus.Common.RazorLib.Installations.Displays.LuthetusCommonInitializer/&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;div<sp/>class=&quot;page&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;div<sp/>class=&quot;sidebar&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;NavMenu<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/div&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;main&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;div<sp/>class=&quot;top-row<sp/>px-4&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;!--<sp/>Here<sp/>--&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;Luthetus.Common.RazorLib.Options.Displays.InputAppTheme<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;https://docs.microsoft.com/aspnet/&quot;<sp/>target=&quot;_blank&quot;&gt;About&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/div&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;article<sp/>class=&quot;content<sp/>px-4&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@Body</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/article&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/main&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/div&gt;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Here<sp/>is<sp/>a<sp/>quick<sp/>GIF<sp/>as<sp/>well<sp/>that<sp/>shows<sp/>how<sp/>the<sp/>website<sp/>looks<sp/>as<sp/>of<sp/>this<sp/>step:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">![tutorial_Usage-InputAppTheme](../Images/Gifs/tutorial_Usage-InputAppTheme.gif)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>When<sp/>I<sp/>change<sp/>my<sp/>selection<sp/>in<sp/>the<sp/>`&lt;Luthetus.Common.RazorLib.Options.Displays.InputAppTheme<sp/>/&gt;`,<sp/>I<sp/>want<sp/>the<sp/>corresponding<sp/>CSS<sp/>class<sp/>to<sp/>be<sp/>applied<sp/>to<sp/>the<sp/>top-most<sp/>&amp;lt;div&amp;gt;<sp/>in<sp/>`MainLayout.razor`.<sp/>This<sp/>would<sp/>then<sp/>allow<sp/>me<sp/>to<sp/>cascade<sp/>a<sp/>color<sp/>theme<sp/>to<sp/>child<sp/>elements.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>In<sp/>`MainLayout.razor`,<sp/>we<sp/>need<sp/>to<sp/>locate<sp/>the<sp/>top-most<sp/>&amp;lt;div&amp;gt;.<sp/>Following<sp/>that,<sp/>we<sp/>need<sp/>to<sp/>interpolate<sp/>the<sp/>css<sp/>class<sp/>which<sp/>corresponds<sp/>to<sp/>the<sp/>selected<sp/>theme.<sp/>I<sp/>changed<sp/>my<sp/>top-most<sp/>element&apos;s<sp/>`class`<sp/>property<sp/>to<sp/>`class=&quot;page<sp/>@AppOptionsService.ThemeCssClassString&quot;`.<sp/>The<sp/>following<sp/>is<sp/>the<sp/>entirety<sp/>of<sp/>my<sp/>`MainLayout.razor`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```html</highlight></codeline>
<codeline><highlight class="normal">&lt;!--<sp/>MainLayout.razor<sp/>--&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">@inherits<sp/>LayoutComponentBase</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;PageTitle&gt;Luthetus.Common.Usage.ServerSide&lt;/PageTitle&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;Luthetus.Common.RazorLib.Installations.Displays.LuthetusCommonInitializer/&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;div<sp/>class=&quot;page<sp/>@AppOptionsService.ThemeCssClassString&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;div<sp/>class=&quot;sidebar&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;NavMenu<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/div&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;main&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;div<sp/>class=&quot;top-row<sp/>px-4&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;Luthetus.Common.RazorLib.Options.Displays.InputAppTheme<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;https://docs.microsoft.com/aspnet/&quot;<sp/>target=&quot;_blank&quot;&gt;About&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/div&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;article<sp/>class=&quot;content<sp/>px-4&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@Body</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/article&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/main&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/div&gt;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>following<sp/>GIF<sp/>has<sp/>open<sp/>the<sp/>browser&apos;s<sp/>developer<sp/>tools,<sp/>while<sp/>changing<sp/>the<sp/>selected<sp/>theme.<sp/>This<sp/>shows<sp/>that<sp/>we<sp/>are<sp/>updating<sp/>the<sp/>`class`<sp/>property<sp/>correctly.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">![tutorial_Usage-InputAppTheme-DevTools.gif](../Images/Gifs/tutorial_Usage-InputAppTheme-DevTools.gif)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Now<sp/>we<sp/>need<sp/>to<sp/>actually<sp/>use<sp/>the<sp/>`CSS<sp/>variables`<sp/>which<sp/>are<sp/>defined<sp/>in<sp/>`luthetusCommon.css`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>the<sp/>upcoming<sp/>GIF<sp/>I<sp/>am<sp/>going<sp/>to<sp/>show<sp/>two<sp/>ways<sp/>that<sp/>one<sp/>can<sp/>see<sp/>all<sp/>the<sp/>`CSS<sp/>variables`<sp/>which<sp/>are<sp/>available<sp/>from<sp/>`luthetusCommon.css`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>*NOTE:*<sp/>This<sp/>GIF<sp/>is<sp/>2<sp/>minutes<sp/>and<sp/>41<sp/>seconds<sp/>long.<sp/>#TODO:<sp/>shorten<sp/>the<sp/>length<sp/>of<sp/>this<sp/>GIF.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">![tutorial_Usage-InputAppTheme-CssVariables.gif](../Images/Gifs/tutorial_Usage-InputAppTheme-CssVariables.gif)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Inside<sp/>`MainLayout.razor.css`<sp/>add<sp/>the<sp/>following<sp/>code<sp/>snippet:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```css</highlight></codeline>
<codeline><highlight class="normal">div.top-row<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>background-color:<sp/>var(--luth_tertiary-background-color);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>color:<sp/>var(--luth_tertiary-foreground-color);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">article.content<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>background-color:<sp/>var(--luth_primary-background-color);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>color:<sp/>var(--luth_primary-foreground-color);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Now<sp/>when<sp/>we<sp/>change<sp/>the<sp/>theme,<sp/>parts<sp/>of<sp/>the<sp/>website<sp/>that<sp/>use<sp/>the<sp/>CSS<sp/>variables<sp/>will<sp/>change.<sp/>See<sp/>the<sp/>following<sp/>GIF:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">![tutorial_Usage-InputAppTheme-VisualChanges.gif](../Images/Gifs/tutorial_Usage-InputAppTheme-VisualChanges.gif)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Next<sp/>tutorial:<sp/>#TODO:<sp/>Continue</highlight></codeline>
    </programlisting>
    <location file="Docs/Common/usage.md"/>
  </compounddef>
</doxygen>
