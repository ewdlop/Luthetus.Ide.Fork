<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.15.0" xml:lang="en-US">
  <compounddef id="_source_2_lib_2_text_editor_2_text_editors_2_models_2_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">(2024-08-12)</highlight></codeline>
<codeline><highlight class="normal">============</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Text<sp/>editor<sp/>virtualization:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">public<sp/>record<sp/>TextEditorViewModelDisplayParameters(Key&lt;TextEditorViewModel&gt;<sp/>ViewModelKey)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>string<sp/>WrapperStyleCssString<sp/>{<sp/>get;<sp/>init;<sp/>}<sp/>=<sp/>string.Empty;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>string<sp/>WrapperClassCssString<sp/>{<sp/>get;<sp/>init;<sp/>}<sp/>=<sp/>string.Empty;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>string<sp/>TextEditorStyleCssString<sp/>{<sp/>get;<sp/>init;<sp/>}<sp/>=<sp/>string.Empty;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>string<sp/>TextEditorClassCssString<sp/>{<sp/>get;<sp/>init;<sp/>}<sp/>=<sp/>string.Empty;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;summary&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>TabIndex<sp/>is<sp/>used<sp/>for<sp/>the<sp/>html<sp/>attribute<sp/>named:<sp/>&apos;tabindex&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>int<sp/>TabIndex<sp/>{<sp/>get;<sp/>init;<sp/>}<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>RenderFragment&lt;TextEditorRenderBatchValidated&gt;?<sp/>ContextMenuRenderFragmentOverride<sp/>{<sp/>get;<sp/>init;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>RenderFragment&lt;TextEditorRenderBatchValidated&gt;?<sp/>AutoCompleteMenuRenderFragmentOverride<sp/>{<sp/>get;<sp/>init;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;summary&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>If<sp/>left<sp/>null,<sp/>the<sp/>default<sp/>&lt;see<sp/>cref=&quot;HandleAfterOnKeyDownAsync&quot;/&gt;<sp/>will<sp/>be<sp/>used.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Func&lt;ITextEditorEditContext,<sp/>TextEditorModelModifier,<sp/>TextEditorViewModelModifier,<sp/>CursorModifierBagTextEditor,<sp/>KeyboardEventArgs,<sp/>TextEditorComponentData,<sp/>Task&gt;?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AfterOnKeyDownAsync</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>get;<sp/>init;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;summary&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>If<sp/>left<sp/>null,<sp/>the<sp/>default<sp/>&lt;see<sp/>cref=&quot;HandleAfterOnKeyDownRangeAsync&quot;/&gt;<sp/>will<sp/>be<sp/>used.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>If<sp/>a<sp/>batch<sp/>handling<sp/>of<sp/>KeyboardEventArgs<sp/>is<sp/>performed,<sp/>then<sp/>this<sp/>method<sp/>will<sp/>be<sp/>invoked<sp/>as<sp/>opposed<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;see<sp/>cref=&quot;AfterOnKeyDownAsyncFactory&quot;/&gt;,<sp/>and<sp/>a<sp/>list<sp/>of<sp/>&lt;see<sp/>cref=&quot;KeyboardEventArgs&quot;/&gt;<sp/>will<sp/>be<sp/>provided,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>sorted<sp/>such<sp/>that<sp/>the<sp/>first<sp/>index<sp/>represents<sp/>the<sp/>first<sp/>event<sp/>fired,<sp/>and<sp/>the<sp/>last<sp/>index<sp/>represents<sp/>the<sp/>last</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>event<sp/>fired.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Func&lt;ITextEditorEditContext,<sp/>TextEditorModelModifier,<sp/>TextEditorViewModelModifier,<sp/>CursorModifierBagTextEditor,<sp/>List&lt;KeyboardEventArgs&gt;,<sp/>TextEditorComponentData,<sp/>Task&gt;?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AfterOnKeyDownRangeAsync</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>get;<sp/>init;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;summary&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>If<sp/>set<sp/>to<sp/>false<sp/>the<sp/>&lt;see<sp/>cref=&quot;Displays.Internals.Header&quot;/&gt;<sp/>will<sp/>NOT<sp/>render<sp/>above<sp/>the<sp/>text<sp/>editor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>bool<sp/>IncludeHeaderHelperComponent<sp/>{<sp/>get;<sp/>init;<sp/>}<sp/>=<sp/>true;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;summary&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;see<sp/>cref=&quot;HeaderButtonKinds&quot;/&gt;<sp/>contains<sp/>the<sp/>enum<sp/>value<sp/>that<sp/>represents<sp/>a<sp/>button<sp/>displayed<sp/>in<sp/>the<sp/>optional<sp/>component:<sp/>&lt;see<sp/>cref=&quot;TextEditorHeader&quot;/&gt;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>ImmutableArray&lt;HeaderButtonKind&gt;?<sp/>HeaderButtonKinds<sp/>{<sp/>get;<sp/>init;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;summary&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>If<sp/>set<sp/>to<sp/>false<sp/>the<sp/>&lt;see<sp/>cref=&quot;Displays.Internals.TextEditorFooter&quot;/&gt;<sp/>will<sp/>NOT<sp/>render<sp/>below<sp/>the<sp/>text<sp/>editor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>bool<sp/>IncludeFooterHelperComponent<sp/>{<sp/>get;<sp/>init;<sp/>}<sp/>=<sp/>true;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;summary&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>If<sp/>set<sp/>to<sp/>false:<sp/>the<sp/>&lt;see<sp/>cref=&quot;Displays.Internals.GutterSection&quot;/&gt;<sp/>will<sp/>NOT<sp/>render.<sp/>(i.e.<sp/>line<sp/>numbers<sp/>will<sp/>not<sp/>render)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>bool<sp/>IncludeGutterComponent<sp/>{<sp/>get;<sp/>init;<sp/>}<sp/>=<sp/>true;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>bool<sp/>IncludeContextMenuHelperComponent<sp/>{<sp/>get;<sp/>init;<sp/>}<sp/>=<sp/>true;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>ContextRecord<sp/>ContextRecord<sp/>{<sp/>get;<sp/>init;<sp/>}<sp/>=<sp/>ContextFacts.TextEditorContext;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;summary&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>The<sp/>integrated<sp/>terminal<sp/>logic<sp/>needs<sp/>a<sp/>keymap,<sp/>separate<sp/>to<sp/>that<sp/>of<sp/>the<sp/>&apos;global&apos;<sp/>keymap<sp/>used<sp/>by<sp/>other<sp/>text<sp/>editors.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>Therefore,<sp/>this<sp/>property<sp/>is<sp/>used<sp/>to<sp/>provide<sp/>the<sp/>&lt;see<sp/>cref=&quot;Keymaps.Models.Terminals.TextEditorKeymapTerminal&quot;/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>to<sp/>the<sp/>integrated<sp/>terminal.&lt;br/&gt;&lt;br/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>This<sp/>property<sp/>is<sp/>not<sp/>intended<sp/>for<sp/>use<sp/>in<sp/>any<sp/>other<sp/>scenario.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///<sp/>&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>Keymap?<sp/>KeymapOverride<sp/>{<sp/>get;<sp/>init;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">public<sp/>sealed<sp/>partial<sp/>class<sp/>TextEditorViewModelDisplay<sp/>:<sp/>ComponentBase,<sp/>IDisposable</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[Inject]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>IState&lt;TextEditorState&gt;<sp/>TextEditorStateWrap<sp/>{<sp/>get;<sp/>set;<sp/>}<sp/>=<sp/>null!;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[Parameter]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>TextEditorViewModelDisplayParameters<sp/>ViewModelDisplayParameters<sp/>{<sp/>get;<sp/>set;<sp/>}<sp/>=<sp/>new();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>private<sp/>(Key&lt;TextEditorViewModel&gt;<sp/>ViewModelKey,<sp/>int<sp/>Sequence)<sp/>_viewModelSequenceTuple<sp/>=<sp/>(Key&lt;TextEditorViewModel&gt;.Empty,<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>protected<sp/>override<sp/>void<sp/>OnParametersSet()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ViewModelDisplayParameters.ViewModelKey<sp/>!=<sp/>_viewModelSequenceTuple.ViewModelKey)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_viewModelSequenceTuple<sp/>=<sp/>(ViewModelDisplayParameters.ViewModelKey,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base.OnParametersSet();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>protected<sp/>override<sp/>bool<sp/>ShouldRender()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Is<sp/>this<sp/>invocation<sp/>to<sp/>the<sp/>base<sp/>necessary?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>And,<sp/>where<sp/>would<sp/>it<sp/>go<sp/>if<sp/>it<sp/>were<sp/>necessary.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>shouldRender<sp/>=<sp/>base.ShouldRender();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Goal<sp/>is<sp/>to<sp/>create<sp/>a<sp/>back<sp/>and<sp/>forth<sp/>communication<sp/>where<sp/>the<sp/>UI<sp/>notifies</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>some<sp/>&apos;external&apos;<sp/>code<sp/>that<sp/>it<sp/>wishes<sp/>to<sp/>render<sp/>the<sp/>text<sp/>editor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>I&apos;ll<sp/>just<sp/>call<sp/>the<sp/>&apos;external&apos;<sp/>code<sp/>the<sp/>&apos;IState&lt;TextEditorState&gt;<sp/>TextEditorStateWrap&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>but<sp/>that<sp/>isn&apos;t<sp/>quite<sp/>so<sp/>accurate.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Upon<sp/>the<sp/>very<sp/>first<sp/>render,<sp/>&apos;ShouldRender()&apos;<sp/>does<sp/>not<sp/>get<sp/>invoked.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>This<sp/>should<sp/>be<sp/>fine,<sp/>because<sp/>we<sp/>need<sp/>to<sp/>render<sp/>at<sp/>least<sp/>once<sp/>in<sp/>order<sp/>to<sp/>draw</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>text<sp/>editor<sp/>HTML<sp/>element.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>text<sp/>editor<sp/>HTML<sp/>element<sp/>goes<sp/>on<sp/>to<sp/>take<sp/>up<sp/>100%<sp/>width<sp/>and<sp/>height<sp/>of<sp/>the<sp/>parent<sp/>element.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>So,<sp/>the<sp/>very<sp/>first<sp/>render<sp/>allows<sp/>one<sp/>to<sp/>draw<sp/>an<sp/>empty<sp/>text<sp/>editor,<sp/>and<sp/>measure<sp/>its<sp/>width,<sp/>and<sp/>height.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>These<sp/>width<sp/>and<sp/>height<sp/>measurements<sp/>can<sp/>then<sp/>be<sp/>used<sp/>for<sp/>virtualization<sp/>at<sp/>a<sp/>later<sp/>point.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Inside<sp/>&apos;override<sp/>Task<sp/>OnAfterRenderAsync(bool<sp/>firstRender)&apos;<sp/>there<sp/>is<sp/>a<sp/>conditional<sp/>branch</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>that<sp/>will<sp/>cause<sp/>a<sp/>re-render<sp/>if<sp/>it<sp/>is<sp/>the<sp/>first<sp/>render.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>So,<sp/>we<sp/>now<sp/>are<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the<sp/>second<sp/>render,<sp/>in<sp/>which<sp/>&apos;ShouldRender&apos;<sp/>will<sp/>for<sp/>the<sp/>first<sp/>time<sp/>be<sp/>ran.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>At<sp/>this<sp/>point<sp/>we<sp/>have<sp/>the<sp/>measurements<sp/>of<sp/>the<sp/>text<sp/>editor<sp/>HTML<sp/>element<sp/>because<sp/>an<sp/>empty<sp/>one<sp/>was<sp/>rendered.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>But,<sp/>we<sp/>don&apos;t<sp/>have<sp/>a<sp/>virtualization<sp/>result<sp/>that<sp/>tells<sp/>us<sp/>what<sp/>content<sp/>to<sp/>display.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>So,<sp/>we<sp/>need<sp/>to<sp/>notify<sp/>the<sp/>TextEditorStateWrap<sp/>that<sp/>we<sp/>intend<sp/>to<sp/>render<sp/>something.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>We<sp/>pass<sp/>to<sp/>the<sp/>TextEditorStateWrap<sp/>our<sp/>&apos;_viewModelSequenceTuple&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>If<sp/>the<sp/>_viewModelSequenceTuple.Sequence<sp/>==<sp/>(the<sp/>most<sp/>recent<sp/>sequence<sp/>in<sp/>the<sp/>TextEditorStateWrap)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>then<sp/>no<sp/>render<sp/>is<sp/>needed,<sp/>the<sp/>UI<sp/>is<sp/>up<sp/>to<sp/>date.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Anytime<sp/>a<sp/>model<sp/>is<sp/>modified,<sp/>all<sp/>of<sp/>its<sp/>corresponding<sp/>ViewModels<sp/>need<sp/>to<sp/>have<sp/>their</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Sequence<sp/>incremented.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>As<sp/>well,<sp/>anytime<sp/>a<sp/>ViewModel<sp/>itself<sp/>is<sp/>modified,<sp/>increment<sp/>its<sp/>sequence.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>And<sp/>if<sp/>the<sp/>text<sp/>editor&apos;s<sp/>settings<sp/>are<sp/>changed<sp/>(such<sp/>as<sp/>the<sp/>font<sp/>size)<sp/>then<sp/>increment</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>sequence<sp/>for<sp/>every<sp/>ViewModel.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>But,<sp/>its<sp/>important<sp/>to<sp/>note<sp/>that<sp/>the<sp/>previous<sp/>events<sp/>solely<sp/>incremented<sp/>the<sp/>Sequence.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>It<sp/>is<sp/>up<sp/>to<sp/>the<sp/>user<sp/>interface<sp/>(i.e.<sp/>the<sp/>text<sp/>editor<sp/>component)<sp/>to<sp/>notify<sp/>its<sp/>attempt</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>to<sp/>render.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>At<sp/>that<sp/>moment,<sp/>if<sp/>the<sp/>ViewModel&apos;s<sp/>ObservedSequence<sp/>is<sp/>not<sp/>equal<sp/>to<sp/>its</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>RunningSequence<sp/>then<sp/>the<sp/>VirtualizationResult<sp/>is<sp/>to<sp/>be<sp/>calculated,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>and<sp/>&apos;false&apos;<sp/>should<sp/>be<sp/>returned,<sp/>because<sp/>it<sp/>would<sp/>have<sp/>rendered<sp/>outdated</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>information.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>After<sp/>the<sp/>VirtualizationResult<sp/>is<sp/>calculated,<sp/>trigger<sp/>the<sp/>UI<sp/>to<sp/>render.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>This<sp/>once<sp/>again<sp/>will<sp/>enter<sp/>this<sp/>&apos;ShouldRender&apos;<sp/>method.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>But,<sp/>this<sp/>time<sp/>when<sp/>notifying<sp/>the<sp/>&apos;TextEditorStateWrap&apos;<sp/>that<sp/>it<sp/>intends<sp/>to<sp/>render,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>response<sp/>is<sp/>&apos;true&apos;<sp/>because<sp/>the<sp/>ObservedSequence<sp/>was<sp/>updated<sp/>to<sp/>be<sp/>equal<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>RunningSequence<sp/>after<sp/>the<sp/>VirtualizationResult<sp/>was<sp/>calculated.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>So,<sp/>true<sp/>is<sp/>returned<sp/>and<sp/>the<sp/>content<sp/>is<sp/>rendered.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>As<sp/>for<sp/>the<sp/>virtualization,<sp/>there<sp/>is<sp/>no<sp/>need<sp/>for<sp/>the<sp/>JavaScript<sp/>intersection<sp/>observer.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>ITextEditorEditContext<sp/>knows<sp/>everything<sp/>about<sp/>the<sp/>scroll<sp/>position,<sp/>and<sp/>other<sp/>data<sp/>relating<sp/>to<sp/>the<sp/>text<sp/>editor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>So<sp/>the<sp/>virtualization<sp/>can<sp/>just<sp/>be<sp/>done<sp/>then<sp/>and<sp/>there.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ViewModelDisplayParameters.ViewModelKey;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Random<sp/>note<sp/>before<sp/>I<sp/>forget:<sp/>options<sp/>changes<sp/>should<sp/>be<sp/>done<sp/>via<sp/>a<sp/>throttled<sp/>effect<sp/>that<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>triggers<sp/>UI<sp/>re-render<sp/>100x<sp/>easier<sp/>than<sp/>what<sp/>I&apos;m<sp/>currently<sp/>doing.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>protected<sp/>override<sp/>async<sp/>Task<sp/>OnAfterRenderAsync(bool<sp/>firstRender)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(firstRender)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>If<sp/>we<sp/>were<sp/>to<sp/>use<sp/>the<sp/>synchronous<sp/>&apos;OnAfterRender&apos;<sp/>version<sp/>of<sp/>this<sp/>method.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Could<sp/>we<sp/>guarantee<sp/>that<sp/>an<sp/>invocation<sp/>to<sp/>&apos;StateHasChanged&apos;<sp/>would<sp/>not</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>need<sp/>to<sp/>be<sp/>put<sp/>within<sp/>an<sp/>invocation<sp/>to<sp/>&apos;InvokeAsync&apos;?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>worry<sp/>being,<sp/>an<sp/>exception<sp/>due<sp/>to<sp/>not<sp/>being<sp/>on<sp/>the<sp/>correct<sp/>synchronization<sp/>context.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>If<sp/>this<sp/>override<sp/>serves<sp/>only<sp/>to<sp/>cause<sp/>a<sp/>re-render<sp/>after<sp/>the<sp/>very<sp/>first<sp/>render,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>then<sp/>it<sp/>may<sp/>be<sp/>a<sp/>worthwhile<sp/>optimization<sp/>to<sp/>swap<sp/>this<sp/>method<sp/>to<sp/>the<sp/>synchronous<sp/>version</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>it<sp/>would<sp/>be<sp/>safe<sp/>to<sp/>do<sp/>so.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>InvokeAsync(StateHasChanged);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Is<sp/>this<sp/>invocation<sp/>to<sp/>the<sp/>base<sp/>necessary?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>And,<sp/>where<sp/>would<sp/>it<sp/>go<sp/>if<sp/>it<sp/>were<sp/>necessary.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>base.OnAfterRenderAsync();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Source/Lib/TextEditor/TextEditors/Models/README.md"/>
  </compounddef>
</doxygen>
