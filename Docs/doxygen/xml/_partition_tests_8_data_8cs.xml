<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.15.0" xml:lang="en-US">
  <compounddef id="_partition_tests_8_data_8cs" kind="file" language="C#">
    <compoundname>PartitionTests.Data.cs</compoundname>
    <innerclass refid="class_luthetus_1_1_text_editor_1_1_tests_1_1_adhoc_1_1_partition_tests" prot="public">Luthetus::TextEditor::Tests::Adhoc::PartitionTests</innerclass>
    <innernamespace refid="namespace_luthetus">Luthetus</innernamespace>
    <innernamespace refid="namespace_luthetus_1_1_text_editor">Luthetus::TextEditor</innernamespace>
    <innernamespace refid="namespace_luthetus_1_1_text_editor_1_1_tests">Luthetus::TextEditor::Tests</innernamespace>
    <innernamespace refid="namespace_luthetus_1_1_text_editor_1_1_tests_1_1_adhoc">Luthetus::TextEditor::Tests::Adhoc</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_luthetus_1_1_text_editor_1_1_tests_1_1_adhoc" kindref="compound">Luthetus.TextEditor.Tests.Adhoc</ref>;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="class_luthetus_1_1_text_editor_1_1_tests_1_1_adhoc_1_1_partition_tests" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">partial<sp/>class<sp/></highlight><highlight class="normal"><ref refid="class_luthetus_1_1_text_editor_1_1_tests_1_1_adhoc_1_1_partition_tests" kindref="compound">PartitionTests</ref></highlight></codeline>
<codeline lineno="4"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23" refid="class_luthetus_1_1_text_editor_1_1_tests_1_1_adhoc_1_1_partition_tests_1a1ea663fda7213ddabab8c11a6a9362dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="class_luthetus_1_1_text_editor_1_1_tests_1_1_adhoc_1_1_partition_tests_1a1ea663fda7213ddabab8c11a6a9362dd" kindref="member">SAMPLE_CASE_THAT_HAS_LINE_ENDINGS_BREAK_BUG</ref><sp/>=<sp/></highlight><highlight class="stringliteral">@&quot;using<sp/>System.Collections.Immutable;</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral">using<sp/>System.Runtime.InteropServices;</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral">using<sp/>Fluxor;</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral">using<sp/>CliWrap.EventStream;</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral">using<sp/>Luthetus.Common.RazorLib.BackgroundTasks.Models;</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral">using<sp/>Luthetus.Common.RazorLib.ComponentRenderers.Models;</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral">using<sp/>Luthetus.Common.RazorLib.FileSystems.Models;</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral">using<sp/>Luthetus.Common.RazorLib.Keys.Models;</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral">using<sp/>Luthetus.Common.RazorLib.Namespaces.Models;</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral">using<sp/>Luthetus.Common.RazorLib.Storages.Models;</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral">using<sp/>Luthetus.Common.RazorLib.TreeViews.Models;</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral">using<sp/>Luthetus.Common.RazorLib.Notifications.Models;</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral">using<sp/>Luthetus.Common.RazorLib.Reactives.Models;</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral">using<sp/>Luthetus.TextEditor.RazorLib;</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral">using<sp/>Luthetus.TextEditor.RazorLib.CompilerServices.Interfaces;</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral">using<sp/>Luthetus.TextEditor.RazorLib.FindAlls.States;</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral">using<sp/>Luthetus.TextEditor.RazorLib.Lexers.Models;</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral">using<sp/>Luthetus.TextEditor.RazorLib.TextEditors.Models;</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral">using<sp/>Luthetus.TextEditor.RazorLib.Installations.Models;</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral">using<sp/>Luthetus.CompilerServices.DotNetSolution.Models.Project;</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral">using<sp/>Luthetus.CompilerServices.DotNetSolution.Models;</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral">using<sp/>Luthetus.CompilerServices.DotNetSolution.SyntaxActors;</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral">using<sp/>Luthetus.CompilerServices.DotNetSolution.CompilerServiceCase;</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral">using<sp/>Luthetus.Ide.RazorLib.CodeSearches.States;</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral">using<sp/>Luthetus.Ide.RazorLib.ComponentRenderers.Models;</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral">using<sp/>Luthetus.Ide.RazorLib.Terminals.Models;</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral">using<sp/>Luthetus.Ide.RazorLib.Terminals.States;</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral">using<sp/>Luthetus.Ide.RazorLib.BackgroundTasks.Models;</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral">using<sp/>Luthetus.Ide.RazorLib.StartupControls.Models;</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral">using<sp/>Luthetus.Ide.RazorLib.StartupControls.States;</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral">using<sp/>Luthetus.Extensions.DotNet.DotNetSolutions.States;</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral">using<sp/>Luthetus.Extensions.DotNet.CompilerServices.States;</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral">using<sp/>Luthetus.Extensions.DotNet.Websites.ProjectTemplates.Models;</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral">using<sp/>Luthetus.Extensions.DotNet.ComponentRenderers.Models;</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral">using<sp/>Luthetus.Extensions.DotNet.CommandLines.Models;</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral">namespace<sp/>Luthetus.Extensions.DotNet.DotNetSolutions.Models;</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral">public<sp/>class<sp/>DotNetSolutionIdeApi</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>IdeBackgroundTaskApi<sp/>_ideBackgroundTaskApi;</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>IBackgroundTaskService<sp/>_backgroundTaskService;</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>IStorageService<sp/>_storageService;</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>IState&lt;CompilerServiceExplorerState&gt;<sp/>_compilerServiceExplorerStateWrap;</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>IDotNetComponentRenderers<sp/>_dotNetComponentRenderers;</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>IIdeComponentRenderers<sp/>_ideComponentRenderers;</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>ICommonComponentRenderers<sp/>_commonComponentRenderers;</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>ITreeViewService<sp/>_treeViewService;</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>IDispatcher<sp/>_dispatcher;</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>IEnvironmentProvider<sp/>_environmentProvider;</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>IState&lt;DotNetSolutionState&gt;<sp/>_dotNetSolutionStateWrap;</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>IFileSystemProvider<sp/>_fileSystemProvider;</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>ITextEditorService<sp/>_textEditorService;</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>ICompilerServiceRegistry<sp/>_compilerServiceRegistry;</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>IState&lt;TerminalState&gt;<sp/>_terminalStateWrap;</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>DotNetCliOutputParser<sp/>_dotNetCliOutputParser;</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>IServiceProvider<sp/>_serviceProvider;</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>Key&lt;TerminalCommandRequest&gt;<sp/>_newDotNetSolutionTerminalCommandRequestKey<sp/>=<sp/>Key&lt;TerminalCommandRequest&gt;.NewKey();</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>readonly<sp/>CancellationTokenSource<sp/>_newDotNetSolutionCancellationTokenSource<sp/>=<sp/>new();</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>public<sp/>DotNetSolutionIdeApi(</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IdeBackgroundTaskApi<sp/>ideBackgroundTaskApi,</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IBackgroundTaskService<sp/>backgroundTaskService,</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IStorageService<sp/>storageService,</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IState&lt;CompilerServiceExplorerState&gt;<sp/>compilerServiceExplorerStateWrap,</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDotNetComponentRenderers<sp/>dotNetComponentRenderers,</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IIdeComponentRenderers<sp/>ideComponentRenderers,</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ICommonComponentRenderers<sp/>commonComponentRenderers,</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITreeViewService<sp/>treeViewService,</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDispatcher<sp/>dispatcher,</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IEnvironmentProvider<sp/>environmentProvider,</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IState&lt;DotNetSolutionState&gt;<sp/>dotNetSolutionStateWrap,</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IFileSystemProvider<sp/>fileSystemProvider,</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITextEditorService<sp/>textEditorService,</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ICompilerServiceRegistry<sp/>compilerServiceRegistry,</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IState&lt;TerminalState&gt;<sp/>terminalStateWrap,</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DotNetCliOutputParser<sp/>dotNetCliOutputParser,</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IServiceProvider<sp/>serviceProvider)</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_ideBackgroundTaskApi<sp/>=<sp/>ideBackgroundTaskApi;</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_backgroundTaskService<sp/>=<sp/>backgroundTaskService;</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_storageService<sp/>=<sp/>storageService;</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_compilerServiceExplorerStateWrap<sp/>=<sp/>compilerServiceExplorerStateWrap;</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_compilerServiceRegistry<sp/>=<sp/>compilerServiceRegistry;</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dotNetComponentRenderers<sp/>=<sp/>dotNetComponentRenderers;</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_ideComponentRenderers<sp/>=<sp/>ideComponentRenderers;</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_commonComponentRenderers<sp/>=<sp/>commonComponentRenderers;</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_treeViewService<sp/>=<sp/>treeViewService;</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dispatcher<sp/>=<sp/>dispatcher;</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_environmentProvider<sp/>=<sp/>environmentProvider;</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dotNetSolutionStateWrap<sp/>=<sp/>dotNetSolutionStateWrap;</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_fileSystemProvider<sp/>=<sp/>fileSystemProvider;</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_textEditorService<sp/>=<sp/>textEditorService;</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_compilerServiceRegistry<sp/>=<sp/>compilerServiceRegistry;</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_terminalStateWrap<sp/>=<sp/>terminalStateWrap;</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dotNetCliOutputParser<sp/>=<sp/>dotNetCliOutputParser;</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_serviceProvider<sp/>=<sp/>serviceProvider;</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>public<sp/>void<sp/>SetDotNetSolution(IAbsolutePath<sp/>inSolutionAbsolutePath)</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_backgroundTaskService.Enqueue(</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Key&lt;IBackgroundTask&gt;.NewKey(),</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContinuousBackgroundTaskWorker.GetQueueKey(),</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;Set<sp/>.NET<sp/>Solution&quot;&quot;,</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>()<sp/>=&gt;<sp/>SetDotNetSolutionAsync(inSolutionAbsolutePath));</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>async<sp/>Task<sp/>SetDotNetSolutionAsync(IAbsolutePath<sp/>inSolutionAbsolutePath)</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>dotNetSolutionAbsolutePathString<sp/>=<sp/>inSolutionAbsolutePath.Value;</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>content<sp/>=<sp/>await<sp/>_fileSystemProvider.File.ReadAllTextAsync(</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dotNetSolutionAbsolutePathString,</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CancellationToken.None)</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ConfigureAwait(false);</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>solutionAbsolutePath<sp/>=<sp/>_environmentProvider.AbsolutePathFactory(</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dotNetSolutionAbsolutePathString,</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>false);</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>solutionNamespacePath<sp/>=<sp/>new<sp/>NamespacePath(</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string.Empty,</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solutionAbsolutePath);</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>resourceUri<sp/>=<sp/>new<sp/>ResourceUri(solutionAbsolutePath.Value);</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_textEditorService.ModelApi.GetOrDefault(resourceUri)<sp/>is<sp/>null)</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_textEditorService.ModelApi.RegisterTemplated(</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtensionNoPeriodFacts.DOT_NET_SOLUTION,</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resourceUri,</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DateTime.UtcNow,</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content);</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_compilerServiceRegistry</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.GetCompilerService(ExtensionNoPeriodFacts.DOT_NET_SOLUTION)</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.RegisterResource(</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resourceUri,</highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shouldTriggerResourceWasModified:<sp/>true);</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>lexer<sp/>=<sp/>new<sp/>DotNetSolutionLexer(</highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resourceUri,</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content);</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.Lex();</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>parser<sp/>=<sp/>new<sp/>DotNetSolutionParser(lexer);</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>compilationUnit<sp/>=<sp/>parser.Parse();</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foreach<sp/>(var<sp/>project<sp/>in<sp/>parser.DotNetProjectList)</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>relativePathFromSolutionFileString<sp/>=<sp/>project.RelativePathFromSolutionFileString;</highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Debugging<sp/>Linux-Ubuntu<sp/>(2024-04-28)</highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>-----------------------------------</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>It<sp/>is<sp/>believed,<sp/>that<sp/>Linux-Ubuntu<sp/>is<sp/>not<sp/>fully<sp/>working<sp/>correctly,</highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>due<sp/>to<sp/>the<sp/>directory<sp/>separator<sp/>character<sp/>at<sp/>the<sp/>os<sp/>level<sp/>being<sp/>&apos;/&apos;,</highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>meanwhile<sp/>the<sp/>.NET<sp/>solution<sp/>has<sp/>as<sp/>its<sp/>directory<sp/>separator<sp/>character<sp/>&apos;\&apos;.</highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Will<sp/>perform<sp/>a<sp/>string.Replace(&quot;&quot;\\&quot;&quot;,<sp/>&quot;&quot;/&quot;&quot;)<sp/>here.<sp/>And<sp/>if<sp/>it<sp/>solves<sp/>the<sp/>issue,</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>then<sp/>some<sp/>standard<sp/>way<sp/>of<sp/>doing<sp/>this<sp/>needs<sp/>to<sp/>be<sp/>made<sp/>available<sp/>in<sp/>the<sp/>IEnvironmentProvider.</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Okay,<sp/>this<sp/>single<sp/>replacement<sp/>fixes<sp/>99%<sp/>of<sp/>the<sp/>solution<sp/>explorer<sp/>issue.</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>And<sp/>I<sp/>say<sp/>99%<sp/>instead<sp/>of<sp/>100%<sp/>just<sp/>because<sp/>I<sp/>haven&apos;t<sp/>tested<sp/>every<sp/>single<sp/>part<sp/>of<sp/>it<sp/>yet.</highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))</highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relativePathFromSolutionFileString<sp/>=<sp/>relativePathFromSolutionFileString.Replace(&quot;&quot;\\&quot;&quot;,<sp/>&quot;&quot;/&quot;&quot;);</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Solution<sp/>Folders<sp/>do<sp/>not<sp/>exist<sp/>on<sp/>the<sp/>filesystem.<sp/>Therefore<sp/>their<sp/>absolute<sp/>path<sp/>is<sp/>not<sp/>guaranteed<sp/>to<sp/>be<sp/>unique</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>One<sp/>can<sp/>use<sp/>the<sp/>ProjectIdGuid<sp/>however,<sp/>when<sp/>working<sp/>with<sp/>a<sp/>SolutionFolder<sp/>to<sp/>make<sp/>the<sp/>absolute<sp/>path<sp/>unique.</highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(project.DotNetProjectKind<sp/>==<sp/>DotNetProjectKind.SolutionFolder)</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relativePathFromSolutionFileString<sp/>=<sp/>$&quot;&quot;{project.ProjectIdGuid}_{relativePathFromSolutionFileString}&quot;&quot;;</highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>absolutePathString<sp/>=<sp/>PathHelper.GetAbsoluteFromAbsoluteAndRelative(</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solutionAbsolutePath,</highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relativePathFromSolutionFileString,</highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_environmentProvider);</highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>project.AbsolutePath<sp/>=<sp/>_environmentProvider.AbsolutePathFactory(absolutePathString,<sp/>false);</highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>solutionFolderList<sp/>=<sp/>parser.DotNetProjectList</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Where(x<sp/>=&gt;<sp/>x.DotNetProjectKind<sp/>==<sp/>DotNetProjectKind.SolutionFolder)</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Select(x<sp/>=&gt;<sp/>(SolutionFolder)x).ToImmutableArray();</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>dotNetSolutionModel<sp/>=<sp/>new<sp/>DotNetSolutionModel(</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solutionAbsolutePath,</highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.DotNetSolutionHeader,</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.DotNetProjectList.ToImmutableArray(),</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solutionFolderList,</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.NestedProjectEntryList.ToImmutableArray(),</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.DotNetSolutionGlobal,</highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content);</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>TODO:<sp/>If<sp/>somehow<sp/>model<sp/>was<sp/>registered<sp/>already<sp/>this<sp/>won&apos;t<sp/>write<sp/>the<sp/>state</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dispatcher.Dispatch(new<sp/>DotNetSolutionState.RegisterAction(dotNetSolutionModel,<sp/>this));</highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dispatcher.Dispatch(new<sp/>WithAction(</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inDotNetSolutionState<sp/>=&gt;<sp/>inDotNetSolutionState<sp/>with</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DotNetSolutionModelKey<sp/>=<sp/>dotNetSolutionModel.Key</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="229"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>TODO:<sp/>Putting<sp/>a<sp/>hack<sp/>for<sp/>now<sp/>to<sp/>overwrite<sp/>if<sp/>somehow<sp/>model<sp/>was<sp/>registered<sp/>already</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dispatcher.Dispatch(ConstructModelReplacement(</highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dotNetSolutionModel.Key,</highlight></codeline>
<codeline lineno="232"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dotNetSolutionModel));</highlight></codeline>
<codeline lineno="233"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="234"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>dotNetSolutionCompilerService<sp/>=<sp/>(DotNetSolutionCompilerService)_compilerServiceRegistry.GetCompilerService(ExtensionNoPeriodFacts.DOT_NET_SOLUTION);</highlight></codeline>
<codeline lineno="235"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="236"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dotNetSolutionCompilerService.ResourceWasModified(</highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>ResourceUri(solutionAbsolutePath.Value),</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImmutableArray&lt;TextEditorTextSpan&gt;.Empty);</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>parentDirectory<sp/>=<sp/>solutionAbsolutePath.ParentDirectory;</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(parentDirectory<sp/>is<sp/>not<sp/>null)</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_environmentProvider.DeletionPermittedRegister(new(parentDirectory.Value,<sp/>true));</highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="246"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dispatcher.Dispatch(new<sp/>TextEditorFindAllState.SetStartingDirectoryPathAction(</highlight></codeline>
<codeline lineno="247"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentDirectory.Value));</highlight></codeline>
<codeline lineno="248"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dispatcher.Dispatch(new<sp/>CodeSearchState.WithAction(inState<sp/>=&gt;<sp/>inState<sp/>with</highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartingAbsolutePathForSearch<sp/>=<sp/>parentDirectory.Value</highlight></codeline>
<codeline lineno="252"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="253"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="254"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>&apos;generalTerminal&apos;<sp/>working<sp/>directory</highlight></codeline>
<codeline lineno="255"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>terminalCommandRequest<sp/>=<sp/>new<sp/>TerminalCommandRequest(</highlight></codeline>
<codeline lineno="257"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TerminalInteractive.RESERVED_TARGET_FILENAME_PREFIX<sp/>+<sp/>nameof(DotNetSolutionIdeApi),</highlight></codeline>
<codeline lineno="258"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentDirectory.Value)</highlight></codeline>
<codeline lineno="259"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BeginWithFunc<sp/>=<sp/>parsedCommand<sp/>=&gt;</highlight></codeline>
<codeline lineno="261"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_terminalStateWrap.Value.TerminalMap[TerminalFacts.GENERAL_KEY].TerminalOutput.WriteOutput(</highlight></codeline>
<codeline lineno="263"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parsedCommand,</highlight></codeline>
<codeline lineno="264"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>StandardOutputCommandEvent(@$&quot;&quot;Sln<sp/>found:<sp/>&apos;{solutionAbsolutePath.Value}&apos;</highlight></codeline>
<codeline lineno="265"><highlight class="stringliteral">Sln-Directory:<sp/>&apos;{parentDirectory.Value}&apos;</highlight></codeline>
<codeline lineno="266"><highlight class="stringliteral">General<sp/>Terminal&quot;&quot;));</highlight></codeline>
<codeline lineno="267"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="268"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="270"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="271"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_terminalStateWrap.Value.TerminalMap[TerminalFacts.GENERAL_KEY].EnqueueCommand(terminalCommandRequest);</highlight></codeline>
<codeline lineno="272"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>&apos;executionTerminal&apos;<sp/>working<sp/>directory</highlight></codeline>
<codeline lineno="275"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>terminalCommandRequest<sp/>=<sp/>new<sp/>TerminalCommandRequest(</highlight></codeline>
<codeline lineno="277"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TerminalInteractive.RESERVED_TARGET_FILENAME_PREFIX<sp/>+<sp/>nameof(DotNetSolutionIdeApi),</highlight></codeline>
<codeline lineno="278"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentDirectory.Value)</highlight></codeline>
<codeline lineno="279"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BeginWithFunc<sp/>=<sp/>parsedCommand<sp/>=&gt;</highlight></codeline>
<codeline lineno="281"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_terminalStateWrap.Value.TerminalMap[TerminalFacts.GENERAL_KEY].TerminalOutput.WriteOutput(</highlight></codeline>
<codeline lineno="283"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parsedCommand,</highlight></codeline>
<codeline lineno="284"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>StandardOutputCommandEvent(@$&quot;&quot;Sln<sp/>found:<sp/>&apos;{solutionAbsolutePath.Value}&apos;</highlight></codeline>
<codeline lineno="285"><highlight class="stringliteral">Sln-Directory:<sp/>&apos;{parentDirectory.Value}&apos;</highlight></codeline>
<codeline lineno="286"><highlight class="stringliteral">Execution<sp/>Terminal&quot;&quot;));</highlight></codeline>
<codeline lineno="287"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="288"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="290"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="291"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_terminalStateWrap.Value.TerminalMap[TerminalFacts.EXECUTION_KEY].EnqueueCommand(terminalCommandRequest);</highlight></codeline>
<codeline lineno="292"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>ParseSolution(dotNetSolutionModel.Key).ConfigureAwait(false);</highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>SetDotNetSolutionTreeViewAsync(dotNetSolutionModel.Key).ConfigureAwait(false);</highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="300"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>Task<sp/>ParseSolution(Key&lt;DotNetSolutionModel&gt;<sp/>dotNetSolutionModelKey)</highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>dotNetSolutionState<sp/>=<sp/>_dotNetSolutionStateWrap.Value;</highlight></codeline>
<codeline lineno="303"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="304"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>dotNetSolutionModel<sp/>=<sp/>dotNetSolutionState.DotNetSolutionsList.FirstOrDefault(</highlight></codeline>
<codeline lineno="305"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=&gt;<sp/>x.Key<sp/>==<sp/>dotNetSolutionModelKey);</highlight></codeline>
<codeline lineno="306"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="307"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(dotNetSolutionModel<sp/>is<sp/>null)</highlight></codeline>
<codeline lineno="308"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="309"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="310"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/>=<sp/>Task.Run(async<sp/>()<sp/>=&gt;</highlight></codeline>
<codeline lineno="311"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>progressBarModel<sp/>=<sp/>new<sp/>ProgressBarModel(0,<sp/>&quot;&quot;parsing...&quot;&quot;);</highlight></codeline>
<codeline lineno="313"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="314"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NotificationHelper.DispatchProgress(</highlight></codeline>
<codeline lineno="315"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>$&quot;&quot;Parse:<sp/>{dotNetSolutionModel.AbsolutePath.NameWithExtension}&quot;&quot;,</highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progressBarModel,</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_commonComponentRenderers,</highlight></codeline>
<codeline lineno="318"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dispatcher,</highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeSpan.FromMilliseconds(-1));</highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>progressThrottle<sp/>=<sp/>new<sp/>Throttle(TimeSpan.FromMilliseconds(100));</highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="323"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try</highlight></codeline>
<codeline lineno="324"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_textEditorService.TextEditorConfig.RegisterModelFunc<sp/>is<sp/>null)</highlight></codeline>
<codeline lineno="326"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="327"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="328"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progressThrottle.Run(_<sp/>=&gt;<sp/></highlight></codeline>
<codeline lineno="329"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progressBarModel.SetProgress(0.05,<sp/>&quot;&quot;Discovering<sp/>projects...&quot;&quot;);</highlight></codeline>
<codeline lineno="331"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="332"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="333"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foreach<sp/>(var<sp/>project<sp/>in<sp/>dotNetSolutionModel.DotNetProjectList)</highlight></codeline>
<codeline lineno="335"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RegisterStartupControl(project);</highlight></codeline>
<codeline lineno="337"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="338"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>resourceUri<sp/>=<sp/>new<sp/>ResourceUri(project.AbsolutePath.Value);</highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="340"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!await<sp/>_fileSystemProvider.File.ExistsAsync(resourceUri.Value))</highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continue;<sp/>//<sp/>TODO:<sp/>This<sp/>can<sp/>still<sp/>cause<sp/>a<sp/>race<sp/>condition<sp/>exception<sp/>if<sp/>the<sp/>file<sp/>is<sp/>removed<sp/>before<sp/>the<sp/>next<sp/>line<sp/>runs.</highlight></codeline>
<codeline lineno="342"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="343"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>registerModelArgs<sp/>=<sp/>new<sp/>RegisterModelArgs(resourceUri,<sp/>_serviceProvider)</highlight></codeline>
<codeline lineno="344"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShouldBlockUntilBackgroundTaskIsCompleted<sp/>=<sp/>true,</highlight></codeline>
<codeline lineno="346"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="347"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="348"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>_textEditorService.TextEditorConfig.RegisterModelFunc.Invoke(registerModelArgs)</highlight></codeline>
<codeline lineno="349"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ConfigureAwait(false);</highlight></codeline>
<codeline lineno="350"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="352"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>previousStageProgress<sp/>=<sp/>0.05;</highlight></codeline>
<codeline lineno="353"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>dotNetProjectListLength<sp/>=<sp/>dotNetSolutionModel.DotNetProjectList.Length;</highlight></codeline>
<codeline lineno="354"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>projectsParsedCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="355"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foreach<sp/>(var<sp/>project<sp/>in<sp/>dotNetSolutionModel.DotNetProjectList)</highlight></codeline>
<codeline lineno="356"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>foreach<sp/>project<sp/>in<sp/>solution</highlight></codeline>
<codeline lineno="358"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>foreach<sp/>C#<sp/>file<sp/>in<sp/>project</highlight></codeline>
<codeline lineno="359"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>EnqueueBackgroundTask(async<sp/>()<sp/>=&gt;</highlight></codeline>
<codeline lineno="360"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseCSharpFile();</highlight></codeline>
<codeline lineno="362"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateProgressBar();</highlight></codeline>
<codeline lineno="363"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="364"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="365"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Treat<sp/>every<sp/>project<sp/>as<sp/>an<sp/>equal<sp/>weighting<sp/>with<sp/>relation<sp/>to<sp/>remaining<sp/>percent<sp/>to<sp/>complete</highlight></codeline>
<codeline lineno="366"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>on<sp/>the<sp/>progress<sp/>bar.</highlight></codeline>
<codeline lineno="367"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="368"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>If<sp/>the<sp/>project<sp/>were<sp/>to<sp/>be<sp/>parsed,<sp/>how<sp/>much<sp/>would<sp/>it<sp/>move<sp/>the<sp/>percent<sp/>progress<sp/>completed<sp/>by?</highlight></codeline>
<codeline lineno="369"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="370"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Then,<sp/>in<sp/>order<sp/>to<sp/>see<sp/>progress<sp/>while<sp/>each<sp/>C#<sp/>file<sp/>in<sp/>the<sp/>project<sp/>gets<sp/>parsed,</highlight></codeline>
<codeline lineno="371"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>multiply<sp/>the<sp/>percent<sp/>progress<sp/>this<sp/>project<sp/>can<sp/>provide<sp/>by<sp/>the<sp/>proportion</highlight></codeline>
<codeline lineno="372"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>of<sp/>the<sp/>project&apos;s<sp/>C#<sp/>files<sp/>which<sp/>have<sp/>been<sp/>parsed.</highlight></codeline>
<codeline lineno="373"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>maximumProgressAvailableToProject<sp/>=<sp/>(1<sp/>-<sp/>previousStageProgress)<sp/>*<sp/>((double)1.0<sp/>/<sp/>dotNetProjectListLength);</highlight></codeline>
<codeline lineno="374"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>currentProgress<sp/>=<sp/>Math.Min(1.0,<sp/>previousStageProgress<sp/>+<sp/>maximumProgressAvailableToProject<sp/>*<sp/>projectsParsedCount);</highlight></codeline>
<codeline lineno="375"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>This<sp/>&apos;SetProgress&apos;<sp/>is<sp/>being<sp/>kept<sp/>out<sp/>the<sp/>throttle,<sp/>since<sp/>it<sp/>sets<sp/>message<sp/>1</highlight></codeline>
<codeline lineno="377"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>whereas<sp/>the<sp/>per<sp/>class<sp/>progress<sp/>updates<sp/>set<sp/>message<sp/>2.</highlight></codeline>
<codeline lineno="378"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="379"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Otherwise<sp/>an<sp/>update<sp/>to<sp/>message<sp/>2<sp/>could<sp/>result<sp/>in<sp/>this<sp/>message<sp/>1<sp/>update<sp/>never<sp/>being<sp/>written.</highlight></codeline>
<codeline lineno="380"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progressBarModel.SetProgress(</highlight></codeline>
<codeline lineno="381"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentProgress,</highlight></codeline>
<codeline lineno="382"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>$&quot;&quot;{projectsParsedCount<sp/>+<sp/>1}/{dotNetProjectListLength}:<sp/>{project.AbsolutePath.NameWithExtension}&quot;&quot;);</highlight></codeline>
<codeline lineno="383"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="384"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="385"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>DiscoverClassesInProject(project,<sp/>progressBarModel,<sp/>progressThrottle,<sp/>currentProgress,<sp/>maximumProgressAvailableToProject);</highlight></codeline>
<codeline lineno="386"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projectsParsedCount++;</highlight></codeline>
<codeline lineno="387"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="389"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progressThrottle.Run(_<sp/>=&gt;<sp/></highlight></codeline>
<codeline lineno="390"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progressBarModel.SetProgress(1,<sp/>$&quot;&quot;Finished<sp/>parsing:<sp/>{dotNetSolutionModel.AbsolutePath.NameWithExtension}&quot;&quot;,<sp/>string.Empty);</highlight></codeline>
<codeline lineno="392"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progressBarModel.Dispose();</highlight></codeline>
<codeline lineno="393"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="394"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="395"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catch<sp/>(Exception<sp/>e)</highlight></codeline>
<codeline lineno="397"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>currentProgress<sp/>=<sp/>progressBarModel.GetProgress();</highlight></codeline>
<codeline lineno="399"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="400"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progressThrottle.Run(_<sp/>=&gt;<sp/></highlight></codeline>
<codeline lineno="401"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progressBarModel.SetProgress(currentProgress,<sp/>e.ToString());</highlight></codeline>
<codeline lineno="403"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progressBarModel.Dispose();</highlight></codeline>
<codeline lineno="404"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="405"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="406"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="408"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="409"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="410"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="412"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>async<sp/>Task<sp/>DiscoverClassesInProject(</highlight></codeline>
<codeline lineno="413"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDotNetProject<sp/>dotNetProject,</highlight></codeline>
<codeline lineno="414"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProgressBarModel<sp/>progressBarModel,</highlight></codeline>
<codeline lineno="415"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Throttle<sp/>progressThrottle,</highlight></codeline>
<codeline lineno="416"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>currentProgress,</highlight></codeline>
<codeline lineno="417"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>maximumProgressAvailableToProject)</highlight></codeline>
<codeline lineno="418"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!await<sp/>_fileSystemProvider.File.ExistsAsync(dotNetProject.AbsolutePath.Value))</highlight></codeline>
<codeline lineno="420"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;<sp/>//<sp/>TODO:<sp/>This<sp/>can<sp/>still<sp/>cause<sp/>a<sp/>race<sp/>condition<sp/>exception<sp/>if<sp/>the<sp/>file<sp/>is<sp/>removed<sp/>before<sp/>the<sp/>next<sp/>line<sp/>runs.</highlight></codeline>
<codeline lineno="421"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="422"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>parentDirectory<sp/>=<sp/>dotNetProject.AbsolutePath.ParentDirectory;</highlight></codeline>
<codeline lineno="423"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(parentDirectory<sp/>is<sp/>null)</highlight></codeline>
<codeline lineno="424"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="425"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="426"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>startingAbsolutePathForSearch<sp/>=<sp/>parentDirectory.Value;</highlight></codeline>
<codeline lineno="427"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>discoveredFileList<sp/>=<sp/>new<sp/>List&lt;string&gt;();</highlight></codeline>
<codeline lineno="428"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="429"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progressThrottle.Run(_<sp/>=&gt;<sp/></highlight></codeline>
<codeline lineno="430"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progressBarModel.SetProgress(null,<sp/>null,<sp/>&quot;&quot;discovering<sp/>files&quot;&quot;);</highlight></codeline>
<codeline lineno="432"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="433"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="434"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="435"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>DiscoverFilesRecursively(startingAbsolutePathForSearch,<sp/>discoveredFileList,<sp/>true).ConfigureAwait(false);</highlight></codeline>
<codeline lineno="436"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="437"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>ParseClassesInProject(</highlight></codeline>
<codeline lineno="438"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dotNetProject,</highlight></codeline>
<codeline lineno="439"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progressBarModel,</highlight></codeline>
<codeline lineno="440"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progressThrottle,</highlight></codeline>
<codeline lineno="441"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentProgress,</highlight></codeline>
<codeline lineno="442"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maximumProgressAvailableToProject,</highlight></codeline>
<codeline lineno="443"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>discoveredFileList);</highlight></codeline>
<codeline lineno="444"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="445"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>async<sp/>Task<sp/>DiscoverFilesRecursively(string<sp/>directoryPathParent,<sp/>List&lt;string&gt;<sp/>discoveredFileList,<sp/>bool<sp/>isFirstInvocation)</highlight></codeline>
<codeline lineno="446"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>directoryPathChildList<sp/>=<sp/>await<sp/>_fileSystemProvider.Directory.GetDirectoriesAsync(</highlight></codeline>
<codeline lineno="448"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directoryPathParent,</highlight></codeline>
<codeline lineno="449"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CancellationToken.None)</highlight></codeline>
<codeline lineno="450"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ConfigureAwait(false);</highlight></codeline>
<codeline lineno="451"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="452"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>filePathChildList<sp/>=<sp/>await<sp/>_fileSystemProvider.Directory.GetFilesAsync(</highlight></codeline>
<codeline lineno="453"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directoryPathParent,</highlight></codeline>
<codeline lineno="454"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CancellationToken.None)</highlight></codeline>
<codeline lineno="455"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ConfigureAwait(false);</highlight></codeline>
<codeline lineno="456"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="457"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foreach<sp/>(var<sp/>filePathChild<sp/>in<sp/>filePathChildList)</highlight></codeline>
<codeline lineno="458"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(filePathChild.EndsWith(&quot;&quot;.cs&quot;&quot;))</highlight></codeline>
<codeline lineno="460"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>discoveredFileList.Add(filePathChild);</highlight></codeline>
<codeline lineno="461"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="463"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//var<sp/>progressMessage<sp/>=<sp/>progressBarModel.Message<sp/>??<sp/>string.Empty;</highlight></codeline>
<codeline lineno="464"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="465"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foreach<sp/>(var<sp/>directoryPathChild<sp/>in<sp/>directoryPathChildList)</highlight></codeline>
<codeline lineno="466"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(directoryPathChild.Contains(&quot;&quot;.git&quot;&quot;)<sp/>||</highlight></codeline>
<codeline lineno="468"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directoryPathChild.Contains(&quot;&quot;.vs&quot;&quot;)<sp/>||</highlight></codeline>
<codeline lineno="469"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directoryPathChild.Contains(&quot;&quot;.vscode&quot;&quot;)<sp/>||</highlight></codeline>
<codeline lineno="470"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directoryPathChild.Contains(&quot;&quot;.idea&quot;&quot;)<sp/>||</highlight></codeline>
<codeline lineno="471"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directoryPathChild.Contains(&quot;&quot;bin&quot;&quot;)<sp/>||</highlight></codeline>
<codeline lineno="472"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directoryPathChild.Contains(&quot;&quot;obj&quot;&quot;))</highlight></codeline>
<codeline lineno="473"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continue;</highlight></codeline>
<codeline lineno="475"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="477"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//if<sp/>(isFirstInvocation)</highlight></codeline>
<codeline lineno="478"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//{</highlight></codeline>
<codeline lineno="479"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>var<sp/>currentProgress<sp/>=<sp/>progressBarModel.GetProgress();</highlight></codeline>
<codeline lineno="480"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>progressThrottle.Run(_<sp/>=&gt;<sp/></highlight></codeline>
<codeline lineno="481"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>progressBarModel.SetProgress(currentProgress,<sp/>$&quot;&quot;{directoryPathChild}<sp/>&quot;&quot;<sp/>+<sp/>progressMessage);</highlight></codeline>
<codeline lineno="483"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="484"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>});</highlight></codeline>
<codeline lineno="485"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/></highlight></codeline>
<codeline lineno="486"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//}</highlight></codeline>
<codeline lineno="487"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="488"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>DiscoverFilesRecursively(directoryPathChild,<sp/>discoveredFileList,<sp/>isFirstInvocation:<sp/>false).ConfigureAwait(false);</highlight></codeline>
<codeline lineno="489"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="493"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>async<sp/>Task<sp/>ParseClassesInProject(</highlight></codeline>
<codeline lineno="494"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDotNetProject<sp/>dotNetProject,</highlight></codeline>
<codeline lineno="495"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProgressBarModel<sp/>progressBarModel,</highlight></codeline>
<codeline lineno="496"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Throttle<sp/>progressThrottle,</highlight></codeline>
<codeline lineno="497"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>currentProgress,</highlight></codeline>
<codeline lineno="498"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>maximumProgressAvailableToProject,</highlight></codeline>
<codeline lineno="499"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;string&gt;<sp/>discoveredFileList)</highlight></codeline>
<codeline lineno="500"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>fileParsedCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="502"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="503"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foreach<sp/>(var<sp/>file<sp/>in<sp/>discoveredFileList)</highlight></codeline>
<codeline lineno="504"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>fileAbsolutePath<sp/>=<sp/>_environmentProvider.AbsolutePathFactory(file,<sp/>false);</highlight></codeline>
<codeline lineno="506"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="507"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>progress<sp/>=<sp/>currentProgress<sp/>+<sp/>maximumProgressAvailableToProject<sp/>*<sp/>(fileParsedCount<sp/>/<sp/>(double)discoveredFileList.Count);</highlight></codeline>
<codeline lineno="508"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="509"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progressThrottle.Run(_<sp/>=&gt;<sp/></highlight></codeline>
<codeline lineno="510"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progressBarModel.SetProgress(</highlight></codeline>
<codeline lineno="512"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progress,</highlight></codeline>
<codeline lineno="513"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>null,</highlight></codeline>
<codeline lineno="514"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>$&quot;&quot;{fileParsedCount<sp/>+<sp/>1}/{discoveredFileList.Count}:<sp/>{fileAbsolutePath.NameWithExtension}&quot;&quot;);</highlight></codeline>
<codeline lineno="515"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="516"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="517"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="518"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>resourceUri<sp/>=<sp/>new<sp/>ResourceUri(file);</highlight></codeline>
<codeline lineno="519"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="520"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>registerModelArgs<sp/>=<sp/>new<sp/>RegisterModelArgs(resourceUri,<sp/>_serviceProvider)</highlight></codeline>
<codeline lineno="521"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShouldBlockUntilBackgroundTaskIsCompleted<sp/>=<sp/>true,</highlight></codeline>
<codeline lineno="523"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="524"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="525"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>_textEditorService.TextEditorConfig.RegisterModelFunc.Invoke(registerModelArgs)</highlight></codeline>
<codeline lineno="526"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ConfigureAwait(false);</highlight></codeline>
<codeline lineno="527"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="528"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileParsedCount++;</highlight></codeline>
<codeline lineno="529"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="532"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>public<sp/>void<sp/>SetDotNetSolutionTreeView(Key&lt;DotNetSolutionModel&gt;<sp/>dotNetSolutionModelKey)</highlight></codeline>
<codeline lineno="533"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_backgroundTaskService.Enqueue(</highlight></codeline>
<codeline lineno="535"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Key&lt;IBackgroundTask&gt;.NewKey(),</highlight></codeline>
<codeline lineno="536"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContinuousBackgroundTaskWorker.GetQueueKey(),</highlight></codeline>
<codeline lineno="537"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;Set<sp/>.NET<sp/>Solution<sp/>TreeView&quot;&quot;,</highlight></codeline>
<codeline lineno="538"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>async<sp/>()<sp/>=&gt;<sp/>await<sp/>SetDotNetSolutionTreeViewAsync(dotNetSolutionModelKey).ConfigureAwait(false));</highlight></codeline>
<codeline lineno="539"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="541"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>async<sp/>Task<sp/>SetDotNetSolutionTreeViewAsync(Key&lt;DotNetSolutionModel&gt;<sp/>dotNetSolutionModelKey)</highlight></codeline>
<codeline lineno="542"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>dotNetSolutionState<sp/>=<sp/>_dotNetSolutionStateWrap.Value;</highlight></codeline>
<codeline lineno="544"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="545"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>dotNetSolutionModel<sp/>=<sp/>dotNetSolutionState.DotNetSolutionsList.FirstOrDefault(</highlight></codeline>
<codeline lineno="546"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=&gt;<sp/>x.Key<sp/>==<sp/>dotNetSolutionModelKey);</highlight></codeline>
<codeline lineno="547"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="548"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(dotNetSolutionModel<sp/>is<sp/>null)</highlight></codeline>
<codeline lineno="549"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="550"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="551"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>rootNode<sp/>=<sp/>new<sp/>TreeViewSolution(</highlight></codeline>
<codeline lineno="552"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dotNetSolutionModel,</highlight></codeline>
<codeline lineno="553"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dotNetComponentRenderers,</highlight></codeline>
<codeline lineno="554"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_ideComponentRenderers,</highlight></codeline>
<codeline lineno="555"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_commonComponentRenderers,</highlight></codeline>
<codeline lineno="556"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_fileSystemProvider,</highlight></codeline>
<codeline lineno="557"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_environmentProvider,</highlight></codeline>
<codeline lineno="558"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>true,</highlight></codeline>
<codeline lineno="559"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>true);</highlight></codeline>
<codeline lineno="560"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="561"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>rootNode.LoadChildListAsync().ConfigureAwait(false);</highlight></codeline>
<codeline lineno="562"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="563"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!_treeViewService.TryGetTreeViewContainer(DotNetSolutionState.TreeViewSolutionExplorerStateKey,<sp/>out<sp/>_))</highlight></codeline>
<codeline lineno="564"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_treeViewService.RegisterTreeViewContainer(new<sp/>TreeViewContainer(</highlight></codeline>
<codeline lineno="566"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DotNetSolutionState.TreeViewSolutionExplorerStateKey,</highlight></codeline>
<codeline lineno="567"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNode,</highlight></codeline>
<codeline lineno="568"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>TreeViewNoType[]<sp/>{<sp/>rootNode<sp/>}.ToImmutableList()));</highlight></codeline>
<codeline lineno="569"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="571"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_treeViewService.SetRoot(DotNetSolutionState.TreeViewSolutionExplorerStateKey,<sp/>rootNode);</highlight></codeline>
<codeline lineno="573"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="574"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_treeViewService.SetActiveNode(</highlight></codeline>
<codeline lineno="575"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DotNetSolutionState.TreeViewSolutionExplorerStateKey,</highlight></codeline>
<codeline lineno="576"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNode,</highlight></codeline>
<codeline lineno="577"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>true,</highlight></codeline>
<codeline lineno="578"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>false);</highlight></codeline>
<codeline lineno="579"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="581"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(dotNetSolutionModel<sp/>is<sp/>null)</highlight></codeline>
<codeline lineno="582"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="583"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="584"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dispatcher.Dispatch(ConstructModelReplacement(</highlight></codeline>
<codeline lineno="585"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dotNetSolutionModel.Key,</highlight></codeline>
<codeline lineno="586"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dotNetSolutionModel));</highlight></codeline>
<codeline lineno="587"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="589"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>void<sp/>RegisterStartupControl(IDotNetProject<sp/>project)</highlight></codeline>
<codeline lineno="590"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dispatcher.Dispatch(new<sp/>StartupControlState.RegisterStartupControlAction(</highlight></codeline>
<codeline lineno="592"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>StartupControlModel(</highlight></codeline>
<codeline lineno="593"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Key&lt;IStartupControlModel&gt;.NewKey(),</highlight></codeline>
<codeline lineno="594"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>project.DisplayName,</highlight></codeline>
<codeline lineno="595"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>project.AbsolutePath.Value,</highlight></codeline>
<codeline lineno="596"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>project.AbsolutePath,</highlight></codeline>
<codeline lineno="597"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>null,</highlight></codeline>
<codeline lineno="598"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>null,</highlight></codeline>
<codeline lineno="599"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startupControlModel<sp/>=&gt;<sp/>StartButtonOnClick(startupControlModel,<sp/>project),</highlight></codeline>
<codeline lineno="600"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StopButtonOnClick)));</highlight></codeline>
<codeline lineno="601"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="603"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>Task<sp/>StartButtonOnClick(IStartupControlModel<sp/>interfaceStartupControlModel,<sp/>IDotNetProject<sp/>project)</highlight></codeline>
<codeline lineno="604"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>startupControlModel<sp/>=<sp/>(StartupControlModel)interfaceStartupControlModel;</highlight></codeline>
<codeline lineno="606"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="607"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>ancestorDirectory<sp/>=<sp/>project.AbsolutePath.ParentDirectory;</highlight></codeline>
<codeline lineno="608"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="609"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ancestorDirectory<sp/>is<sp/>null)</highlight></codeline>
<codeline lineno="610"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="611"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="612"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>formattedCommand<sp/>=<sp/>DotNetCliCommandFormatter.FormatStartProjectWithoutDebugging(</highlight></codeline>
<codeline lineno="613"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>project.AbsolutePath);</highlight></codeline>
<codeline lineno="614"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="615"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>terminalCommandRequest<sp/>=<sp/>new<sp/>TerminalCommandRequest(</highlight></codeline>
<codeline lineno="616"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formattedCommand.Value,</highlight></codeline>
<codeline lineno="617"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ancestorDirectory.Value,</highlight></codeline>
<codeline lineno="618"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_newDotNetSolutionTerminalCommandRequestKey)</highlight></codeline>
<codeline lineno="619"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BeginWithFunc<sp/>=<sp/>parsedCommand<sp/>=&gt;</highlight></codeline>
<codeline lineno="621"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dotNetCliOutputParser.ParseOutputEntireDotNetRun(</highlight></codeline>
<codeline lineno="623"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string.Empty);</highlight></codeline>
<codeline lineno="624"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="625"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="626"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="627"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContinueWithFunc<sp/>=<sp/>parsedCommand<sp/>=&gt;</highlight></codeline>
<codeline lineno="628"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startupControlModel.ExecutingTerminalCommandRequest<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="630"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dispatcher.Dispatch(new<sp/>StartupControlState.StateChangedAction());</highlight></codeline>
<codeline lineno="631"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="632"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dotNetCliOutputParser.ParseOutputEntireDotNetRun(</highlight></codeline>
<codeline lineno="633"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parsedCommand.OutputCache.ToString());</highlight></codeline>
<codeline lineno="634"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="635"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="636"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="638"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="639"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startupControlModel.ExecutingTerminalCommandRequest<sp/>=<sp/>terminalCommandRequest;</highlight></codeline>
<codeline lineno="640"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="641"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_terminalStateWrap.Value.TerminalMap[TerminalFacts.EXECUTION_KEY].EnqueueCommand(terminalCommandRequest);</highlight></codeline>
<codeline lineno="642"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="643"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="645"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>Task<sp/>StopButtonOnClick(IStartupControlModel<sp/>interfaceStartupControlModel)</highlight></codeline>
<codeline lineno="646"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>startupControlModel<sp/>=<sp/>(StartupControlModel)interfaceStartupControlModel;</highlight></codeline>
<codeline lineno="648"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="649"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_terminalStateWrap.Value.TerminalMap[TerminalFacts.EXECUTION_KEY].KillProcess();</highlight></codeline>
<codeline lineno="650"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startupControlModel.ExecutingTerminalCommandRequest<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="651"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="652"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dispatcher.Dispatch(new<sp/>StartupControlState.StateChangedAction());</highlight></codeline>
<codeline lineno="653"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="654"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="656"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>public<sp/>void<sp/>Website_AddExistingProjectToSolution(</highlight></codeline>
<codeline lineno="657"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Key&lt;DotNetSolutionModel&gt;<sp/>dotNetSolutionModelKey,</highlight></codeline>
<codeline lineno="658"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>projectTemplateShortName,</highlight></codeline>
<codeline lineno="659"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>cSharpProjectName,</highlight></codeline>
<codeline lineno="660"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IAbsolutePath<sp/>cSharpProjectAbsolutePath)</highlight></codeline>
<codeline lineno="661"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_backgroundTaskService.Enqueue(</highlight></codeline>
<codeline lineno="663"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Key&lt;IBackgroundTask&gt;.NewKey(),</highlight></codeline>
<codeline lineno="664"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContinuousBackgroundTaskWorker.GetQueueKey(),</highlight></codeline>
<codeline lineno="665"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;Add<sp/>Existing-Project<sp/>To<sp/>Solution&quot;&quot;,</highlight></codeline>
<codeline lineno="666"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>async<sp/>()<sp/>=&gt;<sp/>await<sp/>Website_AddExistingProjectToSolutionAsync(</highlight></codeline>
<codeline lineno="667"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dotNetSolutionModelKey,</highlight></codeline>
<codeline lineno="668"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projectTemplateShortName,</highlight></codeline>
<codeline lineno="669"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cSharpProjectName,</highlight></codeline>
<codeline lineno="670"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cSharpProjectAbsolutePath));</highlight></codeline>
<codeline lineno="671"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="673"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>private<sp/>async<sp/>Task<sp/>Website_AddExistingProjectToSolutionAsync(</highlight></codeline>
<codeline lineno="674"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Key&lt;DotNetSolutionModel&gt;<sp/>dotNetSolutionModelKey,</highlight></codeline>
<codeline lineno="675"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>projectTemplateShortName,</highlight></codeline>
<codeline lineno="676"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>cSharpProjectName,</highlight></codeline>
<codeline lineno="677"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IAbsolutePath<sp/>cSharpProjectAbsolutePath)</highlight></codeline>
<codeline lineno="678"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>inDotNetSolutionModel<sp/>=<sp/>_dotNetSolutionStateWrap.Value.DotNetSolutionsList.FirstOrDefault(</highlight></codeline>
<codeline lineno="680"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=&gt;<sp/>x.Key<sp/>==<sp/>dotNetSolutionModelKey);</highlight></codeline>
<codeline lineno="681"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="682"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(inDotNetSolutionModel<sp/>is<sp/>null)</highlight></codeline>
<codeline lineno="683"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="684"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="685"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>projectTypeGuid<sp/>=<sp/>WebsiteProjectTemplateFacts.GetProjectTypeGuid(</highlight></codeline>
<codeline lineno="686"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projectTemplateShortName);</highlight></codeline>
<codeline lineno="687"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="688"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>relativePathFromSlnToProject<sp/>=<sp/>PathHelper.GetRelativeFromTwoAbsolutes(</highlight></codeline>
<codeline lineno="689"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inDotNetSolutionModel.NamespacePath.AbsolutePath,</highlight></codeline>
<codeline lineno="690"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cSharpProjectAbsolutePath,</highlight></codeline>
<codeline lineno="691"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_environmentProvider);</highlight></codeline>
<codeline lineno="692"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="693"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>projectIdGuid<sp/>=<sp/>Guid.NewGuid();</highlight></codeline>
<codeline lineno="694"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="695"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>dotNetSolutionModelBuilder<sp/>=<sp/>new<sp/>DotNetSolutionModelBuilder(inDotNetSolutionModel);</highlight></codeline>
<codeline lineno="696"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="697"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>cSharpProject<sp/>=<sp/>new<sp/>CSharpProjectModel(</highlight></codeline>
<codeline lineno="698"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cSharpProjectName,</highlight></codeline>
<codeline lineno="699"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projectTypeGuid,</highlight></codeline>
<codeline lineno="700"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relativePathFromSlnToProject,</highlight></codeline>
<codeline lineno="701"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projectIdGuid,</highlight></codeline>
<codeline lineno="702"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>TODO:<sp/>&apos;openAssociatedGroupToken&apos;<sp/>gets<sp/>set<sp/>when<sp/>&apos;AddDotNetProject(...)&apos;<sp/>is<sp/>ran,<sp/>which<sp/>is<sp/>hacky<sp/>and<sp/>should<sp/>be<sp/>changed.<sp/>Until<sp/>then<sp/>passing<sp/>in<sp/>&apos;null!&apos;</highlight></codeline>
<codeline lineno="703"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>null!,</highlight></codeline>
<codeline lineno="704"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>null,</highlight></codeline>
<codeline lineno="705"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cSharpProjectAbsolutePath);</highlight></codeline>
<codeline lineno="706"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="707"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dotNetSolutionModelBuilder.AddDotNetProject(cSharpProject,<sp/>_environmentProvider);</highlight></codeline>
<codeline lineno="708"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="709"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>outDotNetSolutionModel<sp/>=<sp/>dotNetSolutionModelBuilder.Build();</highlight></codeline>
<codeline lineno="710"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="711"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>_fileSystemProvider.File.WriteAllTextAsync(</highlight></codeline>
<codeline lineno="712"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outDotNetSolutionModel.NamespacePath.AbsolutePath.Value,</highlight></codeline>
<codeline lineno="713"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outDotNetSolutionModel.SolutionFileContents)</highlight></codeline>
<codeline lineno="714"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ConfigureAwait(false);</highlight></codeline>
<codeline lineno="715"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="716"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>solutionTextEditorModel<sp/>=<sp/>_textEditorService.ModelApi.GetOrDefault(</highlight></codeline>
<codeline lineno="717"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>ResourceUri(inDotNetSolutionModel.NamespacePath.AbsolutePath.Value));</highlight></codeline>
<codeline lineno="718"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="719"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(solutionTextEditorModel<sp/>is<sp/>not<sp/>null)</highlight></codeline>
<codeline lineno="720"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_textEditorService.PostUnique(</highlight></codeline>
<codeline lineno="722"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nameof(Website_AddExistingProjectToSolutionAsync),</highlight></codeline>
<codeline lineno="723"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>editContext<sp/>=&gt;</highlight></codeline>
<codeline lineno="724"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>modelModifier<sp/>=<sp/>editContext.GetModelModifier(solutionTextEditorModel.ResourceUri);</highlight></codeline>
<codeline lineno="726"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(modelModifier<sp/>is<sp/>null)</highlight></codeline>
<codeline lineno="727"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="728"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="729"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_textEditorService.ModelApi.Reload(</highlight></codeline>
<codeline lineno="730"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>editContext,</highlight></codeline>
<codeline lineno="731"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modelModifier,</highlight></codeline>
<codeline lineno="732"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outDotNetSolutionModel.SolutionFileContents,</highlight></codeline>
<codeline lineno="733"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DateTime.UtcNow);</highlight></codeline>
<codeline lineno="734"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Task.CompletedTask;</highlight></codeline>
<codeline lineno="735"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="736"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="738"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>TODO:<sp/>Putting<sp/>a<sp/>hack<sp/>for<sp/>now<sp/>to<sp/>overwrite<sp/>if<sp/>somehow<sp/>model<sp/>was<sp/>registered<sp/>already</highlight></codeline>
<codeline lineno="739"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dispatcher.Dispatch(ConstructModelReplacement(</highlight></codeline>
<codeline lineno="740"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outDotNetSolutionModel.Key,</highlight></codeline>
<codeline lineno="741"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outDotNetSolutionModel));</highlight></codeline>
<codeline lineno="742"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="743"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>await<sp/>SetDotNetSolutionTreeViewAsync(outDotNetSolutionModel.Key).ConfigureAwait(false);</highlight></codeline>
<codeline lineno="744"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="stringliteral"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>interface<sp/>IWithAction</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>record<sp/>WithAction(Func&lt;DotNetSolutionState,<sp/>DotNetSolutionState&gt;<sp/>WithFunc)</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>IWithAction;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>public<sp/>static<sp/>IWithAction<sp/>ConstructModelReplacement(</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Key&lt;DotNetSolutionModel&gt;<sp/>dotNetSolutionModelKey,</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DotNetSolutionModel<sp/>outDotNetSolutionModel)</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>new<sp/>WithAction(dotNetSolutionState<sp/>=&gt;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>indexOfSln<sp/>=<sp/>dotNetSolutionState.DotNetSolutionsList.FindIndex(</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sln<sp/>=&gt;<sp/>sln.Key<sp/>==<sp/>dotNetSolutionModelKey);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(indexOfSln<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>dotNetSolutionState;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>outDotNetSolutions<sp/>=<sp/>dotNetSolutionState.DotNetSolutionsList.SetItem(</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexOfSln,</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outDotNetSolutionModel);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>dotNetSolutionState<sp/>with</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DotNetSolutionsList<sp/>=<sp/>outDotNetSolutions</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal">&quot;;</highlight></codeline>
<codeline lineno="779"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Source/Tests/TextEditor/Adhoc/PartitionTests.Data.cs"/>
  </compounddef>
</doxygen>
