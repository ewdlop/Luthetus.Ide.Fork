<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.15.0" xml:lang="en-US">
  <compounddef id="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals_1_1_parse_others" kind="class" language="C#" prot="public">
    <compoundname>Luthetus::CompilerServices::CSharp::ParserCase::Internals::ParseOthers</compoundname>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals_1_1_parse_others_1af9e2e2c0ba8fa3834a0b607674263383" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax" kindref="compound">ISyntax</ref></type>
        <definition>static ISyntax Luthetus.CompilerServices.CSharp.ParserCase.Internals.ParseOthers.HandleNamespaceIdentifier</definition>
        <argsstring>(CSharpParserModel model)</argsstring>
        <name>HandleNamespaceIdentifier</name>
        <qualifiedname>Luthetus.CompilerServices.CSharp.ParserCase.Internals.ParseOthers.HandleNamespaceIdentifier</qualifiedname>
        <param>
          <type><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_c_sharp_parser_model" kindref="compound">CSharpParserModel</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>TODO: Delete this method, to parse a namespace identifier one should be able to just invoke &apos;ParseExpression(...)&apos;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Lib/CompilerServices/CSharp/ParserCase/Internals/ParseOthers.cs" line="18" column="23" bodyfile="Source/Lib/CompilerServices/CSharp/ParserCase/Internals/ParseOthers.cs" bodystart="18" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals_1_1_parse_others_1ae038369fcab3aa263cb885c612f38930" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Luthetus.CompilerServices.CSharp.ParserCase.Internals.ParseOthers.StartStatement_Expression</definition>
        <argsstring>(CSharpParserModel model)</argsstring>
        <name>StartStatement_Expression</name>
        <qualifiedname>Luthetus.CompilerServices.CSharp.ParserCase.Internals.ParseOthers.StartStatement_Expression</qualifiedname>
        <param>
          <type><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_c_sharp_parser_model" kindref="compound">CSharpParserModel</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Lib/CompilerServices/CSharp/ParserCase/Internals/ParseOthers.cs" line="56" column="24" bodyfile="Source/Lib/CompilerServices/CSharp/ParserCase/Internals/ParseOthers.cs" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals_1_1_parse_others_1abe8057fe24131c533c6bb95bb62f715c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Luthetus.CompilerServices.CSharp.ParserCase.Internals.ParseOthers.TryParseExpression</definition>
        <argsstring>(SyntaxKind? syntaxKind, CSharpParserModel model, out IExpressionNode expressionNode)</argsstring>
        <name>TryParseExpression</name>
        <qualifiedname>Luthetus.CompilerServices.CSharp.ParserCase.Internals.ParseOthers.TryParseExpression</qualifiedname>
        <param>
          <type><ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b" kindref="member">SyntaxKind</ref>?</type>
          <declname>syntaxKind</declname>
        </param>
        <param>
          <type><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_c_sharp_parser_model" kindref="compound">CSharpParserModel</ref></type>
          <declname>model</declname>
        </param>
        <param>
          <type>out <ref refid="interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_97d7489c2c3077ac339153787f61d38f" kindref="compound">IExpressionNode</ref></type>
          <declname>expressionNode</declname>
        </param>
        <briefdescription>
<para>ParseExpression while expressionPrimary.SyntaxKind == syntaxKind. </para>
        </briefdescription>
        <detaileddescription>
<para>if (expressionPrimary.SyntaxKind != syntaxKind) model.TokenWalker.Backtrack() to either the previous loops tokenIndex where the syntax kinds did match.</para>
<para>Or, if they never matched then model.TokenWalker.Backtrack() to the tokenIndex that was had when this function was invoked.</para>
<para>Return true if a match was found, return false if NO match was found.</para>
<para><ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node" kindref="compound">TypeClauseNode</ref> code exists in the expression code. As a result, some statements need to read a <ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node" kindref="compound">TypeClauseNode</ref> by invoking &apos;ParseExpression(...)&apos;.</para>
<para>In order to &quot;short circut&quot; or &quot;force exit&quot; from the expression code back to the statement code, if the root primary expression is not equal to the model.ForceParseExpressionSyntaxKind then stop. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Lib/CompilerServices/CSharp/ParserCase/Internals/ParseOthers.cs" line="81" column="24" bodyfile="Source/Lib/CompilerServices/CSharp/ParserCase/Internals/ParseOthers.cs" bodystart="81" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals_1_1_parse_others_1a40ab61967af436342c063f839374f84b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Luthetus.CompilerServices.CSharp.ParserCase.Internals.ParseOthers.SyntaxIsEndDelimiter</definition>
        <argsstring>(SyntaxKind syntaxKind)</argsstring>
        <name>SyntaxIsEndDelimiter</name>
        <qualifiedname>Luthetus.CompilerServices.CSharp.ParserCase.Internals.ParseOthers.SyntaxIsEndDelimiter</qualifiedname>
        <param>
          <type><ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b" kindref="member">SyntaxKind</ref></type>
          <declname>syntaxKind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Lib/CompilerServices/CSharp/ParserCase/Internals/ParseOthers.cs" line="105" column="24" bodyfile="Source/Lib/CompilerServices/CSharp/ParserCase/Internals/ParseOthers.cs" bodystart="105" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals_1_1_parse_others_1a3416a052368a4d4c829649bac516c2ab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_97d7489c2c3077ac339153787f61d38f" kindref="compound">IExpressionNode</ref></type>
        <definition>static IExpressionNode Luthetus.CompilerServices.CSharp.ParserCase.Internals.ParseOthers.ParseExpression</definition>
        <argsstring>(CSharpParserModel model)</argsstring>
        <name>ParseExpression</name>
        <qualifiedname>Luthetus.CompilerServices.CSharp.ParserCase.Internals.ParseOthers.ParseExpression</qualifiedname>
        <param>
          <type><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_c_sharp_parser_model" kindref="compound">CSharpParserModel</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Invoke this method when &apos;model.TokenWalker.Current&apos; is the first token of the expression to be parsed. </para>
        </briefdescription>
        <detaileddescription>
<para>In the case where the first token of the expression had already been &apos;Consume()&apos;-ed then &apos;model.TokenWalker.Backtrack();&apos; might be of use in order to move the model.TokenWalker backwards prior to invoking this method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Lib/CompilerServices/CSharp/ParserCase/Internals/ParseOthers.cs" line="130" column="31" bodyfile="Source/Lib/CompilerServices/CSharp/ParserCase/Internals/ParseOthers.cs" bodystart="130" bodyend="270"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals_1_1_parse_others_1a146b720f011f97a5c8380a35958bc18f" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_97d7489c2c3077ac339153787f61d38f" kindref="compound">IExpressionNode</ref></type>
        <definition>static IExpressionNode Luthetus.CompilerServices.CSharp.ParserCase.Internals.ParseOthers.BubbleUpParseExpression</definition>
        <argsstring>(int indexTriggered, IExpressionNode expressionPrimary, CSharpParserModel model)</argsstring>
        <name>BubbleUpParseExpression</name>
        <qualifiedname>Luthetus.CompilerServices.CSharp.ParserCase.Internals.ParseOthers.BubbleUpParseExpression</qualifiedname>
        <param>
          <type>int</type>
          <declname>indexTriggered</declname>
        </param>
        <param>
          <type><ref refid="interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_97d7489c2c3077ac339153787f61d38f" kindref="compound">IExpressionNode</ref></type>
          <declname>expressionPrimary</declname>
        </param>
        <param>
          <type><ref refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_c_sharp_parser_model" kindref="compound">CSharpParserModel</ref></type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>&apos;BubbleUpParseExpression(i, expressionPrimary, model);&apos; </para>
        </briefdescription>
        <detaileddescription>
<para>This is to have SyntaxKind.StatementDelimiterToken break out of the expression. The parser is adding as the 0th item that &apos;SyntaxKind.StatementDelimiterToken&apos; returns the primary expression to be &apos;null&apos;.</para>
<para>One isn&apos;t supposed to deal with nulls here, instead using <ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_empty_expression_node" kindref="compound">EmptyExpressionNode</ref>. So, if delimiterExpressionTuple.ExpressionNode is null then this special case to break out of the expresion logic exists.</para>
<para>It needs to be part of the session.ShortCircuitList however, because if an expression uses &apos;SyntaxKind.StatementDelimiterToken&apos; in their expression, they can override this 0th index entry and have primary expression &quot;short circuit&quot; to their choosing and the loop will continue parsing more expressions.</para>
<para><ref refid="class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_lambda_expression_node" kindref="compound">LambdaExpressionNode</ref> for example, needs to override &apos;SyntaxKind.StatementDelimiterToken&apos;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Lib/CompilerServices/CSharp/ParserCase/Internals/ParseOthers.cs" line="291" column="36" bodyfile="Source/Lib/CompilerServices/CSharp/ParserCase/Internals/ParseOthers.cs" bodystart="291" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals_1_1_parse_others_1ab41c605a8f2c9d127a8f510b0c0c5d92" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Luthetus.CompilerServices.CSharp.ParserCase.Internals.ParseOthers.WriteExpressionList</definition>
        <argsstring>(List&lt;(SyntaxKind DelimiterSyntaxKind, IExpressionNode ExpressionNode)&gt; expressionList)</argsstring>
        <name>WriteExpressionList</name>
        <qualifiedname>Luthetus.CompilerServices.CSharp.ParserCase.Internals.ParseOthers.WriteExpressionList</qualifiedname>
        <param>
          <type>List&lt;(<ref refid="namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b" kindref="member">SyntaxKind</ref> DelimiterSyntaxKind, <ref refid="interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_97d7489c2c3077ac339153787f61d38f" kindref="compound">IExpressionNode</ref> ExpressionNode)&gt;</type>
          <declname>expressionList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Lib/CompilerServices/CSharp/ParserCase/Internals/ParseOthers.cs" line="335" column="25" bodyfile="Source/Lib/CompilerServices/CSharp/ParserCase/Internals/ParseOthers.cs" bodystart="335" bodyend="348"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Source/Lib/CompilerServices/CSharp/ParserCase/Internals/ParseOthers.cs" line="13" column="15" bodyfile="Source/Lib/CompilerServices/CSharp/ParserCase/Internals/ParseOthers.cs" bodystart="14" bodyend="349"/>
    <listofallmembers>
      <member refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals_1_1_parse_others_1a146b720f011f97a5c8380a35958bc18f" prot="private" virt="non-virtual"><scope>Luthetus::CompilerServices::CSharp::ParserCase::Internals::ParseOthers</scope><name>BubbleUpParseExpression</name></member>
      <member refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals_1_1_parse_others_1af9e2e2c0ba8fa3834a0b607674263383" prot="public" virt="non-virtual"><scope>Luthetus::CompilerServices::CSharp::ParserCase::Internals::ParseOthers</scope><name>HandleNamespaceIdentifier</name></member>
      <member refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals_1_1_parse_others_1a3416a052368a4d4c829649bac516c2ab" prot="public" virt="non-virtual"><scope>Luthetus::CompilerServices::CSharp::ParserCase::Internals::ParseOthers</scope><name>ParseExpression</name></member>
      <member refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals_1_1_parse_others_1ae038369fcab3aa263cb885c612f38930" prot="public" virt="non-virtual"><scope>Luthetus::CompilerServices::CSharp::ParserCase::Internals::ParseOthers</scope><name>StartStatement_Expression</name></member>
      <member refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals_1_1_parse_others_1a40ab61967af436342c063f839374f84b" prot="public" virt="non-virtual"><scope>Luthetus::CompilerServices::CSharp::ParserCase::Internals::ParseOthers</scope><name>SyntaxIsEndDelimiter</name></member>
      <member refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals_1_1_parse_others_1abe8057fe24131c533c6bb95bb62f715c" prot="public" virt="non-virtual"><scope>Luthetus::CompilerServices::CSharp::ParserCase::Internals::ParseOthers</scope><name>TryParseExpression</name></member>
      <member refid="class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals_1_1_parse_others_1ab41c605a8f2c9d127a8f510b0c0c5d92" prot="private" virt="non-virtual"><scope>Luthetus::CompilerServices::CSharp::ParserCase::Internals::ParseOthers</scope><name>WriteExpressionList</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
