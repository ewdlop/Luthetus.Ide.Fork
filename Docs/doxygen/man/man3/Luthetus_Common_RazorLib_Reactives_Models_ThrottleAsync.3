.TH "Luthetus.Common.RazorLib.Reactives.Models.ThrottleAsync" 3 "Version 1.0.0" "Luthetus.Ide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Luthetus.Common.RazorLib.Reactives.Models.ThrottleAsync \- \fBThrottleAsync\fP does not achieve the desired result\&. It blocks itself, and therefore is useless? I like the idea I had with a blocking background task\&. But it doesn't really extend here much, at least given how its currently written?  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBThrottleAsync\fP (TimeSpan throttleTimeSpan)"
.br
.ti -1c
.RI "Task \fBRunAsync\fP (Func< CancellationToken, Task > workItem)"
.br
.ti -1c
.RI "async Task \fBUntilIsEmpty\fP (TimeSpan? pollingTimeSpan=null, CancellationToken cancellationToken=default)"
.br
.RI "This method awaits the last task prior to returning\&.
.br

.br
\&. "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "TimeSpan \fBThrottleTimeSpan\fP\fR [get]\fP"
.br
.ti -1c
.RI "Stack< Func< CancellationToken, Task > > \fBWorkItemStack\fP = new()\fR [get, protected set]\fP"
.br
.ti -1c
.RI "Task \fBWorkItemTask\fP = Task\&.CompletedTask\fR [get, protected set]\fP"
.br
.ti -1c
.RI "bool \fBIsStoppingFurtherPushes\fP\fR [get]\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBThrottleAsync\fP does not achieve the desired result\&. It blocks itself, and therefore is useless? I like the idea I had with a blocking background task\&. But it doesn't really extend here much, at least given how its currently written? 

Okay, I see, \fBThrottleAsync\fP works SOLELY from the idea that you are using a fire and forget Task\&.Run and want to throttle the logic within the Task\&.Run at a top level\&. But you cannot use it inside a foreach loop because you are awaiting yourself\&.

.PP
In short \fBThrottleAsync\fP is actually useful\&.\&.\&. because it keeps two invocations of code running concurrently\&. Because one has to wait for the other to finish\&.

.PP
And that many Task\&.Run will cancel out to the most recent one\&. But it still seems quite asinine? 
.PP
Definition at line \fB20\fP of file \fBThrottleAsync\&.cs\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Luthetus\&.Common\&.RazorLib\&.Reactives\&.Models\&.ThrottleAsync\&.ThrottleAsync (TimeSpan throttleTimeSpan)"

.PP
Definition at line \fB24\fP of file \fBThrottleAsync\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "Task Luthetus\&.Common\&.RazorLib\&.Reactives\&.Models\&.ThrottleAsync\&.RunAsync (Func< CancellationToken, Task > workItem)"

.PP
Definition at line \fB34\fP of file \fBThrottleAsync\&.cs\fP\&.
.SS "async Task Luthetus\&.Common\&.RazorLib\&.Reactives\&.Models\&.ThrottleAsync\&.UntilIsEmpty (TimeSpan? pollingTimeSpan = \fRnull\fP, CancellationToken cancellationToken = \fRdefault\fP)"

.PP
This method awaits the last task prior to returning\&.
.br

.br
\&. This method does NOT prevent pushes while flushing\&. To do so, invoke StopFurtherPushes() prior to invoking this method\&.
.br

.br

.PP
The implementation of this method is a polling solution (as of this comment (2024-05-09))\&. 
.PP
Definition at line \fB79\fP of file \fBThrottleAsync\&.cs\fP\&.
.SH "Property Documentation"
.PP 
.SS "bool Luthetus\&.Common\&.RazorLib\&.Reactives\&.Models\&.ThrottleAsync\&.IsStoppingFurtherPushes\fR [get]\fP"

.PP
Definition at line \fB32\fP of file \fBThrottleAsync\&.cs\fP\&.
.SS "TimeSpan Luthetus\&.Common\&.RazorLib\&.Reactives\&.Models\&.ThrottleAsync\&.ThrottleTimeSpan\fR [get]\fP"

.PP
Definition at line \fB29\fP of file \fBThrottleAsync\&.cs\fP\&.
.SS "Stack<Func<CancellationToken, Task> > Luthetus\&.Common\&.RazorLib\&.Reactives\&.Models\&.ThrottleAsync\&.WorkItemStack = new()\fR [get]\fP, \fR [protected set]\fP"

.PP
Definition at line \fB30\fP of file \fBThrottleAsync\&.cs\fP\&.
.SS "Task Luthetus\&.Common\&.RazorLib\&.Reactives\&.Models\&.ThrottleAsync\&.WorkItemTask = Task\&.CompletedTask\fR [get]\fP, \fR [protected set]\fP"

.PP
Definition at line \fB31\fP of file \fBThrottleAsync\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Luthetus\&.Ide from the source code\&.
