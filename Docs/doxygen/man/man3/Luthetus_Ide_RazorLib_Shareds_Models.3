.TH "Luthetus.Ide.RazorLib.Shareds.Models" 3 "Version 1.0.0" "Luthetus.Ide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Luthetus.Ide.RazorLib.Shareds.Models
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBBackgroundTaskDialogModel\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "record \fBFooterJustifyEndComponent\fP (Key< FooterJustifyEndComponent > Key, Type ComponentType, Dictionary< string, object?>? ComponentParameterMap)"
.br
.RI "A RenderFragment would be more optimized than rendering a DynamicComponent\&. "
.in -1c
.SH "Function Documentation"
.PP 
.SS "record Luthetus\&.Ide\&.RazorLib\&.Shareds\&.Models\&.FooterJustifyEndComponent (Key< FooterJustifyEndComponent > Key, Type ComponentType, Dictionary< string, object?>? ComponentParameterMap)"

.PP
A RenderFragment would be more optimized than rendering a DynamicComponent\&. However, there are various issues relating to UI events and focus when using a RenderFragment (focus refers to HTML focus being lost on re-render if the focus is on an HTML element within the RenderFragment)\&.

.PP
If a RenderFragment renders a component, and the inner component is what has focus, will re-rendering the RenderFragment cause the HTML focus to be lost? This is presumed to be true, but how is that [Parameter] RenderFragment ChildContent isn't an issue if this is the case?

.PP
There shouldn't be that many icons rendered via this class\&. So, we can just use the DynamicComponent way without concern, but the question should be answered as to if a RenderFragment would cause issues here\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Luthetus\&.Ide from the source code\&.
