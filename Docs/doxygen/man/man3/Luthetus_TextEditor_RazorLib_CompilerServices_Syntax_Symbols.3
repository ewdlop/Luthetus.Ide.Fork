.TH "Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Symbols" 3 "Version 1.0.0" "Luthetus.Ide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Symbols
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBConstructorSymbol\fP"
.br
.ti -1c
.RI "struct \fBFieldSymbol\fP"
.br
.ti -1c
.RI "struct \fBFunctionSymbol\fP"
.br
.ti -1c
.RI "struct \fBInjectedLanguageComponentSymbol\fP"
.br
.ti -1c
.RI "interface \fBISymbol\fP"
.br
.ti -1c
.RI "struct \fBLambdaSymbol\fP"
.br
.ti -1c
.RI "struct \fBNamespaceSymbol\fP"
.br
.ti -1c
.RI "struct \fBOnClickSymbol\fP"
.br
.RI "TODO: This type should be changed\&. It is being made to permit simple 'onclick' markers\&.\&.\&. \&.\&.\&.but its not quite a 'Symbol'\&. | Just happens to be the case that a symbol can act as a marker for some "event like thing" so it works to have it here for now\&. | The main issue is that the Symbol instances will apply syntax highlighting\&. | For this '\fBOnClickSymbol\fP' we would preferably not apply any syntax highlighting\&. | For example: "cd \&.\&." I want to syntax highlight 'cd' as the target file path, but NOT syntax highlight the arguments '\&.\&.' | If I use a symbol to syntax highlight 'cd', then it might be overridden by the '\fBOnClickSymbol\fP' of which is not supposed to alter the syntax highlighting\&. (it depends on the order that the symbols are applied)\&. "
.ti -1c
.RI "struct \fBPropertySymbol\fP"
.br
.ti -1c
.RI "struct \fBSourceFileSymbol\fP"
.br
.ti -1c
.RI "struct \fBStringInterpolationSymbol\fP"
.br
.ti -1c
.RI "struct \fBStringVerbatimSymbol\fP"
.br
.ti -1c
.RI "class \fBSymbolReference\fP"
.br
.ti -1c
.RI "struct \fBTypeSymbol\fP"
.br
.ti -1c
.RI "struct \fBVariableSymbol\fP"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for Luthetus\&.Ide from the source code\&.
