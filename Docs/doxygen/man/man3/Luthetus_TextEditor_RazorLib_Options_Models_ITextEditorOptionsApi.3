.TH "Luthetus.TextEditor.RazorLib.Options.Models.ITextEditorOptionsApi" 3 "Version 1.0.0" "Luthetus.Ide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Luthetus.TextEditor.RazorLib.Options.Models.ITextEditorOptionsApi
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBLuthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.TextEditorOptionsApi\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBShowSettingsDialog\fP (bool? isResizableOverride=null, string? cssClassString=null)"
.br
.ti -1c
.RI "void \fBShowFindAllDialog\fP (bool? isResizableOverride=null, string? cssClassString=null)"
.br
.ti -1c
.RI "void \fBSetCursorWidth\fP (double cursorWidthInPixels, bool updateStorage=true)"
.br
.ti -1c
.RI "void \fBSetFontFamily\fP (string? fontFamily, bool updateStorage=true)"
.br
.ti -1c
.RI "void \fBSetFontSize\fP (int fontSizeInPixels, bool updateStorage=true)"
.br
.ti -1c
.RI "void \fBSetHeight\fP (int? heightInPixels, bool updateStorage=true)"
.br
.ti -1c
.RI "void \fBSetKeymap\fP (\fBKeymap\fP keymap, bool updateStorage=true)"
.br
.ti -1c
.RI "void \fBSetShowNewlines\fP (bool showNewlines, bool updateStorage=true)"
.br
.ti -1c
.RI "void \fBSetUseMonospaceOptimizations\fP (bool useMonospaceOptimizations, bool updateStorage=true)"
.br
.ti -1c
.RI "void \fBSetShowWhitespace\fP (bool showWhitespace, bool updateStorage=true)"
.br
.ti -1c
.RI "void \fBSetTheme\fP (\fBThemeRecord\fP theme, bool updateStorage=true)"
.br
.RI "This is setting the \fBTextEditor\fP's theme specifically\&. This is not to be confused with the AppOptions Themes which get applied at an application level\&. 
.br

.br
 This allows for a "DarkTheme-Application" that has a "LightTheme-TextEditor"\&. "
.ti -1c
.RI "void \fBSetRenderStateKey\fP (Key< \fBRenderState\fP > renderStateKey)"
.br
.ti -1c
.RI "Task \fBSetFromLocalStorageAsync\fP ()"
.br
.ti -1c
.RI "void \fBWriteToStorage\fP ()"
.br
.ti -1c
.RI "\fBTextEditorOptions\fP \fBGetOptions\fP ()"
.br
.RI "One should store the result of invoking this method in a variable, then reference that variable\&. If one continually invokes this, there is no guarantee that the data had not changed since the previous invocation\&. "
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB8\fP of file \fBITextEditorOptionsApi\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBTextEditorOptions\fP Luthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.ITextEditorOptionsApi\&.GetOptions ()"

.PP
One should store the result of invoking this method in a variable, then reference that variable\&. If one continually invokes this, there is no guarantee that the data had not changed since the previous invocation\&. 
.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.TextEditorOptionsApi\fP\&.
.SS "void Luthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.ITextEditorOptionsApi\&.SetCursorWidth (double cursorWidthInPixels, bool updateStorage = \fRtrue\fP)"

.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.TextEditorOptionsApi\fP\&.
.SS "void Luthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.ITextEditorOptionsApi\&.SetFontFamily (string? fontFamily, bool updateStorage = \fRtrue\fP)"

.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.TextEditorOptionsApi\fP\&.
.SS "void Luthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.ITextEditorOptionsApi\&.SetFontSize (int fontSizeInPixels, bool updateStorage = \fRtrue\fP)"

.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.TextEditorOptionsApi\fP\&.
.SS "Task Luthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.ITextEditorOptionsApi\&.SetFromLocalStorageAsync ()"

.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.TextEditorOptionsApi\fP\&.
.SS "void Luthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.ITextEditorOptionsApi\&.SetHeight (int? heightInPixels, bool updateStorage = \fRtrue\fP)"

.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.TextEditorOptionsApi\fP\&.
.SS "void Luthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.ITextEditorOptionsApi\&.SetKeymap (\fBKeymap\fP keymap, bool updateStorage = \fRtrue\fP)"

.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.TextEditorOptionsApi\fP\&.
.SS "void Luthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.ITextEditorOptionsApi\&.SetRenderStateKey (Key< \fBRenderState\fP > renderStateKey)"

.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.TextEditorOptionsApi\fP\&.
.SS "void Luthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.ITextEditorOptionsApi\&.SetShowNewlines (bool showNewlines, bool updateStorage = \fRtrue\fP)"

.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.TextEditorOptionsApi\fP\&.
.SS "void Luthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.ITextEditorOptionsApi\&.SetShowWhitespace (bool showWhitespace, bool updateStorage = \fRtrue\fP)"

.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.TextEditorOptionsApi\fP\&.
.SS "void Luthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.ITextEditorOptionsApi\&.SetTheme (\fBThemeRecord\fP theme, bool updateStorage = \fRtrue\fP)"

.PP
This is setting the \fBTextEditor\fP's theme specifically\&. This is not to be confused with the AppOptions Themes which get applied at an application level\&. 
.br

.br
 This allows for a "DarkTheme-Application" that has a "LightTheme-TextEditor"\&. 
.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.TextEditorOptionsApi\fP\&.
.SS "void Luthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.ITextEditorOptionsApi\&.SetUseMonospaceOptimizations (bool useMonospaceOptimizations, bool updateStorage = \fRtrue\fP)"

.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.TextEditorOptionsApi\fP\&.
.SS "void Luthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.ITextEditorOptionsApi\&.ShowFindAllDialog (bool? isResizableOverride = \fRnull\fP, string? cssClassString = \fRnull\fP)"

.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.TextEditorOptionsApi\fP\&.
.SS "void Luthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.ITextEditorOptionsApi\&.ShowSettingsDialog (bool? isResizableOverride = \fRnull\fP, string? cssClassString = \fRnull\fP)"

.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.TextEditorOptionsApi\fP\&.
.SS "void Luthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.ITextEditorOptionsApi\&.WriteToStorage ()"

.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Options\&.Models\&.TextEditorOptionsApi\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Luthetus\&.Ide from the source code\&.
