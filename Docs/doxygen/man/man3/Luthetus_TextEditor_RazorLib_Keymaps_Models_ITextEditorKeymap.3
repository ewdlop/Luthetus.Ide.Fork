.TH "Luthetus.TextEditor.RazorLib.Keymaps.Models.ITextEditorKeymap" 3 "Version 1.0.0" "Luthetus.Ide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Luthetus.TextEditor.RazorLib.Keymaps.Models.ITextEditorKeymap
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBLuthetus\&.TextEditor\&.RazorLib\&.Keymaps\&.Models\&.Defaults\&.TextEditorKeymapDefault\fP, and \fBLuthetus\&.TextEditor\&.RazorLib\&.Keymaps\&.Models\&.Vims\&.TextEditorKeymapVim\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "Key< \fBKeymapLayer\fP > \fBGetLayer\fP (bool hasSelection)"
.br
.ti -1c
.RI "string \fBGetCursorCssClassString\fP ()"
.br
.ti -1c
.RI "string \fBGetCursorCssStyleString\fP (\fBTextEditorModel\fP textEditorModel, \fBTextEditorViewModel\fP textEditorViewModel, \fBTextEditorOptions\fP textEditorOptions)"
.br
.ti -1c
.RI "bool \fBTryMap\fP (\fBKeymapArgs\fP keymapArgument, \fBTextEditorComponentData\fP componentData, out \fBCommandNoType\fP? command)"
.br
.RI "TODO: (the following comment was copy and pasted from \fBKeymap\fP)\&.\&.\&. \&.\&.\&.This dictionary typed property is an implementation detail and should be hidden behind an interface\&. | Further details: An integrated terminal is currently being written\&. The keymap for the integrated terminal is intended to capture the keyboard event args\&. \&.\&.\&. This would allow the integrated terminal to then check if the cursor is on the final line of the text editor or not\&. \&.\&.\&. If the cursor is on the final line, then write out the text, otherwise treat the text editor as readonly because the cursor is at 'history' \&.\&.\&. But, with all this said, one cannot 'delay' the insertion of the text, because the integrated terminal when intercepting the keystroke does not have access to the keyboard event\&. \&.\&.\&. If an interface \fBIKeymap\fP existed, then the methods: -bool TryRegister(KeyboardEventArgs args, Command command) -bool TryMap(KeyboardEventArgs args, out Command command) Could be made, such that 'TryMap' would have a reference to the 'KeyboardEventArgs'\&. "
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB11\fP of file \fBITextEditorKeymap\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "string Luthetus\&.TextEditor\&.RazorLib\&.Keymaps\&.Models\&.ITextEditorKeymap\&.GetCursorCssClassString ()"

.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Keymaps\&.Models\&.Defaults\&.TextEditorKeymapDefault\fP, and \fBLuthetus\&.TextEditor\&.RazorLib\&.Keymaps\&.Models\&.Vims\&.TextEditorKeymapVim\fP\&.
.SS "string Luthetus\&.TextEditor\&.RazorLib\&.Keymaps\&.Models\&.ITextEditorKeymap\&.GetCursorCssStyleString (\fBTextEditorModel\fP textEditorModel, \fBTextEditorViewModel\fP textEditorViewModel, \fBTextEditorOptions\fP textEditorOptions)"

.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Keymaps\&.Models\&.Defaults\&.TextEditorKeymapDefault\fP, and \fBLuthetus\&.TextEditor\&.RazorLib\&.Keymaps\&.Models\&.Vims\&.TextEditorKeymapVim\fP\&.
.SS "Key< \fBKeymapLayer\fP > Luthetus\&.TextEditor\&.RazorLib\&.Keymaps\&.Models\&.ITextEditorKeymap\&.GetLayer (bool hasSelection)"

.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Keymaps\&.Models\&.Defaults\&.TextEditorKeymapDefault\fP, and \fBLuthetus\&.TextEditor\&.RazorLib\&.Keymaps\&.Models\&.Vims\&.TextEditorKeymapVim\fP\&.
.SS "bool Luthetus\&.TextEditor\&.RazorLib\&.Keymaps\&.Models\&.ITextEditorKeymap\&.TryMap (\fBKeymapArgs\fP keymapArgument, \fBTextEditorComponentData\fP componentData, out \fBCommandNoType\fP? command)"

.PP
TODO: (the following comment was copy and pasted from \fBKeymap\fP)\&.\&.\&. \&.\&.\&.This dictionary typed property is an implementation detail and should be hidden behind an interface\&. | Further details: An integrated terminal is currently being written\&. The keymap for the integrated terminal is intended to capture the keyboard event args\&. \&.\&.\&. This would allow the integrated terminal to then check if the cursor is on the final line of the text editor or not\&. \&.\&.\&. If the cursor is on the final line, then write out the text, otherwise treat the text editor as readonly because the cursor is at 'history' \&.\&.\&. But, with all this said, one cannot 'delay' the insertion of the text, because the integrated terminal when intercepting the keystroke does not have access to the keyboard event\&. \&.\&.\&. If an interface \fBIKeymap\fP existed, then the methods: -bool TryRegister(KeyboardEventArgs args, Command command) -bool TryMap(KeyboardEventArgs args, out Command command) Could be made, such that 'TryMap' would have a reference to the 'KeyboardEventArgs'\&. 
.PP
Implemented in \fBLuthetus\&.TextEditor\&.RazorLib\&.Keymaps\&.Models\&.Defaults\&.TextEditorKeymapDefault\fP, and \fBLuthetus\&.TextEditor\&.RazorLib\&.Keymaps\&.Models\&.Vims\&.TextEditorKeymapVim\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Luthetus\&.Ide from the source code\&.
