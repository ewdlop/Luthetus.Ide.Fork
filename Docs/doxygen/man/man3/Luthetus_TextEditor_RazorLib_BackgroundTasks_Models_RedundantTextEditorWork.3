.TH "Luthetus.TextEditor.RazorLib.BackgroundTasks.Models.RedundantTextEditorWork" 3 "Version 1.0.0" "Luthetus.Ide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Luthetus.TextEditor.RazorLib.BackgroundTasks.Models.RedundantTextEditorWork \- Given two contiguous background tasks\&. If both of the tasks are of this type, then compare their Name, \fBResourceUri\fP, and \fBViewModelKey\fP against eachother\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBLuthetus\&.TextEditor\&.RazorLib\&.BackgroundTasks\&.Models\&.ITextEditorWork\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRedundantTextEditorWork\fP (string name, \fBResourceUri\fP \fBresourceUri\fP, Key< \fBTextEditorViewModel\fP > viewModelKey, Func< \fBITextEditorEditContext\fP, Task > textEditorFunc)"
.br
.ti -1c
.RI "\fBIBackgroundTask\fP? \fBBatchOrDefault\fP (\fBIBackgroundTask\fP oldEvent)"
.br
.RI "Before a throttle event is enqueued, this method is invoked\&. This allows for batching of 'this' throttle event instance, and the last entry of the queue\&.
.br

.br
\&. "
.ti -1c
.RI "async Task \fBHandleEvent\fP (CancellationToken cancellationToken)"
.br
.RI "This method is the actual work item that gets awaited in order to handle the event\&. "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "string \fBName\fP\fR [get, set]\fP"
.br
.ti -1c
.RI "ResourceUri \fBResourceUri\fP\fR [get, set]\fP"
.br
.ti -1c
.RI "Key< \fBTextEditorViewModel\fP > \fBViewModelKey\fP\fR [get, set]\fP"
.br
.ti -1c
.RI "Key< \fBIBackgroundTask\fP > \fBBackgroundTaskKey\fP = Key<\fBIBackgroundTask\fP>\&.NewKey()\fR [get, set]\fP"
.br
.ti -1c
.RI "Key< \fBIBackgroundTaskQueue\fP > \fBQueueKey\fP = \fBContinuousBackgroundTaskWorker\&.GetQueueKey\fP()\fR [get, set]\fP"
.br
.ti -1c
.RI "\fBITextEditorEditContext\fP \fBEditContext\fP\fR [get, set]\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Given two contiguous background tasks\&. If both of the tasks are of this type, then compare their Name, \fBResourceUri\fP, and \fBViewModelKey\fP against eachother\&. 

If all the identifying properties are equal, then the "upstream"/"first to occurrance" task will be REMOVED from the background task queue, and NEVER be invoked\&.

.PP
In its place will be the "downstream"/"more recent occurrance" task\&.

.PP
The reason for this behavior, is that it would be redundant to calculate the upstream event, because the next event is of the same kind, and on the same data, and will entirely overwrite the upstream event's result\&.

.PP
For further control over the batching, one needs to implement \fBITextEditorWork\fP and implement the method: \fBIBackgroundTask\&.BatchOrDefault\fP\&. 
.PP
Definition at line \fB26\fP of file \fBRedundantTextEditorWork\&.cs\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Luthetus\&.TextEditor\&.RazorLib\&.BackgroundTasks\&.Models\&.RedundantTextEditorWork\&.RedundantTextEditorWork (string name, \fBResourceUri\fP resourceUri, Key< \fBTextEditorViewModel\fP > viewModelKey, Func< \fBITextEditorEditContext\fP, Task > textEditorFunc)"

.PP
Definition at line \fB30\fP of file \fBRedundantTextEditorWork\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBIBackgroundTask\fP? Luthetus\&.TextEditor\&.RazorLib\&.BackgroundTasks\&.Models\&.RedundantTextEditorWork\&.BatchOrDefault (\fBIBackgroundTask\fP oldEvent)"

.PP
Before a throttle event is enqueued, this method is invoked\&. This allows for batching of 'this' throttle event instance, and the last entry of the queue\&.
.br

.br
\&. This method is invoked from within a 'lock(_queue) { \&.\&.\&. }'\&.
.br

.br

.PP
Example use: one reads an entry from the queue, its an event that write out a character\&. Perhaps this throttle event also writes out a character\&. Instead of invoking 'text\&.Insert(character)' two times\&. One might want to invoke 'text\&.InsertRange(bothCharacters)';
.br

.br

.PP
Returning null means enqueue the recentEvent without any batching, (leave the old event as it was within the queue) 
.PP
Implements \fBLuthetus\&.Common\&.RazorLib\&.BackgroundTasks\&.Models\&.IBackgroundTask\fP\&.
.PP
Definition at line \fB51\fP of file \fBRedundantTextEditorWork\&.cs\fP\&.
.SS "async Task Luthetus\&.TextEditor\&.RazorLib\&.BackgroundTasks\&.Models\&.RedundantTextEditorWork\&.HandleEvent (CancellationToken cancellationToken)"

.PP
This method is the actual work item that gets awaited in order to handle the event\&. 
.PP
Implements \fBLuthetus\&.Common\&.RazorLib\&.BackgroundTasks\&.Models\&.IBackgroundTask\fP\&.
.PP
Definition at line \fB71\fP of file \fBRedundantTextEditorWork\&.cs\fP\&.
.SH "Property Documentation"
.PP 
.SS "Key<\fBIBackgroundTask\fP> Luthetus\&.TextEditor\&.RazorLib\&.BackgroundTasks\&.Models\&.RedundantTextEditorWork\&.BackgroundTaskKey = Key<\fBIBackgroundTask\fP>\&.NewKey()\fR [get]\fP, \fR [set]\fP"

.PP
Implements \fBLuthetus\&.Common\&.RazorLib\&.BackgroundTasks\&.Models\&.IBackgroundTask\fP\&.
.PP
Definition at line \fB46\fP of file \fBRedundantTextEditorWork\&.cs\fP\&.
.SS "\fBITextEditorEditContext\fP Luthetus\&.TextEditor\&.RazorLib\&.BackgroundTasks\&.Models\&.RedundantTextEditorWork\&.EditContext\fR [get]\fP, \fR [set]\fP"

.PP
Implements \fBLuthetus\&.TextEditor\&.RazorLib\&.BackgroundTasks\&.Models\&.ITextEditorWork\fP\&.
.PP
Definition at line \fB49\fP of file \fBRedundantTextEditorWork\&.cs\fP\&.
.SS "string Luthetus\&.TextEditor\&.RazorLib\&.BackgroundTasks\&.Models\&.RedundantTextEditorWork\&.Name\fR [get]\fP, \fR [set]\fP"

.PP
Implements \fBLuthetus\&.Common\&.RazorLib\&.BackgroundTasks\&.Models\&.IBackgroundTask\fP\&.
.PP
Definition at line \fB43\fP of file \fBRedundantTextEditorWork\&.cs\fP\&.
.SS "Key<\fBIBackgroundTaskQueue\fP> Luthetus\&.TextEditor\&.RazorLib\&.BackgroundTasks\&.Models\&.RedundantTextEditorWork\&.QueueKey = \fBContinuousBackgroundTaskWorker\&.GetQueueKey\fP()\fR [get]\fP, \fR [set]\fP"

.PP
Implements \fBLuthetus\&.Common\&.RazorLib\&.BackgroundTasks\&.Models\&.IBackgroundTask\fP\&.
.PP
Definition at line \fB47\fP of file \fBRedundantTextEditorWork\&.cs\fP\&.
.SS "ResourceUri Luthetus\&.TextEditor\&.RazorLib\&.BackgroundTasks\&.Models\&.RedundantTextEditorWork\&.ResourceUri\fR [get]\fP, \fR [set]\fP"

.PP
Definition at line \fB44\fP of file \fBRedundantTextEditorWork\&.cs\fP\&.
.SS "Key<\fBTextEditorViewModel\fP> Luthetus\&.TextEditor\&.RazorLib\&.BackgroundTasks\&.Models\&.RedundantTextEditorWork\&.ViewModelKey\fR [get]\fP, \fR [set]\fP"

.PP
Definition at line \fB45\fP of file \fBRedundantTextEditorWork\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Luthetus\&.Ide from the source code\&.
