.TH "Luthetus.Common.RazorLib.Reactives.Models" 3 "Version 1.0.0" "Luthetus.Ide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Luthetus.Common.RazorLib.Reactives.Models
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBDebounce< TArgs >\fP"
.br
.RI "The "starter code" for this was copy and pasted from ThrottleOptimized\&. "
.ti -1c
.RI "interface \fBIStateScheduler\fP"
.br
.RI "Background and asynchronous state modification needs to be scheduled to the IDispatcher\&. "
.ti -1c
.RI "class \fBProgressBarModel\fP"
.br
.ti -1c
.RI "class \fBStateScheduler\fP"
.br
.ti -1c
.RI "class \fBStringBuilderCache\fP"
.br
.ti -1c
.RI "class \fBThrottle\fP"
.br
.ti -1c
.RI "class \fBThrottleAsync\fP"
.br
.RI "\fBThrottleAsync\fP does not achieve the desired result\&. It blocks itself, and therefore is useless? I like the idea I had with a blocking background task\&. But it doesn't really extend here much, at least given how its currently written? "
.ti -1c
.RI "class \fBThrottleEventQueueAsync\fP"
.br
.RI "This type is thread safe\&.
.br

.br
\&. "
.ti -1c
.RI "class \fBThrottleFacts\fP"
.br
.ti -1c
.RI "class \fBThrottleOptimized< TArgs >\fP"
.br
.RI "Sometimes when using the \fBThrottle\fP, one is just re-using the same Func\&. "
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for Luthetus\&.Ide from the source code\&.
