.TH "Luthetus.CompilerServices.CSharp.BinderCase.CSharpBinderSession" 3 "Version 1.0.0" "Luthetus.Ide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Luthetus.CompilerServices.CSharp.BinderCase.CSharpBinderSession
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Interfaces\&.IBinderSession\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCSharpBinderSession\fP (\fBResourceUri\fP resourceUri, \fBCSharpBinder\fP binder, int globalScopeIndexKey, \fBNamespaceStatementNode\fP topLevelNamespaceStatementNode)"
.br
.ti -1c
.RI "int \fBGetNextIndexKey\fP ()"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "ResourceUri \fBResourceUri\fP\fR [get]\fP"
.br
.ti -1c
.RI "\fBCSharpBinder\fP \fBBinder\fP\fR [get]\fP"
.br
.ti -1c
.RI "int \fBCurrentScopeIndexKey\fP\fR [get, set]\fP"
.br
.ti -1c
.RI "\fBNamespaceStatementNode\fP \fBCurrentNamespaceStatementNode\fP\fR [get, set]\fP"
.br
.ti -1c
.RI "List< \fBUsingStatementNode\fP > \fBCurrentUsingStatementNodeList\fP\fR [get, set]\fP"
.br
.ti -1c
.RI "DiagnosticBag \fBDiagnosticBag\fP = new()\fR [get]\fP"
.br
.ti -1c
.RI "List< \fBIScope\fP > \fBScopeList\fP = new()\fR [get]\fP"
.br
.ti -1c
.RI "Dictionary< \fBScopeKeyAndIdentifierText\fP, \fBTypeDefinitionNode\fP > \fBScopeTypeDefinitionMap\fP = new()\fR [get]\fP"
.br
.RI "Key is the name of the type, prefixed with the ScopeKey and '_' to separate the ScopeKey from the type\&. Given: public class \fBMyClass\fP { } Then: Key == new ScopeKeyAndIdentifierText(ScopeKey, "MyClass")\&. "
.ti -1c
.RI "Dictionary< \fBScopeKeyAndIdentifierText\fP, \fBFunctionDefinitionNode\fP > \fBScopeFunctionDefinitionMap\fP = new()\fR [get]\fP"
.br
.RI "Key is the name of the function, prefixed with the ScopeKey and '_' to separate the ScopeKey from the function\&. Given: public void MyMethod() { } Then: Key == new ScopeKeyAndIdentifierText(ScopeKey, "MyMethod")\&. "
.ti -1c
.RI "Dictionary< \fBScopeKeyAndIdentifierText\fP, \fBIVariableDeclarationNode\fP > \fBScopeVariableDeclarationMap\fP = new()\fR [get]\fP"
.br
.RI "Key is the name of the variable, prefixed with the ScopeKey and '_' to separate the ScopeKey from the variable\&. Given: var myVariable = 2; Then: Key == new ScopeKeyAndIdentifierText(ScopeKey, "myVariable")\&. "
.ti -1c
.RI "Dictionary< int, \fBTypeClauseNode\fP > \fBScopeReturnTypeClauseNodeMap\fP = new()\fR [get]\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB11\fP of file \fBCSharpBinderSession\&.cs\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Luthetus\&.CompilerServices\&.CSharp\&.BinderCase\&.CSharpBinderSession\&.CSharpBinderSession (\fBResourceUri\fP resourceUri, \fBCSharpBinder\fP binder, int globalScopeIndexKey, \fBNamespaceStatementNode\fP topLevelNamespaceStatementNode)"

.PP
Definition at line \fB18\fP of file \fBCSharpBinderSession\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "int Luthetus\&.CompilerServices\&.CSharp\&.BinderCase\&.CSharpBinderSession\&.GetNextIndexKey ()"

.PP
Implements \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Interfaces\&.IBinderSession\fP\&.
.PP
Definition at line \fB47\fP of file \fBCSharpBinderSession\&.cs\fP\&.
.SH "Property Documentation"
.PP 
.SS "\fBCSharpBinder\fP Luthetus\&.CompilerServices\&.CSharp\&.BinderCase\&.CSharpBinderSession\&.Binder\fR [get]\fP"

.PP
Implements \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Interfaces\&.IBinderSession\fP\&.
.PP
Definition at line \fB32\fP of file \fBCSharpBinderSession\&.cs\fP\&.
.SS "\fBNamespaceStatementNode\fP Luthetus\&.CompilerServices\&.CSharp\&.BinderCase\&.CSharpBinderSession\&.CurrentNamespaceStatementNode\fR [get]\fP, \fR [set]\fP"

.PP
Implements \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Interfaces\&.IBinderSession\fP\&.
.PP
Definition at line \fB34\fP of file \fBCSharpBinderSession\&.cs\fP\&.
.SS "int Luthetus\&.CompilerServices\&.CSharp\&.BinderCase\&.CSharpBinderSession\&.CurrentScopeIndexKey\fR [get]\fP, \fR [set]\fP"

.PP
Implements \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Interfaces\&.IBinderSession\fP\&.
.PP
Definition at line \fB33\fP of file \fBCSharpBinderSession\&.cs\fP\&.
.SS "List<\fBUsingStatementNode\fP> Luthetus\&.CompilerServices\&.CSharp\&.BinderCase\&.CSharpBinderSession\&.CurrentUsingStatementNodeList\fR [get]\fP, \fR [set]\fP"

.PP
Implements \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Interfaces\&.IBinderSession\fP\&.
.PP
Definition at line \fB35\fP of file \fBCSharpBinderSession\&.cs\fP\&.
.SS "DiagnosticBag Luthetus\&.CompilerServices\&.CSharp\&.BinderCase\&.CSharpBinderSession\&.DiagnosticBag = new()\fR [get]\fP"

.PP
Implements \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Interfaces\&.IBinderSession\fP\&.
.PP
Definition at line \fB37\fP of file \fBCSharpBinderSession\&.cs\fP\&.
.SS "ResourceUri Luthetus\&.CompilerServices\&.CSharp\&.BinderCase\&.CSharpBinderSession\&.ResourceUri\fR [get]\fP"

.PP
Implements \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Interfaces\&.IBinderSession\fP\&.
.PP
Definition at line \fB31\fP of file \fBCSharpBinderSession\&.cs\fP\&.
.SS "Dictionary<\fBScopeKeyAndIdentifierText\fP, \fBFunctionDefinitionNode\fP> Luthetus\&.CompilerServices\&.CSharp\&.BinderCase\&.CSharpBinderSession\&.ScopeFunctionDefinitionMap = new()\fR [get]\fP"

.PP
Key is the name of the function, prefixed with the ScopeKey and '_' to separate the ScopeKey from the function\&. Given: public void MyMethod() { } Then: Key == new ScopeKeyAndIdentifierText(ScopeKey, "MyMethod")\&. 
.PP
Implements \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Interfaces\&.IBinderSession\fP\&.
.PP
Definition at line \fB40\fP of file \fBCSharpBinderSession\&.cs\fP\&.
.SS "List<\fBIScope\fP> Luthetus\&.CompilerServices\&.CSharp\&.BinderCase\&.CSharpBinderSession\&.ScopeList = new()\fR [get]\fP"

.PP
Implements \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Interfaces\&.IBinderSession\fP\&.
.PP
Definition at line \fB38\fP of file \fBCSharpBinderSession\&.cs\fP\&.
.SS "Dictionary<int, \fBTypeClauseNode\fP> Luthetus\&.CompilerServices\&.CSharp\&.BinderCase\&.CSharpBinderSession\&.ScopeReturnTypeClauseNodeMap = new()\fR [get]\fP"

.PP
Implements \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Interfaces\&.IBinderSession\fP\&.
.PP
Definition at line \fB42\fP of file \fBCSharpBinderSession\&.cs\fP\&.
.SS "Dictionary<\fBScopeKeyAndIdentifierText\fP, \fBTypeDefinitionNode\fP> Luthetus\&.CompilerServices\&.CSharp\&.BinderCase\&.CSharpBinderSession\&.ScopeTypeDefinitionMap = new()\fR [get]\fP"

.PP
Key is the name of the type, prefixed with the ScopeKey and '_' to separate the ScopeKey from the type\&. Given: public class \fBMyClass\fP { } Then: Key == new ScopeKeyAndIdentifierText(ScopeKey, "MyClass")\&. 
.PP
Implements \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Interfaces\&.IBinderSession\fP\&.
.PP
Definition at line \fB39\fP of file \fBCSharpBinderSession\&.cs\fP\&.
.SS "Dictionary<\fBScopeKeyAndIdentifierText\fP, \fBIVariableDeclarationNode\fP> Luthetus\&.CompilerServices\&.CSharp\&.BinderCase\&.CSharpBinderSession\&.ScopeVariableDeclarationMap = new()\fR [get]\fP"

.PP
Key is the name of the variable, prefixed with the ScopeKey and '_' to separate the ScopeKey from the variable\&. Given: var myVariable = 2; Then: Key == new ScopeKeyAndIdentifierText(ScopeKey, "myVariable")\&. 
.PP
Implements \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Interfaces\&.IBinderSession\fP\&.
.PP
Definition at line \fB41\fP of file \fBCSharpBinderSession\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Luthetus\&.Ide from the source code\&.
