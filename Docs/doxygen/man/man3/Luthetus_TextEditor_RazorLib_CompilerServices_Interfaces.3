.TH "Luthetus.TextEditor.RazorLib.CompilerServices.Interfaces" 3 "Version 1.0.0" "Luthetus.Ide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Luthetus.TextEditor.RazorLib.CompilerServices.Interfaces
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "interface \fBIBinder\fP"
.br
.ti -1c
.RI "interface \fBIBinderSession\fP"
.br
.RI "The CSharpBinder is being instantiated, then re-used many times foreach C# resource\&. This allows the files to know of eachother but, some data should only last for the length of a particular resource being parsed\&. Opposed to the lifetime of the CSharpBinder instance\&. "
.ti -1c
.RI "interface \fBICompilerService\fP"
.br
.ti -1c
.RI "interface \fBICompilerServiceRegistry\fP"
.br
.ti -1c
.RI "interface \fBICompilerServiceResource\fP"
.br
.ti -1c
.RI "interface \fBIEvaluator\fP"
.br
.RI "The ILuthCompilerService is to only perform static analysis of source code\&. 
.br

.br
 One should never execute the source code which is being analyzed\&. 
.br

.br
 However, for testing purposes it can be useful to see if one's logic for parsing expressions evaluates properly\&. And so, for testing only, the \fBIEvaluator\fP exists\&. 
.br

.br
 Again, the ILuthCompilerService should NEVER execute source code which it is analyzing\&. Only perform static analysis of source code\&. "
.ti -1c
.RI "interface \fBILexer\fP"
.br
.ti -1c
.RI "interface \fBIParser\fP"
.br
.ti -1c
.RI "interface \fBIParserModel\fP"
.br
.ti -1c
.RI "interface \fBIScope\fP"
.br
.ti -1c
.RI "interface \fBITextEditorSymbol\fP"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for Luthetus\&.Ide from the source code\&.
