.TH "Luthetus.Common.RazorLib.FileSystems.Models.IEnvironmentProvider" 3 "Version 1.0.0" "Luthetus.Ide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Luthetus.Common.RazorLib.FileSystems.Models.IEnvironmentProvider
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAbsolutePath\fP"
.br
.ti -1c
.RI "class \fBRelativePath\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBIsDirectorySeparator\fP (char input)"
.br
.ti -1c
.RI "string \fBGetRandomFileName\fP ()"
.br
.ti -1c
.RI "\fBIAbsolutePath\fP \fBAbsolutePathFactory\fP (string path, bool isDirectory)"
.br
.ti -1c
.RI "\fBIRelativePath\fP \fBRelativePathFactory\fP (string path, bool isDirectory)"
.br
.ti -1c
.RI "string \fBJoinPaths\fP (string pathOne, string pathTwo)"
.br
.RI "Takes two absolute file path strings and makes one singular string with the \fBDirectorySeparatorChar\fP between the two\&. "
.ti -1c
.RI "void \fBAssertDeletionPermitted\fP (string path, bool isDirectory)"
.br
.ti -1c
.RI "void \fBDeletionPermittedRegister\fP (\fBSimplePath\fP simplePath)"
.br
.RI "The parameters to this method are deliberately \fBSimplePath\fP, whereas the parameters to \fBAssertDeletionPermitted(string, bool)\fP are string, and bool\&. 
.br

.br
 This method uses the wording 'Register' in its name instead of a more natural 'Add' wording deliberately\&. 
.br

.br
 These steps were taken in order to reduce the chance that one accidentally uses one method, when meant the other\&. "
.ti -1c
.RI "void \fBDeletionPermittedDispose\fP (\fBSimplePath\fP simplePath)"
.br
.ti -1c
.RI "void \fBProtectedPathsRegister\fP (\fBSimplePath\fP simplePath)"
.br
.ti -1c
.RI "void \fBProtectedPathsDispose\fP (\fBSimplePath\fP simplePath)"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "\fBIAbsolutePath\fP \fBHomeDirectoryAbsolutePath\fP\fR [get]\fP"
.br
.ti -1c
.RI "\fBIAbsolutePath\fP \fBRootDirectoryAbsolutePath\fP\fR [get]\fP"
.br
.ti -1c
.RI "\fBIAbsolutePath\fP \fBSafeRoamingApplicationDataDirectoryAbsolutePath\fP\fR [get]\fP"
.br
.RI "The \fBActualRoamingApplicationDataDirectoryAbsolutePath\fP but with "/Luthetus/" appended\&. "
.ti -1c
.RI "\fBIAbsolutePath\fP \fBSafeLocalApplicationDataDirectoryAbsolutePath\fP\fR [get]\fP"
.br
.RI "The \fBActualLocalApplicationDataDirectoryAbsolutePath\fP but with "/Luthetus/" appended\&. "
.ti -1c
.RI "\fBIAbsolutePath\fP \fBActualRoamingApplicationDataDirectoryAbsolutePath\fP\fR [get]\fP"
.br
.ti -1c
.RI "\fBIAbsolutePath\fP \fBActualLocalApplicationDataDirectoryAbsolutePath\fP\fR [get]\fP"
.br
.ti -1c
.RI "string \fBDriveExecutingFromNoDirectorySeparator\fP\fR [get]\fP"
.br
.RI "If one is executing the program from the absolute path "C:\\Programs\\\&.\&.\&." then this is "C:"\&. This property is needed in order to disambiguate when given:
.br
 "\\Homework\\math\&.txt"
.br
 versus
.br
 "C:\\Homework\\math\&.txt"\&.
.br

.br
\&. "
.ti -1c
.RI "char \fBDirectorySeparatorChar\fP\fR [get]\fP"
.br
.ti -1c
.RI "char \fBAltDirectorySeparatorChar\fP\fR [get]\fP"
.br
.ti -1c
.RI "ImmutableHashSet< \fBSimplePath\fP > \fBDeletionPermittedPathList\fP\fR [get]\fP"
.br
.RI "Any operation which would delete a file system entry, is to first check these paths for if that file is allowed to be deleted\&. 
.br

.br
 This will be done via the \fBIFileSystemProvider\fP, \fBIFileHandler\fP, and \fBIDirectoryHandler\fP\&. 
.br

.br
 Limitations of this approach: the \&.NET API for deleting a directory could be invoked instead of \fBIDirectoryHandler\&.DeleteAsync(string, bool, CancellationToken)\fP\&. In this case, the interface cannot check if the path is allowed to be deleted, since a different API entirely was used\&. 
.br

.br
 Another limitiation is that the implementor of a given \fBIFileSystemProvider\fP, \fBIFileHandler\fP, or \fBIDirectoryHandler\fP can do as they'd like with the given implementation details\&. If an interface can be swapped at runtime, could this a security concern of some sort? 
.br

.br
 Requirements for all to go as planned: only vetted interface implementation should be permitted\&. TODO: how can one ensure the vetted interface implementation isn't at runtime swapped for an unsafe one? 
.br

.br
 Remark: I intend for these paths to be simple\&. I don't want to try and be 'smart' and interpret what your path means\&. That is to say, these are just strings\&. I intent to do a simple '==' check or, a '\&.StartsWith()' of sorts\&. 
.br

.br
 If a directory is provided, then that directory, and any sub filesystem-entries are permitted for deletion\&. 
.br

.br
 If a file is provided, then that file only becomes permitted for deletion\&. 
.br

.br
 Should one open a solution, I plan to implement that, the folder which encompasses that solution file becomes permitted for deletion\&. 
.br

.br
 Even this though I wonder, might one want to open a solution 'read-only'? "
.ti -1c
.RI "ImmutableHashSet< \fBSimplePath\fP > \fBProtectedPathList\fP\fR [get]\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB5\fP of file \fBIEnvironmentProvider\&.AbsolutePath\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBIAbsolutePath\fP Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.AbsolutePathFactory (string path, bool isDirectory)"

.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.SS "void Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.AssertDeletionPermitted (string path, bool isDirectory)"

.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.SS "void Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.DeletionPermittedDispose (\fBSimplePath\fP simplePath)"

.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.SS "void Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.DeletionPermittedRegister (\fBSimplePath\fP simplePath)"

.PP
The parameters to this method are deliberately \fBSimplePath\fP, whereas the parameters to \fBAssertDeletionPermitted(string, bool)\fP are string, and bool\&. 
.br

.br
 This method uses the wording 'Register' in its name instead of a more natural 'Add' wording deliberately\&. 
.br

.br
 These steps were taken in order to reduce the chance that one accidentally uses one method, when meant the other\&. 
.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.SS "string Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.GetRandomFileName ()"

.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.SS "bool Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.IsDirectorySeparator (char input)"

.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.SS "string Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.JoinPaths (string pathOne, string pathTwo)"

.PP
Takes two absolute file path strings and makes one singular string with the \fBDirectorySeparatorChar\fP between the two\&. 
.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.SS "void Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.ProtectedPathsDispose (\fBSimplePath\fP simplePath)"

.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.SS "void Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.ProtectedPathsRegister (\fBSimplePath\fP simplePath)"

.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.SS "\fBIRelativePath\fP Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.RelativePathFactory (string path, bool isDirectory)"

.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.SH "Property Documentation"
.PP 
.SS "\fBIAbsolutePath\fP Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.ActualLocalApplicationDataDirectoryAbsolutePath\fR [get]\fP"

.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.PP
Definition at line \fB21\fP of file \fBIEnvironmentProvider\&.Main\&.cs\fP\&.
.SS "\fBIAbsolutePath\fP Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.ActualRoamingApplicationDataDirectoryAbsolutePath\fR [get]\fP"

.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.PP
Definition at line \fB20\fP of file \fBIEnvironmentProvider\&.Main\&.cs\fP\&.
.SS "char Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.AltDirectorySeparatorChar\fR [get]\fP"

.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.PP
Definition at line \fB34\fP of file \fBIEnvironmentProvider\&.Main\&.cs\fP\&.
.SS "ImmutableHashSet<\fBSimplePath\fP> Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.DeletionPermittedPathList\fR [get]\fP"

.PP
Any operation which would delete a file system entry, is to first check these paths for if that file is allowed to be deleted\&. 
.br

.br
 This will be done via the \fBIFileSystemProvider\fP, \fBIFileHandler\fP, and \fBIDirectoryHandler\fP\&. 
.br

.br
 Limitations of this approach: the \&.NET API for deleting a directory could be invoked instead of \fBIDirectoryHandler\&.DeleteAsync(string, bool, CancellationToken)\fP\&. In this case, the interface cannot check if the path is allowed to be deleted, since a different API entirely was used\&. 
.br

.br
 Another limitiation is that the implementor of a given \fBIFileSystemProvider\fP, \fBIFileHandler\fP, or \fBIDirectoryHandler\fP can do as they'd like with the given implementation details\&. If an interface can be swapped at runtime, could this a security concern of some sort? 
.br

.br
 Requirements for all to go as planned: only vetted interface implementation should be permitted\&. TODO: how can one ensure the vetted interface implementation isn't at runtime swapped for an unsafe one? 
.br

.br
 Remark: I intend for these paths to be simple\&. I don't want to try and be 'smart' and interpret what your path means\&. That is to say, these are just strings\&. I intent to do a simple '==' check or, a '\&.StartsWith()' of sorts\&. 
.br

.br
 If a directory is provided, then that directory, and any sub filesystem-entries are permitted for deletion\&. 
.br

.br
 If a file is provided, then that file only becomes permitted for deletion\&. 
.br

.br
 Should one open a solution, I plan to implement that, the folder which encompasses that solution file becomes permitted for deletion\&. 
.br

.br
 Even this though I wonder, might one want to open a solution 'read-only'? 
.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.PP
Definition at line \fB72\fP of file \fBIEnvironmentProvider\&.Main\&.cs\fP\&.
.SS "char Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.DirectorySeparatorChar\fR [get]\fP"

.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.PP
Definition at line \fB33\fP of file \fBIEnvironmentProvider\&.Main\&.cs\fP\&.
.SS "string Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.DriveExecutingFromNoDirectorySeparator\fR [get]\fP"

.PP
If one is executing the program from the absolute path "C:\\Programs\\\&.\&.\&." then this is "C:"\&. This property is needed in order to disambiguate when given:
.br
 "\\Homework\\math\&.txt"
.br
 versus
.br
 "C:\\Homework\\math\&.txt"\&.
.br

.br
\&. Consider the creation of a text editor model\&. This property allows the previous example of ambiguous paths to map to the same TextEditorModel\&. 
.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.PP
Definition at line \fB32\fP of file \fBIEnvironmentProvider\&.Main\&.cs\fP\&.
.SS "\fBIAbsolutePath\fP Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.HomeDirectoryAbsolutePath\fR [get]\fP"

.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.PP
Definition at line \fB7\fP of file \fBIEnvironmentProvider\&.Main\&.cs\fP\&.
.SS "ImmutableHashSet<\fBSimplePath\fP> Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.ProtectedPathList\fR [get]\fP"

.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.PP
Definition at line \fB73\fP of file \fBIEnvironmentProvider\&.Main\&.cs\fP\&.
.SS "\fBIAbsolutePath\fP Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.RootDirectoryAbsolutePath\fR [get]\fP"

.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.PP
Definition at line \fB8\fP of file \fBIEnvironmentProvider\&.Main\&.cs\fP\&.
.SS "\fBIAbsolutePath\fP Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.SafeLocalApplicationDataDirectoryAbsolutePath\fR [get]\fP"

.PP
The \fBActualLocalApplicationDataDirectoryAbsolutePath\fP but with "/Luthetus/" appended\&. 
.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.PP
Definition at line \fB19\fP of file \fBIEnvironmentProvider\&.Main\&.cs\fP\&.
.SS "\fBIAbsolutePath\fP Luthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.IEnvironmentProvider\&.SafeRoamingApplicationDataDirectoryAbsolutePath\fR [get]\fP"

.PP
The \fBActualRoamingApplicationDataDirectoryAbsolutePath\fP but with "/Luthetus/" appended\&. 
.PP
Implemented in \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.InMemoryEnvironmentProvider\fP, and \fBLuthetus\&.Common\&.RazorLib\&.FileSystems\&.Models\&.LocalEnvironmentProvider\fP\&.
.PP
Definition at line \fB14\fP of file \fBIEnvironmentProvider\&.Main\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Luthetus\&.Ide from the source code\&.
