.TH "Source/Lib/TextEditor/Lexers/Models/TextEditorTextSpan.cs" 3 "Version 1.0.0" "Luthetus.Ide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Source/Lib/TextEditor/Lexers/Models/TextEditorTextSpan.cs
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBLuthetus\fP"
.br
.ti -1c
.RI "namespace \fBLuthetus\&.TextEditor\fP"
.br
.ti -1c
.RI "namespace \fBLuthetus\&.TextEditor\&.RazorLib\fP"
.br
.ti -1c
.RI "namespace \fBLuthetus\&.TextEditor\&.RazorLib\&.Lexers\fP"
.br
.ti -1c
.RI "namespace \fBLuthetus\&.TextEditor\&.RazorLib\&.Lexers\&.Models\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "record struct \fBLuthetus\&.TextEditor\&.RazorLib\&.Lexers\&.Models\&.TextEditorTextSpan\fP (int StartingIndexInclusive, int EndingIndexExclusive, byte DecorationByte, \fBResourceUri\fP \fBResourceUri\fP, string SourceText)"
.br
.RI "TODO: I have a suspicion that this type takes an absurd amount of memory\&.\&.\&. \&.\&.\&. the initial way of implementing this type was to store the text at the time of constructing the text span\&. | But, it was thought that preferably one would only only create the substring when asked for it\&. | This means one has to store the entirety of the source text\&. Well, the source text is just a reference not a copy of the value\&. So this seemed fine enough\&. | But, because the text editor is immutable\&. The source text is constantly needing to be reconstructed as a string value\&. | As a result, the old string values that pertain to previous iterations of the text editor must be held in memory, because any TextEditorTextSpan that is not garbage collected, would have a reference to the old string value\&. | I'm thinking of using Span<char> or something along the lines\&. But, wouldn't Span<char> still need to maintain the previous string in its entirety? | If Span<T> will somehow track what section of the previous string I have a reference to, and only free the resources pertaining to the sections of the string that don't have a Span<T> referencing them then that would be amazing\&. | But then again, why am I not just letting the text span capture the substring upon construction? | I also wonder, what about a Func<string>? Does this somehow hide the previous string values of the text editor and permit the resources to be free'd? (2024-07-27)\&. "
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for Luthetus\&.Ide from the source code\&.
