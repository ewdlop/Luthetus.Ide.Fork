.TH "Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Symbols.OnClickSymbol" 3 "Version 1.0.0" "Luthetus.Ide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Symbols.OnClickSymbol \- TODO: This type should be changed\&. It is being made to permit simple 'onclick' markers\&.\&.\&. \&.\&.\&.but its not quite a 'Symbol'\&. | Just happens to be the case that a symbol can act as a marker for some "event like thing" so it works to have it here for now\&. | The main issue is that the Symbol instances will apply syntax highlighting\&. | For this '\fBOnClickSymbol\fP' we would preferably not apply any syntax highlighting\&. | For example: "cd \&.\&." I want to syntax highlight 'cd' as the target file path, but NOT syntax highlight the arguments '\&.\&.' | If I use a symbol to syntax highlight 'cd', then it might be overridden by the '\fBOnClickSymbol\fP' of which is not supposed to alter the syntax highlighting\&. (it depends on the order that the symbols are applied)\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Syntax\&.Symbols\&.ISymbol\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBOnClickSymbol\fP (\fBTextEditorTextSpan\fP textSpan, string displayText, Func< Task > onClickFunc)"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "Func< Task > \fBOnClickFunc\fP\fR [get]\fP"
.br
.ti -1c
.RI "\fBTextEditorTextSpan\fP \fBTextSpan\fP\fR [get]\fP"
.br
.ti -1c
.RI "string \fBDisplayText\fP\fR [get]\fP"
.br
.ti -1c
.RI "string \fBSymbolKindString\fP\fR [get]\fP"
.br
.RI "\fBSymbolKindString\fP is not an Enum here\&. 
.br

.br
 This is because ITextEditorSymbol is a class within the Text Editor library; every enum would have to be specified by the library itself\&. 
.br

.br
 So, (2023-07-20) this hacky string based \fBSymbolKindString\fP is going to be used for now\&. This allows the consumer of the Text Editor library to add further SymbolKind(s) of their choosing\&. "
.ti -1c
.RI "\fBSyntaxKind\fP \fBSyntaxKind\fP\fR [get]\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Static Public Member Functions inherited from \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Syntax\&.Symbols\&.ISymbol\fP
.in +1c
.ti -1c
.RI "static string \fBGetSymbolDefinitionId\fP (string text, int scopeIndexKey)"
.br
.RI "The Id for a \fBSymbolDefinition\fP is the string concatenation of the BoundScopeKey, a '+' character, and the text span's text value\&. "
.in -1c
.SH "Detailed Description"
.PP 
TODO: This type should be changed\&. It is being made to permit simple 'onclick' markers\&.\&.\&. \&.\&.\&.but its not quite a 'Symbol'\&. | Just happens to be the case that a symbol can act as a marker for some "event like thing" so it works to have it here for now\&. | The main issue is that the Symbol instances will apply syntax highlighting\&. | For this '\fBOnClickSymbol\fP' we would preferably not apply any syntax highlighting\&. | For example: "cd \&.\&." I want to syntax highlight 'cd' as the target file path, but NOT syntax highlight the arguments '\&.\&.' | If I use a symbol to syntax highlight 'cd', then it might be overridden by the '\fBOnClickSymbol\fP' of which is not supposed to alter the syntax highlighting\&. (it depends on the order that the symbols are applied)\&. 
.PP
Definition at line \fB25\fP of file \fBOnClickSymbol\&.cs\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Luthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Syntax\&.Symbols\&.OnClickSymbol\&.OnClickSymbol (\fBTextEditorTextSpan\fP textSpan, string displayText, Func< Task > onClickFunc)"

.PP
Definition at line \fB27\fP of file \fBOnClickSymbol\&.cs\fP\&.
.SH "Property Documentation"
.PP 
.SS "string Luthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Syntax\&.Symbols\&.OnClickSymbol\&.DisplayText\fR [get]\fP"

.PP
Definition at line \fB40\fP of file \fBOnClickSymbol\&.cs\fP\&.
.SS "Func<Task> Luthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Syntax\&.Symbols\&.OnClickSymbol\&.OnClickFunc\fR [get]\fP"

.PP
Definition at line \fB37\fP of file \fBOnClickSymbol\&.cs\fP\&.
.SS "string Luthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Syntax\&.Symbols\&.OnClickSymbol\&.SymbolKindString\fR [get]\fP"

.PP
\fBSymbolKindString\fP is not an Enum here\&. 
.br

.br
 This is because ITextEditorSymbol is a class within the Text Editor library; every enum would have to be specified by the library itself\&. 
.br

.br
 So, (2023-07-20) this hacky string based \fBSymbolKindString\fP is going to be used for now\&. This allows the consumer of the Text Editor library to add further SymbolKind(s) of their choosing\&. 
.PP
Implements \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Interfaces\&.ITextEditorSymbol\fP\&.
.PP
Definition at line \fB41\fP of file \fBOnClickSymbol\&.cs\fP\&.
.SS "\fBSyntaxKind\fP Luthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Syntax\&.Symbols\&.OnClickSymbol\&.SyntaxKind\fR [get]\fP"

.PP
Implements \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Interfaces\&.ITextEditorSymbol\fP\&.
.PP
Definition at line \fB43\fP of file \fBOnClickSymbol\&.cs\fP\&.
.SS "\fBTextEditorTextSpan\fP Luthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Syntax\&.Symbols\&.OnClickSymbol\&.TextSpan\fR [get]\fP"

.PP
Implements \fBLuthetus\&.TextEditor\&.RazorLib\&.CompilerServices\&.Interfaces\&.ITextEditorSymbol\fP\&.
.PP
Definition at line \fB39\fP of file \fBOnClickSymbol\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Luthetus\&.Ide from the source code\&.
