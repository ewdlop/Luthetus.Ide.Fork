<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models" xml:lang="en-US">
<title>Luthetus.Common.RazorLib.TreeViews.Models Namespace Reference</title>
<indexterm><primary>Luthetus.Common.RazorLib.TreeViews.Models</primary></indexterm>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_utils">Utils</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>interface <link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_i_tree_view_service">ITreeViewService</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link></para>

<para><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link> is used when the consumer of the component does not want to show the root.<?linebreak?><?linebreak?> The <link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views">TreeViews</link> were designed with a root consisting of 1 node. To get around this <link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link> can be used to have that top level root node be invisible to the user. </para>
</listitem>
            <listitem><para>class <link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_keyboard_event_handler">TreeViewKeyboardEventHandler</link></para>

<para>To implement custom KeyboardEvent handling logic one should inherit <link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_keyboard_event_handler">TreeViewKeyboardEventHandler</link> and override the corresponding method. </para>
</listitem>
            <listitem><para>class <link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_mouse_event_handler">TreeViewMouseEventHandler</link></para>

<para>To implement custom MouseEvent handling logic one should inherit <link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_mouse_event_handler">TreeViewMouseEventHandler</link> and override the corresponding method. </para>
</listitem>
            <listitem><para>class <link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_no_type">TreeViewNoType</link></para>

<para>Without this datatype one cannot for example hold all their <link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_with_type-1-g">TreeViewWithType&lt;T&gt;</link> in a List&lt;T&gt; unless all implementation instances share the same generic argument type. </para>
</listitem>
            <listitem><para>class <link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_service">TreeViewService</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_with_type-1-g">TreeViewWithType&lt; T &gt;</link></para>

<para>Implement the abstract class <link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_with_type-1-g">TreeViewWithType&lt;T&gt;</link> in order to make a TreeView.<?linebreak?><?linebreak?> An abstract class is used because a good deal of customization is required on a per TreeView basis depending on what data type one displays in that TreeView. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>record <link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1a175eb1286540198880f85c140703f486">TreeViewRenderer</link> (Type DynamicComponentType, Dictionary&lt; string, object?&gt;? DynamicComponentParameters)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1a175eb1286540198880f85c140703f486"/><section>
    <title>TreeViewRenderer()</title>
<indexterm><primary>TreeViewRenderer</primary><secondary>Luthetus.Common.RazorLib.TreeViews.Models</secondary></indexterm>
<indexterm><primary>Luthetus.Common.RazorLib.TreeViews.Models</primary><secondary>TreeViewRenderer</secondary></indexterm>
<para><computeroutput>record Luthetus.Common.RazorLib.TreeViews.Models.TreeViewRenderer (Type DynamicComponentType, Dictionary&lt; string, object?&gt;? DynamicComponentParameters)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_a175eb1286540198880f85c140703f486_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
