<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__expression_tests_8cs_source" xml:lang="en-US">
<title>ExpressionTests.cs</title>
<indexterm><primary>Source/Tests/CompilerServices/CSharp/SmokeTests/Parsers/ExpressionTests.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__expression_tests_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis>System.Text;
<anchor xml:id="__expression_tests_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models">Luthetus.TextEditor.RazorLib.Lexers.Models</link>;
<anchor xml:id="__expression_tests_8cs_source_1l00003"/>00003 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services">Luthetus.TextEditor.RazorLib.CompilerServices</link>;
<anchor xml:id="__expression_tests_8cs_source_1l00004"/>00004 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces">Luthetus.TextEditor.RazorLib.CompilerServices.Interfaces</link>;
<anchor xml:id="__expression_tests_8cs_source_1l00005"/>00005 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax</link>;
<anchor xml:id="__expression_tests_8cs_source_1l00006"/>00006 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Tokens</link>;
<anchor xml:id="__expression_tests_8cs_source_1l00007"/>00007 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes</link>;
<anchor xml:id="__expression_tests_8cs_source_1l00008"/>00008 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_interfaces">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes.Interfaces</link>;
<anchor xml:id="__expression_tests_8cs_source_1l00009"/>00009 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_enums">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes.Enums</link>;
<anchor xml:id="__expression_tests_8cs_source_1l00010"/>00010 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case">Luthetus.CompilerServices.CSharp.LexerCase</link>;
<anchor xml:id="__expression_tests_8cs_source_1l00011"/>00011 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case">Luthetus.CompilerServices.CSharp.ParserCase</link>;
<anchor xml:id="__expression_tests_8cs_source_1l00012"/>00012 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals">Luthetus.CompilerServices.CSharp.ParserCase.Internals</link>;
<anchor xml:id="__expression_tests_8cs_source_1l00013"/>00013 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_facts">Luthetus.CompilerServices.CSharp.Facts</link>;
<anchor xml:id="__expression_tests_8cs_source_1l00014"/>00014 
<anchor xml:id="__expression_tests_8cs_source_1l00015"/>00015 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers">Luthetus.CompilerServices.CSharp.Tests.SmokeTests.Parsers</link>;
<anchor xml:id="__expression_tests_8cs_source_1l00016"/>00016 
<anchor xml:id="__expression_tests_8cs_source_1l00017"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests">00017</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">partial&#32;class&#32;</emphasis><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests">ExpressionTests</link>
<anchor xml:id="__expression_tests_8cs_source_1l00018"/>00018 {
<anchor xml:id="__expression_tests_8cs_source_1l00019"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">00019</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a85542ea22f37895cc6f9b559dbe1eaed">Test</link>
<anchor xml:id="__expression_tests_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00021"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a85542ea22f37895cc6f9b559dbe1eaed">00021</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a85542ea22f37895cc6f9b559dbe1eaed">Test</link>(<emphasis role="keywordtype">string</emphasis>&#32;sourceText)
<anchor xml:id="__expression_tests_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1ae1196b4524c15c74a09e13302d602373">SourceText</link>&#32;=&#32;sourceText;
<anchor xml:id="__expression_tests_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a8fb1c759db72bf3124d98ef06c1fc577">ResourceUri</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;./unitTesting.txt&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a9b4a179663dd100781fb915958bae8a2">Lexer</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a8fb1c759db72bf3124d98ef06c1fc577">ResourceUri</link>,&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1ae1196b4524c15c74a09e13302d602373">SourceText</link>);
<anchor xml:id="__expression_tests_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a9b4a179663dd100781fb915958bae8a2">Lexer</link>.Lex();
<anchor xml:id="__expression_tests_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a13bafd9bd771582e260906b5151d5d6a">Parser</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_c_sharp_parser">CSharpParser</link>(<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a9b4a179663dd100781fb915958bae8a2">Lexer</link>);
<anchor xml:id="__expression_tests_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1ac5cb7d5e51e4651ad88d69ea1cdbe726">CompilationUnit</link>&#32;=&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a13bafd9bd771582e260906b5151d5d6a">Parser</link>.Parse();
<anchor xml:id="__expression_tests_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00031"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1ae1196b4524c15c74a09e13302d602373">00031</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1ae1196b4524c15c74a09e13302d602373">SourceText</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00032"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a8fb1c759db72bf3124d98ef06c1fc577">00032</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a8fb1c759db72bf3124d98ef06c1fc577">ResourceUri</link>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a8fb1c759db72bf3124d98ef06c1fc577">ResourceUri</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00033"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a9b4a179663dd100781fb915958bae8a2">00033</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a9b4a179663dd100781fb915958bae8a2">Lexer</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00034"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a13bafd9bd771582e260906b5151d5d6a">00034</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_c_sharp_parser">CSharpParser</link>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1a13bafd9bd771582e260906b5151d5d6a">Parser</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00035"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1ac5cb7d5e51e4651ad88d69ea1cdbe726">00035</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1ac5cb7d5e51e4651ad88d69ea1cdbe726">CompilationUnit</link>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test_1ac5cb7d5e51e4651ad88d69ea1cdbe726">CompilationUnit</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00037"/>00037 
<anchor xml:id="__expression_tests_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00039"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a1b45797970fa1517aa5a04992a7ed165">00039</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a1b45797970fa1517aa5a04992a7ed165">Numeric_Add_BinaryExpressionNode</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;1&#32;+&#32;1&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node">BinaryExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;textTypeClause&#32;=&#32;<emphasis role="stringliteral">&quot;int&quot;</emphasis>;
<anchor xml:id="__expression_tests_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;leftLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.LeftExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryOperatorNode&#32;=&#32;binaryExpressionNode.BinaryOperatorNode;
<anchor xml:id="__expression_tests_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;ISyntaxToken&#32;binaryOperatorNode.OperatorToken&#32;{&#32;get;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rightLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.RightExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00065"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a09e0de8b6b9d2252d977f837123525c8">00065</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a09e0de8b6b9d2252d977f837123525c8">Numeric_Add_BinaryExpressionNode_More</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;1&#32;+&#32;1&#32;+&#32;1&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node">BinaryExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;textTypeClause&#32;=&#32;<emphasis role="stringliteral">&quot;int&quot;</emphasis>;
<anchor xml:id="__expression_tests_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;Expression</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;leftBinaryExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node">BinaryExpressionNode</link>)binaryExpressionNode.LeftExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;leftBinaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Temporarily&#32;swap&#32;variables&#32;for&#32;sanity&#32;#change</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rememberBinaryExpressionNode&#32;=&#32;binaryExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binaryExpressionNode&#32;=&#32;leftBinaryExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Inner&#32;Binary&#32;Expression</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;leftLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.LeftExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryOperatorNode&#32;=&#32;binaryExpressionNode.BinaryOperatorNode;
<anchor xml:id="__expression_tests_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;ISyntaxToken&#32;binaryOperatorNode.OperatorToken&#32;{&#32;get;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rightLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.RightExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Temporarily&#32;swap&#32;variables&#32;for&#32;sanity&#32;#restore</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binaryExpressionNode&#32;=&#32;rememberBinaryExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Operator</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryOperatorNode&#32;=&#32;binaryExpressionNode.BinaryOperatorNode;
<anchor xml:id="__expression_tests_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;ISyntaxToken&#32;binaryOperatorNode.OperatorToken&#32;{&#32;get;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;Expression</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rightLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.RightExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Result</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00126"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a039d38dd39afeac4d9c7ba82fde0b0bc">00126</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a039d38dd39afeac4d9c7ba82fde0b0bc">Numeric_Subtract_BinaryExpressionNode</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;1&#32;-&#32;1&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node">BinaryExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;textTypeClause&#32;=&#32;<emphasis role="stringliteral">&quot;int&quot;</emphasis>;
<anchor xml:id="__expression_tests_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;leftLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.LeftExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryOperatorNode&#32;=&#32;binaryExpressionNode.BinaryOperatorNode;
<anchor xml:id="__expression_tests_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;ISyntaxToken&#32;binaryOperatorNode.OperatorToken&#32;{&#32;get;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rightLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.RightExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00152"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a529579397f113cd4320464e7db92873e">00152</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a529579397f113cd4320464e7db92873e">Numeric_Star_BinaryExpressionNode</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;1&#32;*&#32;1&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node">BinaryExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;textTypeClause&#32;=&#32;<emphasis role="stringliteral">&quot;int&quot;</emphasis>;
<anchor xml:id="__expression_tests_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;leftLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.LeftExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryOperatorNode&#32;=&#32;binaryExpressionNode.BinaryOperatorNode;
<anchor xml:id="__expression_tests_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;ISyntaxToken&#32;binaryOperatorNode.OperatorToken&#32;{&#32;get;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rightLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.RightExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00178"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1af5b9908be64ec7b15b927799d9475714">00178</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1af5b9908be64ec7b15b927799d9475714">Numeric_Division_BinaryExpressionNode</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;1&#32;/&#32;1&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node">BinaryExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;textTypeClause&#32;=&#32;<emphasis role="stringliteral">&quot;int&quot;</emphasis>;
<anchor xml:id="__expression_tests_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;leftLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.LeftExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryOperatorNode&#32;=&#32;binaryExpressionNode.BinaryOperatorNode;
<anchor xml:id="__expression_tests_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;ISyntaxToken&#32;binaryOperatorNode.OperatorToken&#32;{&#32;get;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rightLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.RightExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00204"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa8dcd469a552d86c801e0c2d1b9bd268">00204</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa8dcd469a552d86c801e0c2d1b9bd268">Numeric_EqualsEquals_BinaryExpressionNode</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;1&#32;==&#32;1&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node">BinaryExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;textTypeClause&#32;=&#32;<emphasis role="stringliteral">&quot;int&quot;</emphasis>;
<anchor xml:id="__expression_tests_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;leftLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.LeftExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryOperatorNode&#32;=&#32;binaryExpressionNode.BinaryOperatorNode;
<anchor xml:id="__expression_tests_8cs_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;ISyntaxToken&#32;binaryOperatorNode.OperatorToken&#32;{&#32;get;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rightLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.RightExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00225"/>00225 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00228"/>00228 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00229"/>00229 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00230"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a03d6f271419bf2a66a3404bb55568546">00230</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a03d6f271419bf2a66a3404bb55568546">String_BinaryExpressionNode</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00231"/>00231 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;\&quot;Asd\&quot;&#32;+&#32;\&quot;Fgh\&quot;&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node">BinaryExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;textTypeClause&#32;=&#32;<emphasis role="stringliteral">&quot;string&quot;</emphasis>;
<anchor xml:id="__expression_tests_8cs_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;leftLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.LeftExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryOperatorNode&#32;=&#32;binaryExpressionNode.BinaryOperatorNode;
<anchor xml:id="__expression_tests_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;ISyntaxToken&#32;binaryOperatorNode.OperatorToken&#32;{&#32;get;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rightLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.RightExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00251"/>00251 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00254"/>00254 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00255"/>00255 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00256"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a89bb68fa64e44db8bb42563d90432010">00256</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a89bb68fa64e44db8bb42563d90432010">String_Interpolated</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00257"/>00257 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;$\&quot;asd\&quot;&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;literalExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;string&quot;</emphasis>,&#32;literalExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00263"/>00263 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00268"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a5077c29a9776e2830fedccff05e8f6ab">00268</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a5077c29a9776e2830fedccff05e8f6ab">String_Verbatim</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;@\&quot;asd\&quot;&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;literalExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;string&quot;</emphasis>,&#32;literalExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00275"/>00275 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00277"/>00277 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00278"/>00278 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00279"/>00279 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00280"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a3beca01f08c489b96a8edce9f2a56653">00280</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a3beca01f08c489b96a8edce9f2a56653">String_InterpolatedVerbatim</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00281"/>00281 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;$@\&quot;asd\&quot;&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;literalExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;string&quot;</emphasis>,&#32;literalExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00287"/>00287 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00289"/>00289 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00291"/>00291 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00292"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ae3b686e3e1d7a4a4275a8359eb17826b">00292</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ae3b686e3e1d7a4a4275a8359eb17826b">String_VerbatimInterpolated</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;@$\&quot;asd\&quot;&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;literalExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;string&quot;</emphasis>,&#32;literalExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00299"/>00299 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00301"/>00301 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00302"/>00302 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00303"/>00303 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00304"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a11934bbcd2cb429e01cd53329acc8e7e">00304</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a11934bbcd2cb429e01cd53329acc8e7e">Char_BinaryExpressionNode</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00305"/>00305 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;&apos;a&apos;&#32;+&#32;&apos;\n&apos;&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node">BinaryExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;textTypeClause&#32;=&#32;<emphasis role="stringliteral">&quot;char&quot;</emphasis>;
<anchor xml:id="__expression_tests_8cs_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;leftLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.LeftExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryOperatorNode&#32;=&#32;binaryExpressionNode.BinaryOperatorNode;
<anchor xml:id="__expression_tests_8cs_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;ISyntaxToken&#32;binaryOperatorNode.OperatorToken&#32;{&#32;get;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rightLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.RightExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00325"/>00325 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00327"/>00327 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00328"/>00328 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00329"/>00329 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00330"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a789b098144b49e714c53893c48186065">00330</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a789b098144b49e714c53893c48186065">Bool_BinaryExpressionNode</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00331"/>00331 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;false&#32;==&#32;true&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node">BinaryExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;textTypeClause&#32;=&#32;<emphasis role="stringliteral">&quot;bool&quot;</emphasis>;
<anchor xml:id="__expression_tests_8cs_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;leftLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.LeftExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryOperatorNode&#32;=&#32;binaryExpressionNode.BinaryOperatorNode;
<anchor xml:id="__expression_tests_8cs_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.LeftOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;ISyntaxToken&#32;binaryOperatorNode.OperatorToken&#32;{&#32;get;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.RightOperandTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rightLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.RightExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;rightLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00351"/>00351 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00353"/>00353 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00354"/>00354 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00355"/>00355 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00356"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a0d3881e9150193eb0db49a4204cc1baf">00356</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a0d3881e9150193eb0db49a4204cc1baf">ParenthesizedExpressionNode_Test</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00357"/>00357 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;(7)&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;parenthesizedExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_parenthesized_expression_node">ParenthesizedExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;textTypeClause&#32;=&#32;<emphasis role="stringliteral">&quot;int&quot;</emphasis>;
<anchor xml:id="__expression_tests_8cs_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;parenthesizedExpressionNode.InnerExpression.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;literalExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)parenthesizedExpressionNode.InnerExpression;
<anchor xml:id="__expression_tests_8cs_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;7&quot;</emphasis>,&#32;literalExpressionNode.LiteralSyntaxToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(parenthesizedExpressionNode.OpenParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00370"/>00370 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00372"/>00372 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00373"/>00373 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00374"/>00374 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00375"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a336210d1b4a67ba1e9e696e19491a095">00375</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a336210d1b4a67ba1e9e696e19491a095">ShortCircuit</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00376"/>00376 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;(1&#32;+&#32;)&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;parenthesizedExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_parenthesized_expression_node">ParenthesizedExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;textTypeClause&#32;=&#32;<emphasis role="stringliteral">&quot;int&quot;</emphasis>;
<anchor xml:id="__expression_tests_8cs_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;parenthesizedExpressionNode.InnerExpression.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_binary_expression_node">BinaryExpressionNode</link>)parenthesizedExpressionNode.InnerExpression;
<anchor xml:id="__expression_tests_8cs_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;leftLiteralExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)binaryExpressionNode.LeftExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;leftLiteralExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;binaryOperatorNode&#32;=&#32;binaryExpressionNode.BinaryOperatorNode;
<anchor xml:id="__expression_tests_8cs_source_1l00391"/>00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;binaryOperatorNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rightEmptyExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_empty_expression_node">EmptyExpressionNode</link>)binaryExpressionNode.RightExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(textTypeClause,&#32;rightEmptyExpressionNode.ResultTypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00395"/>00395 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00397"/>00397 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00398"/>00398 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00399"/>00399 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00400"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a2e3ee5c1d3e2307d783b03cd141c4c98">00400</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a2e3ee5c1d3e2307d783b03cd141c4c98">ExplicitCastNode_IdentifierToken</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00401"/>00401 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00402"/>00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;(MyClass)&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(topCodeBlock);
<anchor xml:id="__expression_tests_8cs_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;explicitCastNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_explicit_cast_node">ExplicitCastNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00408"/>00408 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00410"/>00410 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00411"/>00411 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00412"/>00412 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00413"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a782ec04c7274fe4b52486b666d001c30">00413</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a782ec04c7274fe4b52486b666d001c30">ExplicitCastNode_KeywordToken</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00414"/>00414 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00415"/>00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;(int)&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00416"/>00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;explicitCastNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_explicit_cast_node">ExplicitCastNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00419"/>00419 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00420"/>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00421"/>00421 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00422"/>00422 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00423"/>00423 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00424"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a451418bd6a001e946a1e78679aa884de">00424</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a451418bd6a001e946a1e78679aa884de">FunctionInvocationNode_Basic</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00425"/>00425 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00426"/>00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;MyMethod()&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00427"/>00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00428"/>00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00429"/>00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionInvocationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_invocation_node">FunctionInvocationNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00430"/>00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00431"/>00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(functionInvocationNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(functionInvocationNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(functionInvocationNode.FunctionParametersListingNode.FunctionParameterEntryNodeList);
<anchor xml:id="__expression_tests_8cs_source_1l00435"/>00435 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00437"/>00437 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00438"/>00438 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00439"/>00439 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00440"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a62837ac5c82cc5e704de591c22039b30">00440</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a62837ac5c82cc5e704de591c22039b30">FunctionInvocationNode_Parameters</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00441"/>00441 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00442"/>00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;MyMethod(7,&#32;\&quot;Asdfg\&quot;)&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00443"/>00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00444"/>00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionInvocationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_invocation_node">FunctionInvocationNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00446"/>00446 
<anchor xml:id="__expression_tests_8cs_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FunctionParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(functionInvocationNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00450"/>00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;numericFunctionParameterEntryNode&#32;=&#32;functionInvocationNode.FunctionParametersListingNode.FunctionParameterEntryNodeList[0];
<anchor xml:id="__expression_tests_8cs_source_1l00452"/>00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.NumericLiteralToken,&#32;((<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)numericFunctionParameterEntryNode.ExpressionNode).LiteralSyntaxToken.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00454"/>00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;stringFunctionParameterEntryNode&#32;=&#32;functionInvocationNode.FunctionParametersListingNode.FunctionParameterEntryNodeList[1];
<anchor xml:id="__expression_tests_8cs_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.StringLiteralToken,&#32;((<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)stringFunctionParameterEntryNode.ExpressionNode).LiteralSyntaxToken.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00457"/>00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(functionInvocationNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00458"/>00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00459"/>00459 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00460"/>00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00461"/>00461 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00462"/>00462 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00463"/>00463 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00464"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a6fedd472f5bf7244b2b35596e040b66f">00464</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a6fedd472f5bf7244b2b35596e040b66f">FunctionInvocationNode_Generic</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00465"/>00465 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00466"/>00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;MyMethod&lt;int,&#32;MyClass&gt;()&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00467"/>00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00468"/>00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00469"/>00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionInvocationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_invocation_node">FunctionInvocationNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00470"/>00470 
<anchor xml:id="__expression_tests_8cs_source_1l00471"/>00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;GenericParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00472"/>00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00473"/>00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(functionInvocationNode.GenericParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00474"/>00474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(functionInvocationNode.GenericParametersListingNode.OpenAngleBracketToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00475"/>00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00476"/>00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;intGenericParameterEntryNode&#32;=&#32;functionInvocationNode.GenericParametersListingNode.GenericParameterEntryNodeList[0];
<anchor xml:id="__expression_tests_8cs_source_1l00477"/>00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;int&quot;</emphasis>,&#32;intGenericParameterEntryNode.TypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00478"/>00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00479"/>00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;stringGenericParameterEntryNode&#32;=&#32;functionInvocationNode.GenericParametersListingNode.GenericParameterEntryNodeList[1];
<anchor xml:id="__expression_tests_8cs_source_1l00480"/>00480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;MyClass&quot;</emphasis>,&#32;stringGenericParameterEntryNode.TypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00481"/>00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00482"/>00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(functionInvocationNode.GenericParametersListingNode.CloseAngleBracketToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00483"/>00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00484"/>00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00485"/>00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(functionInvocationNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00486"/>00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(functionInvocationNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00487"/>00487 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00488"/>00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00489"/>00489 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00490"/>00490 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00491"/>00491 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00492"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ab54d39a8a53ff3c666728c5c9c70941d">00492</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ab54d39a8a53ff3c666728c5c9c70941d">FunctionInvocationNode_Generic_Parameters</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00493"/>00493 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00494"/>00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;MyMethod&lt;int,&#32;MyClass&gt;(7,&#32;\&quot;Asdfg\&quot;)&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00495"/>00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00496"/>00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00497"/>00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionInvocationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_invocation_node">FunctionInvocationNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;GenericParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(functionInvocationNode.GenericParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00502"/>00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(functionInvocationNode.GenericParametersListingNode.OpenAngleBracketToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00503"/>00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00504"/>00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;intGenericParameterEntryNode&#32;=&#32;functionInvocationNode.GenericParametersListingNode.GenericParameterEntryNodeList[0];
<anchor xml:id="__expression_tests_8cs_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;int&quot;</emphasis>,&#32;intGenericParameterEntryNode.TypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00506"/>00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;stringGenericParameterEntryNode&#32;=&#32;functionInvocationNode.GenericParametersListingNode.GenericParameterEntryNodeList[1];
<anchor xml:id="__expression_tests_8cs_source_1l00508"/>00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;MyClass&quot;</emphasis>,&#32;stringGenericParameterEntryNode.TypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00510"/>00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(functionInvocationNode.GenericParametersListingNode.CloseAngleBracketToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00512"/>00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FunctionParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00514"/>00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00515"/>00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(functionInvocationNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00516"/>00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00517"/>00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;numericFunctionParameterEntryNode&#32;=&#32;functionInvocationNode.FunctionParametersListingNode.FunctionParameterEntryNodeList[0];
<anchor xml:id="__expression_tests_8cs_source_1l00518"/>00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.NumericLiteralToken,&#32;((<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)numericFunctionParameterEntryNode.ExpressionNode).LiteralSyntaxToken.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;stringFunctionParameterEntryNode&#32;=&#32;functionInvocationNode.FunctionParametersListingNode.FunctionParameterEntryNodeList[1];
<anchor xml:id="__expression_tests_8cs_source_1l00521"/>00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.StringLiteralToken,&#32;((<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)stringFunctionParameterEntryNode.ExpressionNode).LiteralSyntaxToken.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l00522"/>00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(functionInvocationNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00525"/>00525 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00526"/>00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00527"/>00527 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00528"/>00528 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00533"/>00533 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00534"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a04e1a3acf430552e52811eeba8dfafe2">00534</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a04e1a3acf430552e52811eeba8dfafe2">ConstructorInvocationNode_Basic</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00535"/>00535 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00536"/>00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;new&#32;Person()&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00537"/>00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00538"/>00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00539"/>00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__expression_tests_8cs_source_1l00540"/>00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00541"/>00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00542"/>00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00543"/>00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//constructorInvocationExpressionNode.ResultTypeClauseNode;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00544"/>00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00545"/>00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00546"/>00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00547"/>00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.FunctionParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00548"/>00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00549"/>00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(constructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList);
<anchor xml:id="__expression_tests_8cs_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00551"/>00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00552"/>00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00553"/>00553 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00555"/>00555 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00556"/>00556 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00561"/>00561 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00562"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ab3f32884460eb2bd41c1e0dfe032196a">00562</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ab3f32884460eb2bd41c1e0dfe032196a">ConstructorInvocationNode_Parameters</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00563"/>00563 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00564"/>00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;new&#32;Person(18,&#32;\&quot;John\&quot;)&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00565"/>00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00566"/>00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00567"/>00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__expression_tests_8cs_source_1l00568"/>00568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00569"/>00569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00570"/>00570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00571"/>00571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//constructorInvocationExpressionNode.ResultTypeClauseNode;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00572"/>00572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00573"/>00573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00574"/>00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00575"/>00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.FunctionParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00576"/>00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00577"/>00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FunctionParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00578"/>00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00579"/>00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00580"/>00580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;constructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList.Count);
<anchor xml:id="__expression_tests_8cs_source_1l00581"/>00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00582"/>00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00583"/>00583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00584"/>00584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00585"/>00585 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00586"/>00586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00587"/>00587 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00588"/>00588 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00593"/>00593 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00594"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a877f53dd75ed0b4398795b4126837543">00594</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a877f53dd75ed0b4398795b4126837543">ConstructorInvocationNode_Generic</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00595"/>00595 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00596"/>00596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;new&#32;Dictionary&lt;int,&#32;Person&gt;()&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00597"/>00597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00598"/>00598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00599"/>00599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__expression_tests_8cs_source_1l00600"/>00600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00601"/>00601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00602"/>00602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00603"/>00603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ResultTypeClauseNode.GenericParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00604"/>00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00605"/>00605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00606"/>00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode.OpenAngleBracketToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00607"/>00607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode.GenericParameterEntryNodeList.Count);
<anchor xml:id="__expression_tests_8cs_source_1l00608"/>00608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode.CloseAngleBracketToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00609"/>00609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00610"/>00610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00611"/>00611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.FunctionParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00612"/>00612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00613"/>00613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(constructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList);
<anchor xml:id="__expression_tests_8cs_source_1l00614"/>00614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00615"/>00615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00616"/>00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00617"/>00617 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00618"/>00618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00619"/>00619 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00620"/>00620 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00621"/>00621 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00622"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aae106b4b7d51e88010752d72dcf437b3">00622</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aae106b4b7d51e88010752d72dcf437b3">ConstructorInvocationNode_Generic_Parameters_MISSING_NumericLiteralToken_A</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00623"/>00623 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00624"/>00624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;constructor&#32;parameters&#32;are&#32;nonsensical&#32;and&#32;just&#32;exist&#32;for&#32;the&#32;sake&#32;of&#32;this&#32;test&#32;case.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00625"/>00625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;new&#32;Dictionary&lt;int,&#32;Person&gt;(0,&#32;\&quot;Test\&quot;)&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00626"/>00626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00627"/>00627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;token&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_namespacetest">test</link>.Lexer.SyntaxTokenList)
<anchor xml:id="__expression_tests_8cs_source_1l00628"/>00628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00629"/>00629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(token.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l00630"/>00630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00631"/>00631 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00632"/>00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00633"/>00633 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00634"/>00634 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00635"/>00635 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00636"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a014805396f0bad679a52393f7002a3da">00636</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a014805396f0bad679a52393f7002a3da">ConstructorInvocationNode_Generic_Parameters_MISSING_NumericLiteralToken_B</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00637"/>00637 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00638"/>00638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00639"/>00639 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;It&#32;turns&#32;out&#32;that&#32;&quot;0&quot;&#32;does&#32;not&#32;Lex&#32;to&#32;a&#32;NumericLiteralToken.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00640"/>00640 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;is&#32;one&#32;of&#32;the&#32;most&#32;ridiculous&#32;bugs&#32;I&apos;ve&#32;ever&#32;seen,</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00641"/>00641 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;because&#32;how&#32;am&#32;I&#32;only&#32;now&#32;seeing&#32;this?&#32;How&#32;long&#32;was&#32;this&#32;an&#32;issue&#32;for???</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00642"/>00642 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00643"/>00643 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;It&#32;doesn&apos;t&#32;Lex&#32;to&#32;anything,&#32;it&#32;just&#32;returns&#32;EndOfFileToken,&#32;or&#32;if&#32;more&#32;than&#32;&quot;0&quot;&#32;is&#32;in&#32;the&#32;text,</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00644"/>00644 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;skips&#32;over&#32;where&#32;the&#32;0-token&#32;would&#32;be.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00645"/>00645 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00646"/>00646 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Oh&#32;my&#32;gosh,&#32;I&apos;ve&#32;checked&#32;the&#32;&apos;CSharpLexer.cs&apos;&#32;and&#32;in&#32;the&#32;switch&#32;statement&#32;that</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00647"/>00647 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is&#32;within&#32;a&#32;while&#32;loop&#32;that&#32;goes&#32;over&#32;every&#32;character&#32;in&#32;the&#32;string,</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00648"/>00648 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;hardcoded&#32;cases&#32;1...9&#32;inclusive&#32;both&#32;ends&#32;but&#32;never&#32;&apos;0&apos;.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00649"/>00649 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00650"/>00650 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Someone&#32;needs&#32;to&#32;take&#32;away&#32;my&#32;keyboard&#32;because&#32;I&#32;am&#32;dangerously&#32;stupid.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00651"/>00651 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00652"/>00652 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TODO:&#32;Anything&#32;similar&#32;to&#32;this&#32;in&#32;the&#32;future&#32;should&#32;return&#32;a&#32;&apos;BadToken&apos;&#32;or&#32;some&#32;sort.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00653"/>00653 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00654"/>00654 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00655"/>00655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;constructor&#32;parameters&#32;are&#32;nonsensical&#32;and&#32;just&#32;exist&#32;for&#32;the&#32;sake&#32;of&#32;this&#32;test&#32;case.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00656"/>00656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;0&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00657"/>00657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00658"/>00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;token&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_namespacetest">test</link>.Lexer.SyntaxTokenList)
<anchor xml:id="__expression_tests_8cs_source_1l00659"/>00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00660"/>00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(token.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l00661"/>00661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00662"/>00662 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00663"/>00663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00664"/>00664 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00665"/>00665 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00670"/>00670 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00671"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa73f8d20ed94d015ee6a49ed122a646e">00671</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa73f8d20ed94d015ee6a49ed122a646e">ConstructorInvocationNode_Generic_Parameters</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00672"/>00672 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00673"/>00673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;constructor&#32;parameters&#32;are&#32;nonsensical&#32;and&#32;just&#32;exist&#32;for&#32;the&#32;sake&#32;of&#32;this&#32;test&#32;case.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00674"/>00674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;new&#32;Dictionary&lt;int,&#32;Person&gt;(0,&#32;\&quot;Test\&quot;)&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00675"/>00675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00676"/>00676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00677"/>00677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__expression_tests_8cs_source_1l00678"/>00678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00679"/>00679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00680"/>00680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00681"/>00681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ResultTypeClauseNode.GenericParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00682"/>00682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00683"/>00683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00684"/>00684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode.OpenAngleBracketToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00685"/>00685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00686"/>00686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode.GenericParameterEntryNodeList.Count);
<anchor xml:id="__expression_tests_8cs_source_1l00687"/>00687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00688"/>00688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;intGenericParameterEntryNode&#32;=&#32;constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode.GenericParameterEntryNodeList[0];
<anchor xml:id="__expression_tests_8cs_source_1l00689"/>00689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;int&quot;</emphasis>,&#32;intGenericParameterEntryNode.TypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00690"/>00690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00691"/>00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;personGenericParameterEntryNode&#32;=&#32;constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode.GenericParameterEntryNodeList[1];
<anchor xml:id="__expression_tests_8cs_source_1l00692"/>00692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;Person&quot;</emphasis>,&#32;personGenericParameterEntryNode.TypeClauseNode.TypeIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00693"/>00693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00694"/>00694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ResultTypeClauseNode.GenericParametersListingNode.CloseAngleBracketToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00695"/>00695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00696"/>00696 
<anchor xml:id="__expression_tests_8cs_source_1l00697"/>00697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FunctionParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00698"/>00698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00699"/>00699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.FunctionParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00700"/>00700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00701"/>00701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;constructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList.Count);
<anchor xml:id="__expression_tests_8cs_source_1l00702"/>00702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00703"/>00703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00704"/>00704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00705"/>00705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00706"/>00706 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00707"/>00707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00708"/>00708 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00709"/>00709 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00710"/>00710 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00711"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a42c129f9a23b9ea2b5ae07eb3c67bee7">00711</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a42c129f9a23b9ea2b5ae07eb3c67bee7">ConstructorInvocationNode_NoTypeClauseNode</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00712"/>00712 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00713"/>00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;new()&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00714"/>00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00715"/>00715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00716"/>00716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00717"/>00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00718"/>00718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00719"/>00719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00720"/>00720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(constructorInvocationExpressionNode.ResultTypeClauseNode);
<anchor xml:id="__expression_tests_8cs_source_1l00721"/>00721 
<anchor xml:id="__expression_tests_8cs_source_1l00722"/>00722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FunctionParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00723"/>00723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00724"/>00724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.FunctionParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00725"/>00725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00726"/>00726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(constructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList);
<anchor xml:id="__expression_tests_8cs_source_1l00727"/>00727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00728"/>00728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00729"/>00729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00730"/>00730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00731"/>00731 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00732"/>00732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00733"/>00733 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00734"/>00734 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00735"/>00735 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00736"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a0b7fea0e9af1af51f7c5a5c1e53ba3a2">00736</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a0b7fea0e9af1af51f7c5a5c1e53ba3a2">ObjectInitializationNode_Parameters_NoTrailingComma</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00737"/>00737 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00738"/>00738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;new&#32;MyClass&#32;{&#32;FirstName&#32;=&#32;firstName,&#32;LastName&#32;=&#32;lastName&#32;}&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00739"/>00739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00740"/>00740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00741"/>00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00742"/>00742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00743"/>00743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00744"/>00744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00745"/>00745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructorInvocationExpressionNode.ResultTypeClauseNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00746"/>00746 
<anchor xml:id="__expression_tests_8cs_source_1l00747"/>00747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FunctionParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00748"/>00748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00749"/>00749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(constructorInvocationExpressionNode.FunctionParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00750"/>00750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00751"/>00751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00752"/>00752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ObjectInitializationParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00753"/>00753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00754"/>00754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00755"/>00755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00756"/>00756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00757"/>00757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;{&#32;FirstName&#32;=&#32;firstName,&#32;LastName&#32;=&#32;lastName&#32;};</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00758"/>00758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00759"/>00759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;firstNameObjectInitializationParameterEntryNode&#32;=&#32;constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList[0];
<anchor xml:id="__expression_tests_8cs_source_1l00760"/>00760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00761"/>00761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(firstNameObjectInitializationParameterEntryNode.PropertyIdentifierToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00762"/>00762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;FirstName&quot;</emphasis>,&#32;firstNameObjectInitializationParameterEntryNode.PropertyIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00763"/>00763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(firstNameObjectInitializationParameterEntryNode.EqualsToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00764"/>00764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00765"/>00765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;ambiguousIdentifierExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_ambi6c9b6a5b7a1d6dc1278537e7b1a3ccbc">AmbiguousIdentifierExpressionNode</link>)firstNameObjectInitializationParameterEntryNode.ExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00766"/>00766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;firstName&quot;</emphasis>,&#32;ambiguousIdentifierExpressionNode.Token.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00767"/>00767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00768"/>00768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00769"/>00769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lastNameObjectInitializationParameterEntryNode&#32;=&#32;constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList[1];
<anchor xml:id="__expression_tests_8cs_source_1l00770"/>00770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00771"/>00771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(lastNameObjectInitializationParameterEntryNode.PropertyIdentifierToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00772"/>00772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;LastName&quot;</emphasis>,&#32;lastNameObjectInitializationParameterEntryNode.PropertyIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00773"/>00773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(lastNameObjectInitializationParameterEntryNode.EqualsToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00774"/>00774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00775"/>00775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;ambiguousIdentifierExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_ambi6c9b6a5b7a1d6dc1278537e7b1a3ccbc">AmbiguousIdentifierExpressionNode</link>)lastNameObjectInitializationParameterEntryNode.ExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00776"/>00776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;lastName&quot;</emphasis>,&#32;ambiguousIdentifierExpressionNode.Token.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00777"/>00777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00778"/>00778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00779"/>00779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00780"/>00780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00781"/>00781 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00782"/>00782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00783"/>00783 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00784"/>00784 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00785"/>00785 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00786"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a05ab106f16c0dd32ec45ca38b67b0f5e">00786</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a05ab106f16c0dd32ec45ca38b67b0f5e">ObjectInitializationNode__Parameters_WithTrailingComma</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00787"/>00787 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00788"/>00788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;new&#32;MyClassAaa&#32;{&#32;FirstName&#32;=&#32;firstName,&#32;LastName&#32;=&#32;lastName,&#32;}&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00789"/>00789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00790"/>00790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00791"/>00791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00792"/>00792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00793"/>00793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00794"/>00794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00795"/>00795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructorInvocationExpressionNode.ResultTypeClauseNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00796"/>00796 
<anchor xml:id="__expression_tests_8cs_source_1l00797"/>00797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FunctionParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00798"/>00798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00799"/>00799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(constructorInvocationExpressionNode.FunctionParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00800"/>00800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00801"/>00801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00802"/>00802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ObjectInitializationParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00803"/>00803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00804"/>00804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00805"/>00805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00806"/>00806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00807"/>00807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;{&#32;FirstName&#32;=&#32;firstName,&#32;LastName&#32;=&#32;lastName&#32;};</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00808"/>00808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00809"/>00809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;firstNameObjectInitializationParameterEntryNode&#32;=&#32;constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList[0];
<anchor xml:id="__expression_tests_8cs_source_1l00810"/>00810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00811"/>00811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;FirstName&quot;</emphasis>,&#32;firstNameObjectInitializationParameterEntryNode.PropertyIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00812"/>00812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(firstNameObjectInitializationParameterEntryNode.EqualsToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00813"/>00813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00814"/>00814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;ambiguousIdentifierExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_ambi6c9b6a5b7a1d6dc1278537e7b1a3ccbc">AmbiguousIdentifierExpressionNode</link>)firstNameObjectInitializationParameterEntryNode.ExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00815"/>00815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;firstName&quot;</emphasis>,&#32;ambiguousIdentifierExpressionNode.Token.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00816"/>00816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00817"/>00817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00818"/>00818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lastNameObjectInitializationParameterEntryNode&#32;=&#32;constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList[1];
<anchor xml:id="__expression_tests_8cs_source_1l00819"/>00819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00820"/>00820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;LastName&quot;</emphasis>,&#32;lastNameObjectInitializationParameterEntryNode.PropertyIdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00821"/>00821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(lastNameObjectInitializationParameterEntryNode.EqualsToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00822"/>00822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00823"/>00823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;ambiguousIdentifierExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_ambi6c9b6a5b7a1d6dc1278537e7b1a3ccbc">AmbiguousIdentifierExpressionNode</link>)lastNameObjectInitializationParameterEntryNode.ExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00824"/>00824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;lastName&quot;</emphasis>,&#32;ambiguousIdentifierExpressionNode.Token.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00825"/>00825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00826"/>00826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00827"/>00827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00828"/>00828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00829"/>00829 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00830"/>00830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00831"/>00831 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00832"/>00832 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00833"/>00833 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00834"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a5baae3b4753b8ae57ab6ad8e2b00ae17">00834</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a5baae3b4753b8ae57ab6ad8e2b00ae17">ObjectInitializationNode_NoParameters_NoTrailingComma</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00835"/>00835 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00836"/>00836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;new&#32;MyClassAaa&#32;{&#32;}&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00837"/>00837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00838"/>00838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00839"/>00839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00840"/>00840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00841"/>00841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00842"/>00842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00843"/>00843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructorInvocationExpressionNode.ResultTypeClauseNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00844"/>00844 
<anchor xml:id="__expression_tests_8cs_source_1l00845"/>00845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FunctionParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00846"/>00846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00847"/>00847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(constructorInvocationExpressionNode.FunctionParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00848"/>00848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00849"/>00849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00850"/>00850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ObjectInitializationParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00851"/>00851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00852"/>00852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00853"/>00853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00854"/>00854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00855"/>00855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList);
<anchor xml:id="__expression_tests_8cs_source_1l00856"/>00856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00857"/>00857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00858"/>00858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00859"/>00859 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00860"/>00860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00861"/>00861 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00862"/>00862 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00863"/>00863 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00864"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a77097dabad79975d43c6eae457103650">00864</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a77097dabad79975d43c6eae457103650">ObjectInitializationNode_NoParameters_WithTrailingComma</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00865"/>00865 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00866"/>00866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;new&#32;MyClassAaa&#32;{&#32;,&#32;}&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00867"/>00867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00868"/>00868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00869"/>00869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00870"/>00870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00871"/>00871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00872"/>00872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00873"/>00873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructorInvocationExpressionNode.ResultTypeClauseNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00874"/>00874 
<anchor xml:id="__expression_tests_8cs_source_1l00875"/>00875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FunctionParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00876"/>00876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00877"/>00877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(constructorInvocationExpressionNode.FunctionParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00878"/>00878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00879"/>00879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00880"/>00880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ObjectInitializationParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00881"/>00881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00882"/>00882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00883"/>00883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00884"/>00884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00885"/>00885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList);
<anchor xml:id="__expression_tests_8cs_source_1l00886"/>00886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00887"/>00887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00888"/>00888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00889"/>00889 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00890"/>00890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00891"/>00891 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00892"/>00892 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00893"/>00893 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00894"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1acd0d286f7ff57b46fbc60035f75ba1f3">00894</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1acd0d286f7ff57b46fbc60035f75ba1f3">ObjectInitializationNode_WithParenthesis</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00895"/>00895 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00896"/>00896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;new&#32;MyClassAaa()&#32;{&#32;}&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00897"/>00897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00898"/>00898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00899"/>00899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00900"/>00900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00901"/>00901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00902"/>00902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00903"/>00903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructorInvocationExpressionNode.ResultTypeClauseNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00904"/>00904 
<anchor xml:id="__expression_tests_8cs_source_1l00905"/>00905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FunctionParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00906"/>00906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00907"/>00907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.FunctionParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00908"/>00908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00909"/>00909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(constructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList);
<anchor xml:id="__expression_tests_8cs_source_1l00910"/>00910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00911"/>00911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00912"/>00912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00913"/>00913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ObjectInitializationParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00914"/>00914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00915"/>00915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00916"/>00916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00917"/>00917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00918"/>00918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList);
<anchor xml:id="__expression_tests_8cs_source_1l00919"/>00919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00920"/>00920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00921"/>00921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00922"/>00922 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00923"/>00923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00924"/>00924 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00925"/>00925 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00926"/>00926 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00927"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa190fff943e737a2b8af193068176eed">00927</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa190fff943e737a2b8af193068176eed">CollectionInitializationNode_Parameters_NoTrailingComma</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00928"/>00928 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00929"/>00929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;new&#32;List&lt;int&gt;&#32;{&#32;1,&#32;2&#32;}&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00930"/>00930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00931"/>00931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00932"/>00932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00933"/>00933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00934"/>00934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00935"/>00935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00936"/>00936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructorInvocationExpressionNode.ResultTypeClauseNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00937"/>00937 
<anchor xml:id="__expression_tests_8cs_source_1l00938"/>00938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FunctionParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00939"/>00939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00940"/>00940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(constructorInvocationExpressionNode.FunctionParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00941"/>00941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00942"/>00942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00943"/>00943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ObjectInitializationParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00944"/>00944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00945"/>00945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00946"/>00946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00947"/>00947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00948"/>00948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;{&#32;1,&#32;2&#32;};</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00949"/>00949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00950"/>00950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;firstCollectionInitializationParameterEntryNode&#32;=&#32;constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList[0];
<anchor xml:id="__expression_tests_8cs_source_1l00951"/>00951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(firstCollectionInitializationParameterEntryNode.IsCollectionInitialization);
<anchor xml:id="__expression_tests_8cs_source_1l00952"/>00952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00953"/>00953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;literalExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)firstCollectionInitializationParameterEntryNode.ExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00954"/>00954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;1&quot;</emphasis>,&#32;literalExpressionNode.LiteralSyntaxToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00955"/>00955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(literalExpressionNode.LiteralSyntaxToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00956"/>00956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00957"/>00957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00958"/>00958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;secondCollectionInitializationParameterEntryNode&#32;=&#32;constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList[1];
<anchor xml:id="__expression_tests_8cs_source_1l00959"/>00959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(secondCollectionInitializationParameterEntryNode.IsCollectionInitialization);
<anchor xml:id="__expression_tests_8cs_source_1l00960"/>00960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00961"/>00961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;literalExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)secondCollectionInitializationParameterEntryNode.ExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l00962"/>00962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;2&quot;</emphasis>,&#32;literalExpressionNode.LiteralSyntaxToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l00963"/>00963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(literalExpressionNode.LiteralSyntaxToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00964"/>00964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00965"/>00965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00966"/>00966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00967"/>00967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00968"/>00968 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00969"/>00969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00970"/>00970 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00971"/>00971 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00972"/>00972 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l00973"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa8e6cd46befdb2b0d6348a57db7d2cf1">00973</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa8e6cd46befdb2b0d6348a57db7d2cf1">CollectionInitializationNode_Parameters_WithTrailingComma</link>()
<anchor xml:id="__expression_tests_8cs_source_1l00974"/>00974 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00975"/>00975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;new&#32;List&lt;Person&gt;&#32;{&#32;new&#32;Person(1,&#32;\&quot;John\&quot;),&#32;new(2,&#32;\&quot;Jane\&quot;),&#32;}&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l00976"/>00976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l00977"/>00977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00978"/>00978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l00979"/>00979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00980"/>00980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00981"/>00981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00982"/>00982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructorInvocationExpressionNode.ResultTypeClauseNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00983"/>00983 
<anchor xml:id="__expression_tests_8cs_source_1l00984"/>00984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FunctionParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00985"/>00985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00986"/>00986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(constructorInvocationExpressionNode.FunctionParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00987"/>00987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l00988"/>00988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00989"/>00989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ObjectInitializationParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00990"/>00990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00991"/>00991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l00992"/>00992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l00993"/>00993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l00994"/>00994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;{&#32;new&#32;Person(1,&#32;&quot;John&quot;),&#32;new(2,&#32;&quot;Jane&quot;),&#32;};</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00995"/>00995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00996"/>00996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;new&#32;Person(1,&#32;&quot;John&quot;),</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l00997"/>00997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l00998"/>00998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;firstCollectionInitializationParameterEntryNode&#32;=&#32;constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList[0];
<anchor xml:id="__expression_tests_8cs_source_1l00999"/>00999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(firstCollectionInitializationParameterEntryNode.IsCollectionInitialization);
<anchor xml:id="__expression_tests_8cs_source_1l01000"/>01000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01001"/>01001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;innerConstructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)firstCollectionInitializationParameterEntryNode.ExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l01002"/>01002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01003"/>01003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(innerConstructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l01004"/>01004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.Equal(innerConstructorInvocationExpressionNode.ResultTypeClauseNode);</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01005"/>01005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01006"/>01006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;innerFunctionParametersListingNode&#32;(1,&#32;&quot;John&quot;),</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01007"/>01007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01008"/>01008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1,</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01009"/>01009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01010"/>01010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;innerFunctionParametersListingNode&#32;=&#32;innerConstructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList[0];
<anchor xml:id="__expression_tests_8cs_source_1l01011"/>01011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01012"/>01012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;literalExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)innerFunctionParametersListingNode.ExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l01013"/>01013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;1&quot;</emphasis>,&#32;literalExpressionNode.LiteralSyntaxToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l01014"/>01014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01015"/>01015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(innerFunctionParametersListingNode.HasOutKeyword);
<anchor xml:id="__expression_tests_8cs_source_1l01016"/>01016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(innerFunctionParametersListingNode.HasInKeyword);
<anchor xml:id="__expression_tests_8cs_source_1l01017"/>01017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(innerFunctionParametersListingNode.HasRefKeyword);
<anchor xml:id="__expression_tests_8cs_source_1l01018"/>01018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01019"/>01019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;John&quot;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01020"/>01020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01021"/>01021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;innerFunctionParametersListingNode&#32;=&#32;innerConstructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList[1];
<anchor xml:id="__expression_tests_8cs_source_1l01022"/>01022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01023"/>01023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;literalExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)innerFunctionParametersListingNode.ExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l01024"/>01024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;John&quot;</emphasis>,&#32;literalExpressionNode.LiteralSyntaxToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l01025"/>01025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01026"/>01026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(innerFunctionParametersListingNode.HasOutKeyword);
<anchor xml:id="__expression_tests_8cs_source_1l01027"/>01027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(innerFunctionParametersListingNode.HasInKeyword);
<anchor xml:id="__expression_tests_8cs_source_1l01028"/>01028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(innerFunctionParametersListingNode.HasRefKeyword);
<anchor xml:id="__expression_tests_8cs_source_1l01029"/>01029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01030"/>01030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01031"/>01031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01032"/>01032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(innerConstructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l01033"/>01033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01034"/>01034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;new(2,&#32;&quot;Jane&quot;),</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01035"/>01035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01036"/>01036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;secondCollectionInitializationParameterEntryNode&#32;=&#32;constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList[1];
<anchor xml:id="__expression_tests_8cs_source_1l01037"/>01037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(secondCollectionInitializationParameterEntryNode.IsCollectionInitialization);
<anchor xml:id="__expression_tests_8cs_source_1l01038"/>01038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01039"/>01039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;innerConstructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)secondCollectionInitializationParameterEntryNode.ExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l01040"/>01040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(innerConstructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l01041"/>01041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01042"/>01042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;innerFunctionParametersListingNode&#32;(2,&#32;&quot;Jane&quot;),</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01043"/>01043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01044"/>01044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2,</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01045"/>01045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01046"/>01046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;innerFunctionParametersListingNode&#32;=&#32;innerConstructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList[0];
<anchor xml:id="__expression_tests_8cs_source_1l01047"/>01047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01048"/>01048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;literalExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)innerFunctionParametersListingNode.ExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l01049"/>01049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;2&quot;</emphasis>,&#32;literalExpressionNode.LiteralSyntaxToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l01050"/>01050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01051"/>01051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(innerFunctionParametersListingNode.HasOutKeyword);
<anchor xml:id="__expression_tests_8cs_source_1l01052"/>01052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(innerFunctionParametersListingNode.HasInKeyword);
<anchor xml:id="__expression_tests_8cs_source_1l01053"/>01053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(innerFunctionParametersListingNode.HasRefKeyword);
<anchor xml:id="__expression_tests_8cs_source_1l01054"/>01054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01055"/>01055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;Jane&quot;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01056"/>01056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01057"/>01057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;innerFunctionParametersListingNode&#32;=&#32;innerConstructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList[1];
<anchor xml:id="__expression_tests_8cs_source_1l01058"/>01058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01059"/>01059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;literalExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_literal_expression_node">LiteralExpressionNode</link>)innerFunctionParametersListingNode.ExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l01060"/>01060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;Jane&quot;</emphasis>,&#32;literalExpressionNode.LiteralSyntaxToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l01061"/>01061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01062"/>01062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(innerFunctionParametersListingNode.HasOutKeyword);
<anchor xml:id="__expression_tests_8cs_source_1l01063"/>01063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(innerFunctionParametersListingNode.HasInKeyword);
<anchor xml:id="__expression_tests_8cs_source_1l01064"/>01064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(innerFunctionParametersListingNode.HasRefKeyword);
<anchor xml:id="__expression_tests_8cs_source_1l01065"/>01065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01066"/>01066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01067"/>01067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01068"/>01068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Assert.Equal(&quot;2&quot;,&#32;literalExpressionNode.LiteralSyntaxToken.TextSpan.GetText());</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01069"/>01069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Assert.True(literalExpressionNode.LiteralSyntaxToken.ConstructorWasInvoked);</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01070"/>01070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01071"/>01071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(innerConstructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l01072"/>01072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01073"/>01073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01074"/>01074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l01075"/>01075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01076"/>01076 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01077"/>01077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01078"/>01078 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01079"/>01079 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01080"/>01080 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01081"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a03ca74ec537fbd03ad8edd9b358a8176">01081</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a03ca74ec537fbd03ad8edd9b358a8176">CollectionInitializationNode_NoParameters_NoTrailingComma</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01082"/>01082 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01083"/>01083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;new&#32;List&lt;int&gt;&#32;{&#32;}&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01084"/>01084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01085"/>01085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01086"/>01086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l01087"/>01087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01088"/>01088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l01089"/>01089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01090"/>01090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructorInvocationExpressionNode.ResultTypeClauseNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01091"/>01091 
<anchor xml:id="__expression_tests_8cs_source_1l01092"/>01092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FunctionParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01093"/>01093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01094"/>01094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(constructorInvocationExpressionNode.FunctionParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l01095"/>01095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01096"/>01096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01097"/>01097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ObjectInitializationParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01098"/>01098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01099"/>01099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l01100"/>01100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l01101"/>01101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01102"/>01102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList);
<anchor xml:id="__expression_tests_8cs_source_1l01103"/>01103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01104"/>01104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l01105"/>01105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01106"/>01106 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01107"/>01107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01108"/>01108 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01109"/>01109 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01110"/>01110 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01111"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a83177b5d8509cb331770228a9d1ee9dd">01111</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a83177b5d8509cb331770228a9d1ee9dd">CollectionInitializationNode_NoParameters_WithTrailingComma</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01112"/>01112 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01113"/>01113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;new&#32;List&lt;Person&gt;&#32;{&#32;,&#32;}&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01114"/>01114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01115"/>01115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01116"/>01116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l01117"/>01117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01118"/>01118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l01119"/>01119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01120"/>01120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructorInvocationExpressionNode.ResultTypeClauseNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01121"/>01121 
<anchor xml:id="__expression_tests_8cs_source_1l01122"/>01122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FunctionParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01123"/>01123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01124"/>01124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(constructorInvocationExpressionNode.FunctionParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l01125"/>01125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01126"/>01126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01127"/>01127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ObjectInitializationParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01128"/>01128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01129"/>01129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l01130"/>01130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l01131"/>01131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01132"/>01132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList);
<anchor xml:id="__expression_tests_8cs_source_1l01133"/>01133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01134"/>01134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l01135"/>01135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01136"/>01136 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01137"/>01137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01138"/>01138 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01139"/>01139 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01140"/>01140 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01141"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a83abf38bb6118d54a036116f57174410">01141</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a83abf38bb6118d54a036116f57174410">CollectionInitializationNode_WithParenthesis</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01142"/>01142 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01143"/>01143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;new&#32;List&lt;Person&gt;()&#32;{&#32;}&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01144"/>01144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01145"/>01145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01146"/>01146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorInvocationExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_cons4f329ee56fa01887314a524cd0be1b79">ConstructorInvocationExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l01147"/>01147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01148"/>01148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.NewKeywordToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l01149"/>01149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01150"/>01150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructorInvocationExpressionNode.ResultTypeClauseNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01151"/>01151 
<anchor xml:id="__expression_tests_8cs_source_1l01152"/>01152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FunctionParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01153"/>01153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01154"/>01154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.FunctionParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l01155"/>01155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01156"/>01156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l01157"/>01157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(constructorInvocationExpressionNode.FunctionParametersListingNode.FunctionParameterEntryNodeList);
<anchor xml:id="__expression_tests_8cs_source_1l01158"/>01158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.FunctionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l01159"/>01159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01160"/>01160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01161"/>01161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ObjectInitializationParametersListingNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01162"/>01162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01163"/>01163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode);
<anchor xml:id="__expression_tests_8cs_source_1l01164"/>01164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.OpenBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l01165"/>01165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01166"/>01166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.ObjectInitializationParameterEntryNodeList);
<anchor xml:id="__expression_tests_8cs_source_1l01167"/>01167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01168"/>01168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(constructorInvocationExpressionNode.ObjectInitializationParametersListingNode.CloseBraceToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l01169"/>01169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01170"/>01170 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01171"/>01171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01172"/>01172 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01173"/>01173 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01174"/>01174 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01175"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1acf86926827eb50318740028eb6674130">01175</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1acf86926827eb50318740028eb6674130">LambdaFunction_Expression_NoParameter</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01176"/>01176 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01177"/>01177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;()&#32;=&gt;&#32;\&quot;Abc\&quot;;&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01178"/>01178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01179"/>01179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01180"/>01180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lambdaExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_lambda_expression_node">LambdaExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l01181"/>01181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(lambdaExpressionNode.CodeBlockNodeIsExpression);
<anchor xml:id="__expression_tests_8cs_source_1l01182"/>01182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(lambdaExpressionNode.VariableDeclarationNodeList);
<anchor xml:id="__expression_tests_8cs_source_1l01183"/>01183 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01184"/>01184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01185"/>01185 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01186"/>01186 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01187"/>01187 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01188"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa9223991fc39094eeea60b37e6d8d255">01188</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa9223991fc39094eeea60b37e6d8d255">LambdaFunction_Expression_SingleParameter</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01189"/>01189 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01190"/>01190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01191"/>01191 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Goal:&#32;Parse&#32;lambda&#32;expression&#32;variable&#32;declarations&#32;(2024-11-03)</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01192"/>01192 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;================================================================</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01193"/>01193 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01194"/>01194 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&apos;intPerson&apos;&#32;is&#32;to&#32;signify&#32;&apos;int&apos;&#32;or&#32;&apos;Person&apos;&#32;because&#32;this&#32;is&#32;a&#32;&apos;keyword&apos;&#32;and&#32;an&#32;&apos;identifier&apos;.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01195"/>01195 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;So&#32;remember&#32;the&#32;general&#32;type&#32;clause&#32;matching&#32;not&#32;just&#32;an&#32;identifier.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01196"/>01196 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01197"/>01197 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Rename&#32;&apos;x&apos;&#32;to&#32;&apos;argsX&apos;?</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01198"/>01198 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01199"/>01199 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Technically&#32;&apos;intPerson&apos;&#32;does&#32;not&#32;encompass&#32;the&#32;case&#32;of&#32;a&#32;contextual&#32;keyword...</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01200"/>01200 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-10&#32;points</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01201"/>01201 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01202"/>01202 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Cases:</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01203"/>01203 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;================================================================</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01204"/>01204 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;()&#32;=&gt;&#32;...;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01205"/>01205 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01206"/>01206 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;BreakList:&#32;[(StatementDelimiterToken,&#32;null)]</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01207"/>01207 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;EmptyExpressionNode&#32;+&#32;OpenParenthesisToken&#32;=&gt;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01208"/>01208 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01209"/>01209 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;Push(new&#32;ParenthesizedExpressionNode());</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01210"/>01210 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;new&#32;EmptyExpressionNode();</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01211"/>01211 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01212"/>01212 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01213"/>01213 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;BreakList:&#32;[(StatementDelimiterToken,&#32;null),&#32;(CloseParenthesisToken,&#32;ParenthesizedExpressionNode)]</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01214"/>01214 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;EmptyExpressionNode&#32;+&#32;CloseParenthesisToken&#32;=&gt;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01215"/>01215 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01216"/>01216 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(peek(1)==EqualsToken&#32;&amp;&amp;&#32;peek(2)==CloseAngleBracketToken)</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01217"/>01217 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;LambdaExpressionNode;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01218"/>01218 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01219"/>01219 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;ParenthesizedExpressionNode;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01220"/>01220 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01221"/>01221 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01222"/>01222 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Related&#32;case&#32;of&#32;ParenthesizedExpressionNode&#32;with&#32;empty&#32;inner&#32;expression&#32;then&#32;StatementDelimiterToken:</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01223"/>01223 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;();</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01224"/>01224 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01225"/>01225 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;================================================================</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01226"/>01226 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;x&#32;=&gt;&#32;...;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01227"/>01227 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01228"/>01228 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Related&#32;case&#32;of&#32;VariableAssignmentExpressionNode:</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01229"/>01229 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;x&#32;=&#32;...;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01230"/>01230 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01231"/>01231 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Related&#32;case&#32;of&#32;FunctionInvocationNode:</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01232"/>01232 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;x();</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01233"/>01233 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01234"/>01234 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;================================================================</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01235"/>01235 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;intPerson&#32;x&#32;=&gt;&#32;...;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01236"/>01236 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01237"/>01237 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;This&#32;case&#32;is&#32;actually&#32;quite&#32;unique.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01238"/>01238 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;AmbiguousIdentifierNode&#32;AmbiguousIdentifierNode&#32;=&gt;&#32;...;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01239"/>01239 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01240"/>01240 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;Two&#32;consecutive&#32;AmbiguousIdentifierNode(s)&#32;can&#32;happen&#32;in&#32;other&#32;syntax.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01241"/>01241 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;But,&#32;these&#32;other&#32;syntax&#32;begin&#32;with&#32;a&#32;keyword.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01242"/>01242 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;So,&#32;the&#32;lack&#32;of&#32;a&#32;keyword&#32;prior&#32;to&#32;the&#32;two&#32;nodes&#32;is&#32;indicative&#32;of&#32;it&#32;being&#32;a&#32;lambda&#32;expression.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01243"/>01243 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01244"/>01244 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Perhaps&#32;check&#32;if&#32;following&#32;the&#32;two&#32;nodes&#32;there&#32;is&#32;a&#32;&apos;=&gt;&apos;&#32;syntax&#32;prior&#32;to&#32;deciding&#32;it&#32;is&#32;a&#32;lambda&#32;expression.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01245"/>01245 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;If&#32;there&#32;is&#32;NOT&#32;&apos;=&gt;&apos;&#32;then&#32;decide&#32;it&#32;is&#32;a&#32;BadExpressionNode.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01246"/>01246 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01247"/>01247 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;Although,&#32;this&#32;actually&#32;is&#32;the&#32;exact&#32;same&#32;scenario&#32;as:</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01248"/>01248 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(intPerson&#32;x)&#32;=&gt;&#32;...;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01249"/>01249 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01250"/>01250 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;It&#32;is&#32;the&#32;same&#32;because&#32;they&#32;both&#32;start&#32;with&#32;an&#32;EmptyExpressionNode&#32;upon&#32;encountering&#32;the&#32;two&#32;consecutive</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01251"/>01251 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;AmbiguousIdentifierNode(s).</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01252"/>01252 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01253"/>01253 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;So,&#32;only&#32;checking&#32;for&#32;the&#32;next&#32;few&#32;tokens&#32;to&#32;be&#32;&apos;=&gt;&apos;&#32;won&apos;t&#32;work.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01254"/>01254 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;Because&#32;there&#32;could&#32;be&#32;an&#32;unknown&#32;amount&#32;of&#32;parameters&#32;being&#32;defined,&#32;such&#32;that&#32;a&#32;&apos;,&apos;&#32;is&#32;found&#32;instead&#32;of&#32;a&#32;&apos;=&gt;&apos;.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01255"/>01255 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;As&#32;well,&#32;there&#32;could&#32;be&#32;&apos;)&apos;&#32;found&#32;if&#32;reading&#32;the&#32;final&#32;parameter.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01256"/>01256 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01257"/>01257 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;================================================================</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01258"/>01258 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(x)&#32;=&gt;&#32;...;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01259"/>01259 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01260"/>01260 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;BreakList:&#32;[(StatementDelimiterToken,&#32;null)]</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01261"/>01261 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;EmptyExpressionNode&#32;+&#32;OpenParenthesisToken&#32;=&gt;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01262"/>01262 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01263"/>01263 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;Push(new&#32;ParenthesizedExpressionNode());</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01264"/>01264 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;new&#32;EmptyExpressionNode();</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01265"/>01265 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01266"/>01266 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01267"/>01267 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;BreakList:&#32;[(StatementDelimiterToken,&#32;null),&#32;(CloseParenthesisToken,&#32;ParenthesizedExpressionNode)]</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01268"/>01268 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;EmptyExpressionNode&#32;+&#32;IdentifierToken&#32;=&gt;&#32;AmbiguousIdentifierExpressionNode;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01269"/>01269 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01270"/>01270 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;BreakList:&#32;[(StatementDelimiterToken,&#32;null),&#32;(CloseParenthesisToken,&#32;ParenthesizedExpressionNode)]</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01271"/>01271 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;AmbiguousIdentifierExpressionNode&#32;+&#32;CloseParenthesisToken&#32;=&gt;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01272"/>01272 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01273"/>01273 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(peek(1)==EqualsToken&#32;&amp;&amp;&#32;peek(2)==CloseAngleBracketToken)</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01274"/>01274 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;LambdaExpressionNode;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01275"/>01275 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01276"/>01276 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;ParenthesizedExpressionNode;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01277"/>01277 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01278"/>01278 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01279"/>01279 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Related&#32;case&#32;of&#32;explicit&#32;casting:</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01280"/>01280 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;(intPerson)x;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01281"/>01281 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;EmptyExpressionNode&#32;+&#32;OpenParenthesisToken&#32;=&gt;&#32;ParenthesizedExpressionNode;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01282"/>01282 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01283"/>01283 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;(intPerson)&#32;=&gt;&#32;...;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01284"/>01284 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;EmptyExpressionNode&#32;+&#32;OpenParenthesisToken&#32;=&gt;&#32;ParenthesizedExpressionNode;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01285"/>01285 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01286"/>01286 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;================================================================</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01287"/>01287 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(intPerson&#32;x)&#32;=&gt;&#32;...;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01288"/>01288 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01289"/>01289 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;One&#32;of&#32;the&#32;main&#32;issues&#32;that&#32;I&apos;m&#32;having&#32;is&#32;how&#32;to&#32;track&#32;the&#32;&apos;intPerson&#32;x&apos;&#32;during&#32;the</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01290"/>01290 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;time&#32;spent&#32;as&#32;a&#32;ParenthesizedExpressionNode.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01291"/>01291 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01292"/>01292 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;The&#32;same&#32;is&#32;true&#32;for&#32;&apos;x,&#32;y&apos;.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01293"/>01293 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01294"/>01294 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;Because&#32;these&#32;syntax&#32;are&#32;nonsensical&#32;to&#32;the&#32;ParenthesizedExpressionNode.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01295"/>01295 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01296"/>01296 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;I&#32;could&#32;store&#32;each&#32;&apos;AmbiguousIdentifierNode&apos;&#32;in&#32;the&#32;SyntaxList&#32;property&#32;of&#32;a&#32;&apos;BadExpressionNode&apos;.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01297"/>01297 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01298"/>01298 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;Then,&#32;if&#32;I&#32;later&#32;determine&#32;that&#32;im&#32;looking&#32;at&#32;a&#32;LambdaExpressionNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01299"/>01299 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;can&#32;give&#32;the&#32;LambdaExpressionNode&#32;the&#32;&apos;BadExpressionNode&apos;.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01300"/>01300 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01301"/>01301 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;At&#32;that&#32;point&#32;the&#32;LambdaExpressionNode&#32;can&#32;then&#32;make&#32;sense&#32;of&#32;the&#32;&apos;BadExpressionNode&apos;&#32;itself.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01302"/>01302 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01303"/>01303 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;If&#32;the&#32;BadExpressionNode&apos;s&#32;SyntaxList&#32;is:&#32;{&#32;&apos;intPerson&apos;,&#32;&apos;x&apos;&#32;}.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01304"/>01304 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;Then&#32;the&#32;LambdaExpressionNode&#32;can&#32;iterate&#32;over&#32;each&#32;item,</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01305"/>01305 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;and&#32;take&#32;two&#32;consecutive&#32;AmbiguousIdentifierNode(s)&#32;to&#32;be&#32;a&#32;TypeClauseNode&#32;and&#32;&quot;variable&#32;identifier&quot;.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01306"/>01306 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01307"/>01307 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;Maybe&#32;if&#32;the&#32;LambdaExpressionNode&#32;finds&#32;3&#32;consecutive&#32;AmbiguousIdentifierNode(s),</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01308"/>01308 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;then&#32;the&#32;LambdaExpressionNode&#32;itself&#32;is&#32;a&#32;BadExpressionNode?</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01309"/>01309 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01310"/>01310 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;If&#32;the&#32;LambdaExpressionNode&#32;finds&#32;a&#32;CommaToken,&#32;then&#32;it&#32;can&#32;start&#32;tracking&#32;a&#32;new&#32;parameter.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01311"/>01311 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01312"/>01312 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;I&apos;d&#32;prefer&#32;to&#32;not&#32;construct&#32;an&#32;instance&#32;of&#32;ParenthesizedExpressionNode,&#32;just&#32;to&#32;later&#32;replace</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01313"/>01313 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;with&#32;the&#32;construction&#32;of&#32;a&#32;LambdaExpressionNode.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01314"/>01314 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01315"/>01315 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;But,&#32;that&#32;concern&#32;is&#32;likely&#32;a&#32;minor&#32;detail&#32;relative&#32;to&#32;the&#32;whole&#32;of&#32;getting&#32;the&#32;C#&#32;Parser&#32;to&#32;work&#32;correctly.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01316"/>01316 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01317"/>01317 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;================================================================</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01318"/>01318 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(x,&#32;y,&#32;*)&#32;=&gt;&#32;...;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01319"/>01319 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01320"/>01320 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;================================================================</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01321"/>01321 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(intPerson&#32;x,&#32;y,&#32;*)&#32;=&gt;&#32;...;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01322"/>01322 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01323"/>01323 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;================================================================</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01324"/>01324 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(x,&#32;intPerson&#32;y,&#32;*)&#32;=&gt;&#32;...;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01325"/>01325 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01326"/>01326 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;================================================================</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01327"/>01327 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(intPerson&#32;x,&#32;intPerson&#32;y,&#32;*)&#32;=&gt;&#32;...;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01328"/>01328 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01329"/>01329 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;================================================================</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01330"/>01330 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;async&#32;...&#32;=&gt;&#32;...;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01331"/>01331 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01332"/>01332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01333"/>01333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;(x&#32;=&gt;&#32;\&quot;Abc\&quot;)&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01334"/>01334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01335"/>01335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01336"/>01336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndented(topCodeBlock);
<anchor xml:id="__expression_tests_8cs_source_1l01337"/>01337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01338"/>01338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;parenthesizedExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_parenthesized_expression_node">ParenthesizedExpressionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__expression_tests_8cs_source_1l01339"/>01339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lambdaExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_lambda_expression_node">LambdaExpressionNode</link>)parenthesizedExpressionNode.InnerExpression;
<anchor xml:id="__expression_tests_8cs_source_1l01340"/>01340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01341"/>01341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(lambdaExpressionNode.CodeBlockNodeIsExpression);
<anchor xml:id="__expression_tests_8cs_source_1l01342"/>01342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01343"/>01343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;lambdaExpressionNode.VariableDeclarationNodeList.Count);
<anchor xml:id="__expression_tests_8cs_source_1l01344"/>01344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01345"/>01345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;parameter&#32;=&#32;lambdaExpressionNode.VariableDeclarationNodeList[0];
<anchor xml:id="__expression_tests_8cs_source_1l01346"/>01346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(TypeFacts.Empty.ToTypeClause(),&#32;parameter.TypeClauseNode);
<anchor xml:id="__expression_tests_8cs_source_1l01347"/>01347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;x&quot;</emphasis>,&#32;parameter.IdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l01348"/>01348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_enums_1a4cbcf68aea676ee33001aa4912ffbc7e">VariableKind</link>.Local,&#32;parameter.VariableKind);
<anchor xml:id="__expression_tests_8cs_source_1l01349"/>01349 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01350"/>01350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01351"/>01351 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01352"/>01352 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01353"/>01353 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01354"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a6f194347c9229bfbdf036cf963bdcb01">01354</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a6f194347c9229bfbdf036cf963bdcb01">LambdaFunction_Expression_ManyParameter_Async</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01355"/>01355 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01356"/>01356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;(async&#32;(x,&#32;index)&#32;=&gt;&#32;\&quot;Abc\&quot;)&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01357"/>01357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01358"/>01358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01359"/>01359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;parenthesizedExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_parenthesized_expression_node">ParenthesizedExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l01360"/>01360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lambdaExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_lambda_expression_node">LambdaExpressionNode</link>)parenthesizedExpressionNode.InnerExpression;
<anchor xml:id="__expression_tests_8cs_source_1l01361"/>01361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01362"/>01362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(lambdaExpressionNode.CodeBlockNodeIsExpression);
<anchor xml:id="__expression_tests_8cs_source_1l01363"/>01363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01364"/>01364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lambdaExpressionNode.VariableDeclarationNodeList.Count);
<anchor xml:id="__expression_tests_8cs_source_1l01365"/>01365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01366"/>01366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;element</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01367"/>01367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01368"/>01368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;parameter&#32;=&#32;lambdaExpressionNode.VariableDeclarationNodeList[0];
<anchor xml:id="__expression_tests_8cs_source_1l01369"/>01369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(TypeFacts.Empty.ToTypeClause(),&#32;parameter.TypeClauseNode);
<anchor xml:id="__expression_tests_8cs_source_1l01370"/>01370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;x&quot;</emphasis>,&#32;parameter.IdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l01371"/>01371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_enums_1a4cbcf68aea676ee33001aa4912ffbc7e">VariableKind</link>.Local,&#32;parameter.VariableKind);
<anchor xml:id="__expression_tests_8cs_source_1l01372"/>01372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01373"/>01373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01374"/>01374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Second&#32;element</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01375"/>01375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01376"/>01376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;parameter&#32;=&#32;lambdaExpressionNode.VariableDeclarationNodeList[1];
<anchor xml:id="__expression_tests_8cs_source_1l01377"/>01377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(TypeFacts.Empty.ToTypeClause(),&#32;parameter.TypeClauseNode);
<anchor xml:id="__expression_tests_8cs_source_1l01378"/>01378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;index&quot;</emphasis>,&#32;parameter.IdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l01379"/>01379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_enums_1a4cbcf68aea676ee33001aa4912ffbc7e">VariableKind</link>.Local,&#32;parameter.VariableKind);
<anchor xml:id="__expression_tests_8cs_source_1l01380"/>01380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01381"/>01381 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01382"/>01382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01383"/>01383 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01384"/>01384 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01385"/>01385 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01386"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ab452c6ddf932b4f5690ed87bf7ccb4c1">01386</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ab452c6ddf932b4f5690ed87bf7ccb4c1">LambdaFunction_CodeBlock_NoParameter_Async</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01387"/>01387 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01388"/>01388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;async&#32;()&#32;=&gt;&#32;{&#32;WriteLine(\&quot;Abc\&quot;);&#32;return&#32;\&quot;Cba\&quot;;&#32;};&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01389"/>01389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01390"/>01390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01391"/>01391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lambdaExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_lambda_expression_node">LambdaExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l01392"/>01392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01393"/>01393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01394"/>01394 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01395"/>01395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01396"/>01396 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01397"/>01397 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01398"/>01398 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01399"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac0bab3b4b6a790432155ebac944e1469">01399</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac0bab3b4b6a790432155ebac944e1469">LambdaFunction_CodeBlock_SingleParameter_Async</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01400"/>01400 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01401"/>01401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;async&#32;x&#32;=&gt;&#32;{&#32;return&#32;\&quot;Abc\&quot;;&#32;};&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01402"/>01402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01403"/>01403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01404"/>01404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lambdaExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_lambda_expression_node">LambdaExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l01405"/>01405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01406"/>01406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01407"/>01407 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01408"/>01408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01409"/>01409 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01410"/>01410 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01411"/>01411 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01412"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ab2cc40dc3269f8ba37aecbb8a625e032">01412</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ab2cc40dc3269f8ba37aecbb8a625e032">LambdaFunction_CodeBlock_ManyParameter</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01413"/>01413 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01414"/>01414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;(x,&#32;index)&#32;=&gt;&#32;{&#32;return&#32;\&quot;Abc\&quot;;&#32;};&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01415"/>01415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01416"/>01416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01417"/>01417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lambdaExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_lambda_expression_node">LambdaExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l01418"/>01418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01419"/>01419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01420"/>01420 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01421"/>01421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01422"/>01422 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01423"/>01423 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01424"/>01424 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01425"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a4be78db9f7ee5b05ee0d0005ed1a1d5c">01425</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a4be78db9f7ee5b05ee0d0005ed1a1d5c">MethodGroup</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01426"/>01426 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01427"/>01427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*var&#32;session&#32;=&#32;new&#32;ExpressionSession(</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01428"/>01428 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokenList:&#32;new&#32;List&lt;ISyntaxToken&gt;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01429"/>01429 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01430"/>01430 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;public&#32;string&#32;GetPersonFirstNameMethod(Person&#32;person)&#32;{&#32;return&#32;person.FirstName;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01431"/>01431 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;list.Select(GetPersonFirstNameMethod);</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01432"/>01432 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01433"/>01433 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expressionStack:&#32;new&#32;Stack&lt;ISyntax&gt;());</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01434"/>01434 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01435"/>01435 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expression&#32;=&#32;Parser_TEST.ParseExpression(session);*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01436"/>01436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01437"/>01437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01438"/>01438 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01439"/>01439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01440"/>01440 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01441"/>01441 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01442"/>01442 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01443"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a0a9d7bc12882856b4eac39b785e7ca26">01443</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a0a9d7bc12882856b4eac39b785e7ca26">Action_ImplicitInvocation_NoParameter</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01444"/>01444 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01445"/>01445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*var&#32;session&#32;=&#32;new&#32;ExpressionSession(</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01446"/>01446 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokenList:&#32;new&#32;List&lt;ISyntaxToken&gt;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01447"/>01447 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01448"/>01448 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Action&#32;onSubmitAction&#32;=&#32;()&#32;=&gt;&#32;Console.WriteLine(&quot;Submitted&quot;);</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01449"/>01449 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;onSubmitAction();</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01450"/>01450 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01451"/>01451 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expressionStack:&#32;new&#32;Stack&lt;ISyntax&gt;());</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01452"/>01452 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01453"/>01453 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expression&#32;=&#32;Parser_TEST.ParseExpression(session);*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01454"/>01454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01455"/>01455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01456"/>01456 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01457"/>01457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01458"/>01458 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01459"/>01459 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01460"/>01460 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01461"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ad41292b3a337038007d475d3c91300b3">01461</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ad41292b3a337038007d475d3c91300b3">Action_ImplicitInvocation_SingleParameter</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01462"/>01462 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01463"/>01463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*var&#32;session&#32;=&#32;new&#32;ExpressionSession(</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01464"/>01464 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokenList:&#32;new&#32;List&lt;ISyntaxToken&gt;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01465"/>01465 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01466"/>01466 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Action&lt;string&gt;&#32;onSubmitAction&#32;=&#32;message&#32;=&gt;&#32;Console.WriteLine(message);</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01467"/>01467 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;onSubmitAction(&quot;Hello&#32;World!&quot;);</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01468"/>01468 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01469"/>01469 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expressionStack:&#32;new&#32;Stack&lt;ISyntax&gt;());</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01470"/>01470 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01471"/>01471 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expression&#32;=&#32;Parser_TEST.ParseExpression(session);*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01472"/>01472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01473"/>01473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01474"/>01474 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01475"/>01475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01476"/>01476 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01477"/>01477 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01478"/>01478 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01479"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a281b9a4b7abafb49fe365ca0b5c8ab25">01479</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a281b9a4b7abafb49fe365ca0b5c8ab25">Action_ImplicitInvocation_ManyParameter</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01480"/>01480 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01481"/>01481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*var&#32;session&#32;=&#32;new&#32;ExpressionSession(</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01482"/>01482 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokenList:&#32;new&#32;List&lt;ISyntaxToken&gt;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01483"/>01483 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01484"/>01484 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Action&lt;string,&#32;Action&gt;&#32;onSubmitAction&#32;=&#32;(message,&#32;callback)&#32;=&gt;&#32;{&#32;Console.WriteLine(message)&#32;callback.Invoke();&#32;};</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01485"/>01485 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;onSubmitAction(&quot;Hello&#32;World!&quot;,&#32;()&#32;=&gt;&#32;Console.WriteLine(&quot;Callback&#32;was&#32;invoked.&quot;));</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01486"/>01486 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01487"/>01487 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expressionStack:&#32;new&#32;Stack&lt;ISyntax&gt;());</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01488"/>01488 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01489"/>01489 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expression&#32;=&#32;Parser_TEST.ParseExpression(session);*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01490"/>01490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01491"/>01491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01492"/>01492 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01493"/>01493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01494"/>01494 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01495"/>01495 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01496"/>01496 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01497"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1abbeaed4274632151a8886ab21be5587a">01497</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1abbeaed4274632151a8886ab21be5587a">Func_ImplicitInvocation_NoParameter</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01498"/>01498 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01499"/>01499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*var&#32;session&#32;=&#32;new&#32;ExpressionSession(</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01500"/>01500 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokenList:&#32;new&#32;List&lt;ISyntaxToken&gt;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01501"/>01501 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01502"/>01502 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Func&lt;int&gt;&#32;onSubmitAction&#32;=&#32;()&#32;=&gt;&#32;{&#32;Console.WriteLine(&quot;Submitted&quot;);&#32;return&#32;0;&#32;};</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01503"/>01503 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;var&#32;statusCode&#32;=&#32;onSubmitAction();</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01504"/>01504 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01505"/>01505 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expressionStack:&#32;new&#32;Stack&lt;ISyntax&gt;());</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01506"/>01506 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01507"/>01507 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expression&#32;=&#32;Parser_TEST.ParseExpression(session);*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01508"/>01508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01509"/>01509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01510"/>01510 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01511"/>01511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01512"/>01512 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01513"/>01513 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01514"/>01514 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01515"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a7140da9023a154c61e990489b1233d76">01515</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a7140da9023a154c61e990489b1233d76">Func_ImplicitInvocation_SingleParameter</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01516"/>01516 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01517"/>01517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*var&#32;session&#32;=&#32;new&#32;ExpressionSession(</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01518"/>01518 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokenList:&#32;new&#32;List&lt;ISyntaxToken&gt;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01519"/>01519 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01520"/>01520 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Func&lt;string,&#32;Task&gt;&#32;writeToConsoleAsync&#32;=&#32;async&#32;message&#32;=&gt;&#32;{&#32;await&#32;Task.Delay(500);&#32;Console.WriteLine(message);&#32;};</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01521"/>01521 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;await&#32;writeToConsoleAsync(&quot;Hello&#32;World!&quot;);</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01522"/>01522 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01523"/>01523 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expressionStack:&#32;new&#32;Stack&lt;ISyntax&gt;());</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01524"/>01524 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01525"/>01525 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expression&#32;=&#32;Parser_TEST.ParseExpression(session);*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01526"/>01526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01527"/>01527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01528"/>01528 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01529"/>01529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01530"/>01530 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01531"/>01531 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01532"/>01532 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01533"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ad51c9f68071de23ed97b7b18ccd69fea">01533</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ad51c9f68071de23ed97b7b18ccd69fea">Func_ImplicitInvocation_ManyParameter</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01534"/>01534 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01535"/>01535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*var&#32;session&#32;=&#32;new&#32;ExpressionSession(</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01536"/>01536 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokenList:&#32;new&#32;List&lt;ISyntaxToken&gt;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01537"/>01537 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01538"/>01538 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Func&lt;string,&#32;CancellationToken,&#32;Task&gt;&#32;writeToConsoleAsync&#32;=&#32;async&#32;(message,&#32;cancellationToken)&#32;=&gt;&#32;{&#32;await&#32;Task.Delay(500);&#32;Console.WriteLine(message);&#32;};</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01539"/>01539 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;await&#32;writeToConsoleAsync(&quot;Hello&#32;World!&quot;,&#32;CancellationToken.None);</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01540"/>01540 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01541"/>01541 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expressionStack:&#32;new&#32;Stack&lt;ISyntax&gt;());</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01542"/>01542 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01543"/>01543 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expression&#32;=&#32;Parser_TEST.ParseExpression(session);*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01544"/>01544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01545"/>01545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01546"/>01546 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01547"/>01547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01548"/>01548 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01549"/>01549 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01550"/>01550 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01551"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a662219d1c9b1fe578527aa2d23a2aa6b">01551</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a662219d1c9b1fe578527aa2d23a2aa6b">FunctionInvocation_NamedParameters</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01552"/>01552 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01553"/>01553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*var&#32;session&#32;=&#32;new&#32;ExpressionSession(</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01554"/>01554 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokenList:&#32;new&#32;List&lt;ISyntaxToken&gt;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01555"/>01555 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01556"/>01556 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;public&#32;static&#32;Person&#32;PersonFactoryMethod(string&#32;firstName,&#32;string&#32;lastName)&#32;{&#32;return&#32;new&#32;Person(firstName,&#32;lastName);&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01557"/>01557 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;PersonFactoryMethod(firstName:&#32;&quot;John&quot;,&#32;lastName:&#32;&quot;Doe&quot;);</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01558"/>01558 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01559"/>01559 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expressionStack:&#32;new&#32;Stack&lt;ISyntax&gt;());</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01560"/>01560 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01561"/>01561 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expression&#32;=&#32;Parser_TEST.ParseExpression(session);*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01562"/>01562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01563"/>01563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01564"/>01564 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01565"/>01565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01566"/>01566 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01567"/>01567 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01568"/>01568 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01569"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a268b097a322dabb224c761f9053d4092">01569</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a268b097a322dabb224c761f9053d4092">ConstructorInvocation_NamedParameters</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01570"/>01570 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01571"/>01571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*var&#32;session&#32;=&#32;new&#32;ExpressionSession(</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01572"/>01572 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokenList:&#32;new&#32;List&lt;ISyntaxToken&gt;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01573"/>01573 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01574"/>01574 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;public&#32;Person(string&#32;firstName,&#32;string&#32;lastName)&#32;{&#32;FirstName&#32;=&#32;firstName;&#32;LastName&#32;=&#32;lastName;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01575"/>01575 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;PersonFactoryMethod(firstName:&#32;&quot;John&quot;,&#32;lastName:&#32;&quot;Doe&quot;);</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01576"/>01576 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01577"/>01577 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expressionStack:&#32;new&#32;Stack&lt;ISyntax&gt;());</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01578"/>01578 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01579"/>01579 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expression&#32;=&#32;Parser_TEST.ParseExpression(session);*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01580"/>01580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01581"/>01581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01582"/>01582 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01583"/>01583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01584"/>01584 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01585"/>01585 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01586"/>01586 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01587"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac0a8ad9f3f6ca604c800377ad1c8a13d">01587</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac0a8ad9f3f6ca604c800377ad1c8a13d">Record_With_Keyword</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01588"/>01588 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01589"/>01589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;person&#32;=&#32;person&#32;with&#32;{&#32;FirstName&#32;=&#32;\&quot;Jane\&quot;,&#32;LastName&#32;=&#32;\&quot;Doe\&quot;,&#32;};&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01590"/>01590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01591"/>01591 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01592"/>01592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01593"/>01593 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01594"/>01594 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01595"/>01595 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01596"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac99aeea7a0a2310112220be02844dfbd">01596</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac99aeea7a0a2310112220be02844dfbd">GetterAndSetterThatAreNotAutoImplemented</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01597"/>01597 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01598"/>01598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*var&#32;session&#32;=&#32;new&#32;ExpressionSession(</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01599"/>01599 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokenList:&#32;new&#32;List&lt;ISyntaxToken&gt;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01600"/>01600 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01601"/>01601 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/*</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01602"/>01602 <emphasis role="comment">&#32;&#32;&#32;&#32;public&#32;string&#32;ShortCircuitListStringified</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01603"/>01603 <emphasis role="comment">&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01604"/>01604 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01605"/>01605 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01606"/>01606 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(_shortCircuitListStringifiedIsDirty)</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01607"/>01607 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01608"/>01608 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_shortCircuitListStringifiedIsDirty&#32;=&#32;false;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01609"/>01609 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_shortCircuitListStringified&#32;=&#32;string.Join(&apos;,&apos;,&#32;session.ShortCircuitList.Select(x&#32;=&gt;&#32;x.DelimiterSyntaxKind));</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01610"/>01610 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01611"/>01611 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01612"/>01612 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;_shortCircuitListStringified;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01613"/>01613 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01614"/>01614 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;private&#32;set&#32;=&gt;&#32;_shortCircuitListStringified&#32;=&#32;value;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01615"/>01615 <emphasis role="comment">&#32;&#32;&#32;&#32;}&#32;=&#32;string.Empty;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01616"/>01616 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis><emphasis role="comment">/*</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01617"/>01617 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01618"/>01618 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expressionStack:&#32;new&#32;Stack&lt;ISyntax&gt;());</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01619"/>01619 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01620"/>01620 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expression&#32;=&#32;Parser_TEST.ParseExpression(session);*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01621"/>01621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01622"/>01622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01623"/>01623 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01624"/>01624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01625"/>01625 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01626"/>01626 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01627"/>01627 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01628"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a8d131521d0c3d812c1c8f2b1645727e2">01628</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a8d131521d0c3d812c1c8f2b1645727e2">MemberAccess</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01629"/>01629 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01630"/>01630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*var&#32;session&#32;=&#32;new&#32;ExpressionSession(</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01631"/>01631 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokenList:&#32;new&#32;List&lt;ISyntaxToken&gt;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01632"/>01632 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01633"/>01633 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/*</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01634"/>01634 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis><emphasis role="comment">/*&#32;x&#32;=&gt;&#32;x.FirstName;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01635"/>01635 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis><emphasis role="comment">/*</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01636"/>01636 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01637"/>01637 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expressionStack:&#32;new&#32;Stack&lt;ISyntax&gt;());</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01638"/>01638 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01639"/>01639 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expression&#32;=&#32;Parser_TEST.ParseExpression(session);*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01640"/>01640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01641"/>01641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01642"/>01642 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01643"/>01643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01644"/>01644 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01645"/>01645 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01647"/>01647 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01648"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a515355c48a220fa72c8b400739b14710">01648</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a515355c48a220fa72c8b400739b14710">WhileLoop_DoNotBreakScope</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01649"/>01649 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01650"/>01650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;while&#32;(().)&#32;{&#32;;&#32;}&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01651"/>01651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01652"/>01652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01653"/>01653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;whileStatementNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_while_statement_node">WhileStatementNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l01654"/>01654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01655"/>01655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_binder">IBinder</link>)<link linkend="_namespacetest">test</link>.Parser.Binder).TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__expression_tests_8cs_source_1l01656"/>01656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__expression_tests_8cs_source_1l01657"/>01657 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01658"/>01658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01659"/>01659 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01660"/>01660 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01661"/>01661 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01662"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1adabff2d73e7e506f366e71de521660a3">01662</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1adabff2d73e7e506f366e71de521660a3">IfStatement_StopExpressionsCreatingScope</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01663"/>01663 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01664"/>01664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(
<anchor xml:id="__expression_tests_8cs_source_1l01665"/>01665 <emphasis role="stringliteral">@&quot;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01666"/>01666 <emphasis role="stringliteral">void&#32;Aaa()</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01667"/>01667 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01668"/>01668 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;if&#32;(false)</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01669"/>01669 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return;&#32;//&#32;Scope&#32;is&#32;being&#32;made&#32;here&#32;correctly.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01670"/>01670 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01671"/>01671 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Console.WriteLine();&#32;//&#32;But&#32;it&#32;erroneously&#32;continues&#32;defining&#32;scope&#32;at&#32;each&#32;expression&#32;following&#32;the&#32;if&#32;statement.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01672"/>01672 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01673"/>01673 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;var&#32;variable&#32;=&#32;2;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01674"/>01674 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01675"/>01675 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Console.WriteLine();&#32;//&#32;But&#32;it&#32;erroneously&#32;continues&#32;defining&#32;scope&#32;at&#32;each&#32;expression&#32;following&#32;the&#32;if&#32;statement.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01676"/>01676 <emphasis role="stringliteral">}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01677"/>01677 <emphasis role="stringliteral">&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01678"/>01678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01679"/>01679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01680"/>01680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_binder">IBinder</link>)<link linkend="_namespacetest">test</link>.Parser.Binder).TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__expression_tests_8cs_source_1l01681"/>01681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(3,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__expression_tests_8cs_source_1l01682"/>01682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01683"/>01683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;child&#32;<emphasis role="keywordflow">in</emphasis>&#32;topCodeBlock.GetChildList())
<anchor xml:id="__expression_tests_8cs_source_1l01684"/>01684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01685"/>01685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(child.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l01686"/>01686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01687"/>01687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01688"/>01688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(<emphasis role="stringliteral">&quot;aaaFunctionDefinitionNode.CodeBlockNode:&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01689"/>01689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;aaaFunctionDefinitionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_definition_node">FunctionDefinitionNode</link>)topCodeBlock.GetChildList()[2];
<anchor xml:id="__expression_tests_8cs_source_1l01690"/>01690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;child&#32;<emphasis role="keywordflow">in</emphasis>&#32;aaaFunctionDefinitionNode.CodeBlockNode.GetChildList())
<anchor xml:id="__expression_tests_8cs_source_1l01691"/>01691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01692"/>01692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(child.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l01693"/>01693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01694"/>01694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01695"/>01695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(((<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_ambiguous_identifier_node">AmbiguousIdentifierNode</link>)topCodeBlock.GetChildList()[1]).IdentifierToken.TextSpan.GetText());
<anchor xml:id="__expression_tests_8cs_source_1l01696"/>01696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionDefinitionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_definition_node">FunctionDefinitionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l01697"/>01697 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01698"/>01698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01699"/>01699 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01700"/>01700 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01701"/>01701 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01702"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1acbf436e0e59a518520d7e9cd44de3813">01702</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1acbf436e0e59a518520d7e9cd44de3813">CollectionIndex</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01703"/>01703 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01704"/>01704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;var&#32;queue&#32;=&#32;_queueContainerMap[queueKey];&#32;*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01705"/>01705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01706"/>01706 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01707"/>01707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01708"/>01708 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01709"/>01709 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01710"/>01710 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01711"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a15331fa3eb8c6980bac99d8846c3d643">01711</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a15331fa3eb8c6980bac99d8846c3d643">AwaitTask</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01712"/>01712 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01713"/>01713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;await&#32;Task.Delay(TimeSpan.FromMilliseconds(100),&#32;cancellationToken).ConfigureAwait(false);&#32;*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01714"/>01714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01715"/>01715 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01716"/>01716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01717"/>01717 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01718"/>01718 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01719"/>01719 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01720"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a7b025cec6c47c6a0aadce81fbf127606">01720</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a7b025cec6c47c6a0aadce81fbf127606">SwitchStatement</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01721"/>01721 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01722"/>01722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01723"/>01723 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;The&#32;switch&#32;statement&#32;cannot&#32;be&#32;part&#32;of&#32;an&#32;expression.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01724"/>01724 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;For&#32;this&#32;reason,&#32;it&#32;starts&#32;with&#32;the&#32;keyword&#32;switch,</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01725"/>01725 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;so&#32;when&#32;parsing&#32;it&#32;can&#32;easily&#32;be&#32;seen&#32;at&#32;the&#32;start&#32;of&#32;the</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01726"/>01726 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;statement,&#32;that&#32;it&#32;is&#32;a&#32;switch&#32;statement.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01727"/>01727 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;Switch&#32;expression&#32;can&#32;be&#32;embedded,</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01728"/>01728 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;and&#32;for&#32;that&#32;reason&#32;it&#32;starts&#32;with&#32;the&#32;IdentifierToken,</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01729"/>01729 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in&#32;order&#32;to&#32;enter&#32;the&#32;expression&#32;parsing&#32;code,</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01730"/>01730 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;which&#32;then&#32;goes&#32;on&#32;to&#32;see&#32;the&#32;&apos;switch&apos;&#32;keyword.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01731"/>01731 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;It&#32;isn&apos;t&#32;to&#32;say&#32;that&#32;the&#32;language&#32;had&#32;to&#32;be&#32;written&#32;this&#32;way.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01732"/>01732 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;But&#32;instead&#32;that&#32;it&#32;seems&#32;extremely&#32;intentional.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01733"/>01733 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;The&#32;switch&#32;statement&#32;has&#32;a&#32;scope&#32;for&#32;its&#32;initial&#32;body.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01734"/>01734 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;But,&#32;the&#32;individual&#32;case(s)&#32;do&#32;not&#32;create&#32;their&#32;own&#32;scopes.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01735"/>01735 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;One&#32;can&#32;put&#32;an&#32;&quot;arbitrary&#32;code&#32;block&quot;&#32;after&#32;the&#32;&apos;case&apos;&#32;definition,</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01736"/>01736 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in&#32;order&#32;to&#32;create&#32;a&#32;scope&#32;for&#32;that&#32;&apos;case&apos;&#32;specifically.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01737"/>01737 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;But&#32;note:&#32;this&#32;just&#32;always&#32;the&#32;case&#32;in&#32;C#&#32;it&#32;isn&apos;t&#32;&apos;switch&apos;&#32;specific.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01738"/>01738 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;In&#32;C#&#32;a&#32;switch&#32;statement&#32;cannot&#32;fall&#32;through&#32;its&#32;case(s)&#32;after</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01739"/>01739 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handling&#32;the&#32;initial&#32;case&#32;that&#32;jumped&#32;to.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01740"/>01740 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;Many&#32;labels&#32;can&#32;be&#32;defined&#32;for&#32;the&#32;same&#32;&quot;handling&#32;code&quot;.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01741"/>01741 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;A&#32;&apos;default&apos;&#32;label&#32;exists.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01742"/>01742 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;&apos;goto&#32;default&apos;&#32;also&#32;exists,&#32;but&#32;is&#32;this&#32;not&#32;just&#32;normal&#32;C#?</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01743"/>01743 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;you&#32;can&#32;goto&#32;any&#32;label&#32;you&#32;have&#32;in&#32;scope&#32;this&#32;isn&apos;t&#32;something&#32;special.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01744"/>01744 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;But&#32;maybe&#32;the&#32;&apos;default&apos;&#32;name&#32;for&#32;the&#32;label&#32;is&#32;uniquely&#32;a&#32;&apos;switch&apos;&#32;statement&#32;permitted&#32;name.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01745"/>01745 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;Are&#32;you&#32;able&#32;to&#32;goto&#32;any&#32;of&#32;the&#32;&quot;&#32;case&#32;&apos;a&apos;:&#32;&quot;&#32;label&#32;definitions?</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01746"/>01746 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;If&#32;you&#32;wanted&#32;to&#32;do&#32;this,&#32;but&#32;could&#32;not&#32;&quot;goto&#32;case&#32;&apos;a&apos;:&#32;&quot;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01747"/>01747 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;could&#32;you&#32;put&#32;a&#32;normal&#32;C#&#32;label&#32;alongside&#32;&quot;&#32;case&#32;&apos;a&apos;:&#32;&quot;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01748"/>01748 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;and&#32;goto&#32;the&#32;normal&#32;C#&#32;label?</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01749"/>01749 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;I&#32;presume&#32;you&#32;could&#32;ONLY&#32;if&#32;you&#32;put&#32;the&#32;normal&#32;C#&#32;label</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01750"/>01750 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;after&#32;the&#32;&apos;case&apos;&#32;and&#32;before&#32;the&#32;&quot;handling&#32;code&quot;.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01751"/>01751 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;You&#32;could&#32;probably&#32;put&#32;a&#32;label&#32;anywhere&#32;within&#32;the&#32;&quot;handling&#32;code&quot;&#32;too,</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01752"/>01752 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;but&#32;I&apos;m&#32;speaking&#32;of&#32;this&#32;example&#32;specifically&#32;where&#32;you</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01753"/>01753 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wanted&#32;to&#32;jump&#32;in&#32;a&#32;equivalent&#32;way&#32;as&#32;&quot;goto&#32;case&#32;&apos;a&apos;:&#32;&quot;.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01754"/>01754 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;So&#32;in&#32;this&#32;case&#32;you&apos;d&#32;&#32;want&#32;it&#32;after&#32;the&#32;label,&#32;and&#32;at&#32;the&#32;start&#32;of&#32;the&#32;&quot;handling&#32;code&quot;.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01755"/>01755 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;Is&#32;it&#32;possible&#32;to&#32;parse&#32;the&#32;switch&#32;statement&apos;s&#32;body&#32;as&#32;normal&#32;C#&#32;code,&#32;if&#32;I&#32;implemented&#32;C#&#32;label&#32;syntax?</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01756"/>01756 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;The&#32;issue&#32;would&#32;appear&#32;to&#32;be&#32;with&#32;the&#32;&apos;case&apos;&#32;keyword&#32;that&#32;is&#32;at&#32;the&#32;start&#32;of&#32;&quot;label&quot;.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01757"/>01757 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;As&#32;well,&#32;the&#32;&quot;label&quot;&#32;doesn&apos;t&#32;have&#32;an&#32;IdentifierToken,&#32;it&#32;instead&#32;is&#32;a&#32;unique&#32;compile&#32;time&#32;constant.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01758"/>01758 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;The&#32;&apos;switch&apos;&#32;statement&#32;would&#32;be&#32;a&#32;code&#32;block&#32;builder&#32;that&#32;skips&#32;until&#32;&apos;case&apos;,&#32;then&#32;skips&#32;until&#32;&apos;:&apos;.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01759"/>01759 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;At&#32;this&#32;point&#32;return&#32;to&#32;the&#32;main&#32;parser&#32;loop.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01760"/>01760 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;Then&#32;hit&#32;the&#32;&apos;case&apos;&#32;keyword&#32;which&#32;would&#32;actually&#32;invoke&#32;its&#32;own&#32;method&#32;so&#32;I&#32;could&#32;probably&#32;do&#32;this&#32;easily.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01761"/>01761 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;public&#32;static&#32;void&#32;HandleCaseTokenKeyword(KeywordToken&#32;consumedKeywordToken,&#32;CSharpParserModel&#32;model)&#32;{...}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01762"/>01762 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;ParseDefaultKeywords.cs:48&#32;is&#32;where&#32;the&#32;method&#32;is&#32;defined.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01763"/>01763 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;So,&#32;the&#32;switch&#32;statement&#32;needs&#32;to&#32;have&#32;its&#32;expression&#32;parsed&#32;(the&#32;one&#32;within&#32;its&#32;parentheses).</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01764"/>01764 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;Then&#32;it&#32;goes&#32;to&#32;main&#32;loop&#32;and&#32;starts&#32;parsing&#32;the&#32;code&#32;block&#32;node.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01765"/>01765 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;This&#32;then&#32;hits&#32;the&#32;&apos;case&apos;&#32;keyword.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01766"/>01766 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;Read&#32;until&#32;the&#32;&apos;:&apos;&#32;then&#32;return&#32;back&#32;out&#32;again.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01767"/>01767 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;But,&#32;what&#32;about&#32;the&#32;&apos;default&apos;&#32;keyword?</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01768"/>01768 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;If&#32;the&#32;statement&#32;parsing&#32;code&#32;sees&#32;the&#32;&apos;default&apos;&#32;keyword,</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01769"/>01769 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;then&#32;check&#32;if&#32;the&#32;next&#32;token&#32;is&#32;the&#32;ColonToken.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01770"/>01770 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;If&#32;so,&#32;then&#32;it&#32;is&#32;the&#32;&apos;default&apos;&#32;leg&#32;of&#32;the&#32;switch&#32;statement.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01771"/>01771 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;This&#32;sounds&#32;like&#32;an&#32;effective&#32;&quot;first&#32;approach&quot;&#32;to&#32;a&#32;solution.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01772"/>01772 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;In&#32;order&#32;to&#32;track&#32;each&#32;leg&#32;of&#32;the&#32;switch&#32;statement&#32;I&#32;can&#32;create&#32;a&#32;new</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01773"/>01773 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeBlockBuilder&#32;but,&#32;have&#32;this&#32;builder&#32;act&#32;in&#32;a&#32;special&#32;way.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01774"/>01774 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;It&#32;would&#32;capture&#32;the&#32;statements&#32;just&#32;as&#32;a&#32;normal&#32;CodeBlockBuilder,</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01775"/>01775 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;but&#32;when&#32;the&#32;code&#32;block&#32;is&#32;finished,&#32;it&#32;moves&#32;its&#32;nodes&#32;to&#32;the&#32;parentCodeBlockBuilder.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01776"/>01776 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;In&#32;the&#32;end,&#32;the&#32;&quot;special&quot;&#32;code&#32;block&#32;builder&#32;for&#32;the&#32;legs&#32;would&#32;just&#32;track&#32;the&#32;start&#32;and&#32;end&#32;indices.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01777"/>01777 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;But,&#32;isn&apos;t&#32;the&#32;start&#32;the&#32;label,&#32;and&#32;the&#32;end&#32;the&#32;next&#32;label&#32;or&#32;CloseBraceToken?</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01778"/>01778 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;Currently&#32;the&#32;expression&#32;parser&#32;is&#32;trying&#32;to&#32;parse&#32;the&#32;&apos;ColonToken&apos;&#32;in&#32;&quot;&#32;case&#32;&apos;a&apos;:&#32;&quot;.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01779"/>01779 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;If&#32;the&#32;statement&#32;parser&#32;loop&#32;could&#32;&quot;skip&quot;&#32;over&#32;this,&#32;the&#32;parser&#32;would&#32;be&#32;in&#32;a&#32;better&#32;&quot;state&quot;&#32;for&#32;parsing&#32;the</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01780"/>01780 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;remainder&#32;of&#32;the&#32;file.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01781"/>01781 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01782"/>01782 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01783"/>01783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(
<anchor xml:id="__expression_tests_8cs_source_1l01784"/>01784 <emphasis role="stringliteral">@&quot;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01785"/>01785 <emphasis role="stringliteral">switch&#32;(character)</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01786"/>01786 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01787"/>01787 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;case&#32;&apos;a&apos;:</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01788"/>01788 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01789"/>01789 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01790"/>01790 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01791"/>01791 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;case&#32;&apos;b&apos;:</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01792"/>01792 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;case&#32;&apos;c&apos;:</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01793"/>01793 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01794"/>01794 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;case&#32;&apos;d&apos;:</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01795"/>01795 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(false)</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01796"/>01796 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;goto&#32;default;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01797"/>01797 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01798"/>01798 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;default:</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01799"/>01799 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01800"/>01800 <emphasis role="stringliteral">}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01801"/>01801 <emphasis role="stringliteral">&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01802"/>01802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01803"/>01803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01804"/>01804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01805"/>01805 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01806"/>01806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01807"/>01807 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01808"/>01808 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01809"/>01809 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01810"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac035b6e1f7c6ba3148865033288f3410">01810</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac035b6e1f7c6ba3148865033288f3410">SwitchExpression</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01811"/>01811 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01812"/>01812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(
<anchor xml:id="__expression_tests_8cs_source_1l01813"/>01813 <emphasis role="stringliteral">@&quot;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01814"/>01814 <emphasis role="stringliteral">return&#32;character&#32;switch</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01815"/>01815 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01816"/>01816 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&apos;a&apos;&#32;=&gt;&#32;0,</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01817"/>01817 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;_&#32;=&gt;&#32;1,</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01818"/>01818 <emphasis role="stringliteral">};</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01819"/>01819 <emphasis role="stringliteral">&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01820"/>01820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01821"/>01821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01822"/>01822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01823"/>01823 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01824"/>01824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01825"/>01825 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01826"/>01826 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01827"/>01827 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01828"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a444e0c19352ac2987da2c619606877e4">01828</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a444e0c19352ac2987da2c619606877e4">Parenthesized_ExplicitCast</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01829"/>01829 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01830"/>01830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;((IBinder)parser.Binder)&#32;*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01831"/>01831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01832"/>01832 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01833"/>01833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01834"/>01834 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01835"/>01835 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01836"/>01836 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01837"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac7dba8db531256b34155744c4e60fafc">01837</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ac7dba8db531256b34155744c4e60fafc">FunctionParameter_OutKeyword</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01838"/>01838 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01839"/>01839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;TryGetBinderSession(resourceUri,&#32;out&#32;IBinderSession&#32;binderSession)&#32;*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01840"/>01840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01841"/>01841 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01842"/>01842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01843"/>01843 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01844"/>01844 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01845"/>01845 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01846"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a6aee9bf181199e5b565e1252e5918044">01846</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a6aee9bf181199e5b565e1252e5918044">LessThanBinaryOperator</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01847"/>01847 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01848"/>01848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;if&#32;(_queue.Count&#32;&lt;&#32;0)&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01849"/>01849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01850"/>01850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01851"/>01851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01852"/>01852 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01853"/>01853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01854"/>01854 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01855"/>01855 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01856"/>01856 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01857"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a974655911f8198a02c61bf33c6ef6714">01857</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a974655911f8198a02c61bf33c6ef6714">GreaterThanBinaryOperator</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01858"/>01858 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01859"/>01859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;if&#32;(_queue.Count&#32;&gt;&#32;0)&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01860"/>01860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01861"/>01861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01862"/>01862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01863"/>01863 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01864"/>01864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01865"/>01865 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01866"/>01866 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01867"/>01867 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01868"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ae19c7e42ef391d48bbe315062e66acf6">01868</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ae19c7e42ef391d48bbe315062e66acf6">LessThanEqualToBinaryOperator</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01869"/>01869 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01870"/>01870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;if&#32;(_queue.Count&#32;&lt;=&#32;0)&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01871"/>01871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01872"/>01872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01873"/>01873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01874"/>01874 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01875"/>01875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01876"/>01876 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01877"/>01877 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01878"/>01878 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01879"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1adf8daa718a035cbf2a3415a1480fa501">01879</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1adf8daa718a035cbf2a3415a1480fa501">GreaterThanEqualToBinaryOperator</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01880"/>01880 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01881"/>01881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">&quot;if&#32;(_queue.Count&#32;&gt;=&#32;0)&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01882"/>01882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01883"/>01883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01884"/>01884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01885"/>01885 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01886"/>01886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01887"/>01887 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01888"/>01888 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01889"/>01889 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01890"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a05b736e71d7b84c1465a1be698467b74">01890</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a05b736e71d7b84c1465a1be698467b74">FunctionParameterOptional</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01891"/>01891 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01892"/>01892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(
<anchor xml:id="__expression_tests_8cs_source_1l01893"/>01893 <emphasis role="stringliteral">@&quot;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01894"/>01894 <emphasis role="stringliteral">public&#32;void&#32;SetProgress(double?&#32;decimalPercentProgress,&#32;string?&#32;message&#32;=&#32;null,&#32;string?&#32;secondaryMessage&#32;=&#32;null)</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01895"/>01895 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01896"/>01896 <emphasis role="stringliteral">}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01897"/>01897 <emphasis role="stringliteral">&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01898"/>01898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01899"/>01899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01900"/>01900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndented(topCodeBlock);
<anchor xml:id="__expression_tests_8cs_source_1l01901"/>01901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01902"/>01902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionDefinitionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_definition_node">FunctionDefinitionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l01903"/>01903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionArgumentEntryNodeList&#32;=&#32;functionDefinitionNode.FunctionArgumentsListingNode.FunctionArgumentEntryNodeList;
<anchor xml:id="__expression_tests_8cs_source_1l01904"/>01904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01905"/>01905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;indexParameter;
<anchor xml:id="__expression_tests_8cs_source_1l01906"/>01906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01907"/>01907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indexParameter&#32;=&#32;0;
<anchor xml:id="__expression_tests_8cs_source_1l01908"/>01908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01909"/>01909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionArgumentEntryNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_argument_entry_node">FunctionArgumentEntryNode</link>)functionArgumentEntryNodeList[indexParameter];
<anchor xml:id="__expression_tests_8cs_source_1l01910"/>01910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(functionArgumentEntryNode.IsOptional);
<anchor xml:id="__expression_tests_8cs_source_1l01911"/>01911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01912"/>01912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01913"/>01913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indexParameter&#32;=&#32;1;
<anchor xml:id="__expression_tests_8cs_source_1l01914"/>01914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01915"/>01915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionArgumentEntryNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_argument_entry_node">FunctionArgumentEntryNode</link>)functionArgumentEntryNodeList[indexParameter];
<anchor xml:id="__expression_tests_8cs_source_1l01916"/>01916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(functionArgumentEntryNode.IsOptional);
<anchor xml:id="__expression_tests_8cs_source_1l01917"/>01917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01918"/>01918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01919"/>01919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indexParameter&#32;=&#32;2;
<anchor xml:id="__expression_tests_8cs_source_1l01920"/>01920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01921"/>01921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionArgumentEntryNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_argument_entry_node">FunctionArgumentEntryNode</link>)functionArgumentEntryNodeList[indexParameter];
<anchor xml:id="__expression_tests_8cs_source_1l01922"/>01922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(functionArgumentEntryNode.IsOptional);
<anchor xml:id="__expression_tests_8cs_source_1l01923"/>01923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01924"/>01924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//VariableDeclarationNode</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01925"/>01925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//OptionalCompileTimeConstantToken</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01926"/>01926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01927"/>01927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01928"/>01928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01929"/>01929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//HasParamsKeyword</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01930"/>01930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//HasOutKeyword</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01931"/>01931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//HasInKeyword</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01932"/>01932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//HasRefKeyword</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01933"/>01933 
<anchor xml:id="__expression_tests_8cs_source_1l01934"/>01934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01935"/>01935 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01936"/>01936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01937"/>01937 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01938"/>01938 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01939"/>01939 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01940"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a5e1d7aeca0a7d262b18a32e89c60f270">01940</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a5e1d7aeca0a7d262b18a32e89c60f270">ConstructorInvokesConstructor</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01941"/>01941 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01942"/>01942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(
<anchor xml:id="__expression_tests_8cs_source_1l01943"/>01943 <emphasis role="stringliteral">@&quot;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01944"/>01944 <emphasis role="stringliteral">public&#32;class&#32;ProgressBarModel</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01945"/>01945 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01946"/>01946 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;public&#32;ProgressBarModel(CancellationToken?&#32;cancellationToken)</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01947"/>01947 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;base(cancellationToken)</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01948"/>01948 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01949"/>01949 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01950"/>01950 <emphasis role="stringliteral">}</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01951"/>01951 <emphasis role="stringliteral">&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01952"/>01952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01953"/>01953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01954"/>01954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01955"/>01955 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01956"/>01956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01957"/>01957 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01958"/>01958 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01959"/>01959 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01960"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa2631daf7f211ec1edf5025ab35422c3">01960</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1aa2631daf7f211ec1edf5025ab35422c3">ValueTuple</link>()
<anchor xml:id="__expression_tests_8cs_source_1l01961"/>01961 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l01962"/>01962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;var&#32;x&#32;=&#32;(decimalPercentProgress,&#32;null,&#32;cancellationToken);&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01963"/>01963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l01964"/>01964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01965"/>01965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndented(topCodeBlock);
<anchor xml:id="__expression_tests_8cs_source_1l01966"/>01966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01967"/>01967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableDeclarationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_declaration_node">VariableDeclarationNode</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__expression_tests_8cs_source_1l01968"/>01968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableAssignmentExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ad69a0c440effe84972fb712c19f2cac6">VariableAssignmentExpressionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__expression_tests_8cs_source_1l01969"/>01969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01970"/>01970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;commaSeparatedExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_comma_separated_expression_node">CommaSeparatedExpressionNode</link>)variableAssignmentExpressionNode.ExpressionNode;
<anchor xml:id="__expression_tests_8cs_source_1l01971"/>01971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01972"/>01972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndented(commaSeparatedExpressionNode);
<anchor xml:id="__expression_tests_8cs_source_1l01973"/>01973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01974"/>01974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;badExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_bad_expression_node">BadExpressionNode</link>)commaSeparatedExpressionNode.GetChildList()[0];
<anchor xml:id="__expression_tests_8cs_source_1l01975"/>01975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01976"/>01976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndented(badExpressionNode);
<anchor xml:id="__expression_tests_8cs_source_1l01977"/>01977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01978"/>01978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*var&#32;variableReferenceNode&#32;=&#32;(VariableReferenceNode)commaSeparatedExpressionNode.InnerExpressionList[0];</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01979"/>01979 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;nullKeywordToken&#32;=&#32;(KeywordToken)commaSeparatedExpressionNode.InnerExpressionList[1];</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01980"/>01980 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableReferenceNode&#32;=&#32;(VariableReferenceNode)commaSeparatedExpressionNode.InnerExpressionList[2];*/</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l01981"/>01981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01982"/>01982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l01983"/>01983 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01984"/>01984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l01985"/>01985 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l01986"/>01986 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l01998"/>01998 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l01999"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a077e20e75632443e1e025e7d1ea1334d">01999</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a077e20e75632443e1e025e7d1ea1334d">FunctionInvocationExpressionStatement</link>()
<anchor xml:id="__expression_tests_8cs_source_1l02000"/>02000 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l02001"/>02001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(
<anchor xml:id="__expression_tests_8cs_source_1l02002"/>02002 <emphasis role="stringliteral">@&quot;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l02003"/>02003 <emphasis role="stringliteral">int&#32;decimalPercentProgress;</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l02004"/>02004 <emphasis role="stringliteral">Func(decimalPercentProgress);</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l02005"/>02005 <emphasis role="stringliteral">&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02006"/>02006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l02007"/>02007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(topCodeBlock,&#32;nameof(topCodeBlock));
<anchor xml:id="__expression_tests_8cs_source_1l02008"/>02008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02009"/>02009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionInvocationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_invocation_node">FunctionInvocationNode</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__expression_tests_8cs_source_1l02010"/>02010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;WriteChildrenIndented(functionInvocationNode,&#32;nameof(functionInvocationNode));</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l02011"/>02011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02012"/>02012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;identifierToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_identifier_token">IdentifierToken</link>)functionInvocationNode.GetChildList()[0];
<anchor xml:id="__expression_tests_8cs_source_1l02013"/>02013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02014"/>02014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionParametersListingNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_parameters_listing_node">FunctionParametersListingNode</link>)functionInvocationNode.GetChildList()[1];
<anchor xml:id="__expression_tests_8cs_source_1l02015"/>02015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l02016"/>02016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assertions&#32;relating&#32;to&#32;functionParametersListingNode&apos;s&#32;properties&#32;are&#32;in&#32;this&#32;code&#32;block.</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l02017"/>02017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(functionParametersListingNode.OpenParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l02018"/>02018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;functionParametersListingNode.FunctionParameterEntryNodeList.Count);
<anchor xml:id="__expression_tests_8cs_source_1l02019"/>02019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(functionParametersListingNode.CloseParenthesisToken.ConstructorWasInvoked);
<anchor xml:id="__expression_tests_8cs_source_1l02020"/>02020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l02021"/>02021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02022"/>02022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeClauseNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node">TypeClauseNode</link>)functionInvocationNode.GetChildList()[2];
<anchor xml:id="__expression_tests_8cs_source_1l02023"/>02023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02024"/>02024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__expression_tests_8cs_source_1l02025"/>02025 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02026"/>02026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02027"/>02027 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l02028"/>02028 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02029"/>02029 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l02030"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a9b3d7ae54cb17209f0140fd6f99508da">02030</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a9b3d7ae54cb17209f0140fd6f99508da">TypeClauseNode_Identifier</link>()
<anchor xml:id="__expression_tests_8cs_source_1l02031"/>02031 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l02032"/>02032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;Person&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02033"/>02033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l02034"/>02034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(topCodeBlock,&#32;nameof(topCodeBlock));
<anchor xml:id="__expression_tests_8cs_source_1l02035"/>02035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine($<emphasis role="stringliteral">&quot;topCodeBlock:&#32;{topCodeBlock.GetChildList().Length}&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02036"/>02036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeClauseNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node">TypeClauseNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l02037"/>02037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TypeClauseNode,&#32;typeClauseNode.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l02038"/>02038 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02039"/>02039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02040"/>02040 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l02041"/>02041 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02042"/>02042 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l02043"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a770a57e063c0ccfd8dd1c357127e7787">02043</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a770a57e063c0ccfd8dd1c357127e7787">TypeClauseNode_Keyword</link>()
<anchor xml:id="__expression_tests_8cs_source_1l02044"/>02044 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l02045"/>02045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;int&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02046"/>02046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l02047"/>02047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(topCodeBlock,&#32;nameof(topCodeBlock));
<anchor xml:id="__expression_tests_8cs_source_1l02048"/>02048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeClauseNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node">TypeClauseNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l02049"/>02049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TypeClauseNode,&#32;typeClauseNode.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l02050"/>02050 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02051"/>02051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02052"/>02052 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l02053"/>02053 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02054"/>02054 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l02055"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ae57874b03ab136bfedf13942bd9ef3f0">02055</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ae57874b03ab136bfedf13942bd9ef3f0">TypeClauseNode_Var</link>()
<anchor xml:id="__expression_tests_8cs_source_1l02056"/>02056 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l02057"/>02057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;var&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02058"/>02058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l02059"/>02059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(topCodeBlock,&#32;nameof(topCodeBlock));
<anchor xml:id="__expression_tests_8cs_source_1l02060"/>02060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeClauseNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node">TypeClauseNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l02061"/>02061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TypeClauseNode,&#32;typeClauseNode.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l02062"/>02062 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02063"/>02063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02064"/>02064 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l02065"/>02065 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02066"/>02066 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l02067"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a4b0363e8f3610767404f2f27b77a319c">02067</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a4b0363e8f3610767404f2f27b77a319c">TypeClauseNode_Generic</link>()
<anchor xml:id="__expression_tests_8cs_source_1l02068"/>02068 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l02069"/>02069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;List&lt;int&gt;&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02070"/>02070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l02071"/>02071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(topCodeBlock,&#32;nameof(topCodeBlock));
<anchor xml:id="__expression_tests_8cs_source_1l02072"/>02072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeClauseNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node">TypeClauseNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l02073"/>02073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TypeClauseNode,&#32;typeClauseNode.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l02074"/>02074 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02075"/>02075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02076"/>02076 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l02077"/>02077 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02078"/>02078 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l02079"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a4eaa17fd5d866c7249fb516041d5671d">02079</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a4eaa17fd5d866c7249fb516041d5671d">TypeClauseNode_Nullable_Keyword</link>()
<anchor xml:id="__expression_tests_8cs_source_1l02080"/>02080 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l02081"/>02081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;int?&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02082"/>02082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l02083"/>02083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(topCodeBlock,&#32;nameof(topCodeBlock));
<anchor xml:id="__expression_tests_8cs_source_1l02084"/>02084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeClauseNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node">TypeClauseNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l02085"/>02085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TypeClauseNode,&#32;typeClauseNode.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l02086"/>02086 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02087"/>02087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02088"/>02088 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l02089"/>02089 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02090"/>02090 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l02091"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a83ba898ca20ea3b158908376d2d541b7">02091</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a83ba898ca20ea3b158908376d2d541b7">TypeClauseNode_Nullable_Identifier</link>()
<anchor xml:id="__expression_tests_8cs_source_1l02092"/>02092 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l02093"/>02093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;Person?&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02094"/>02094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l02095"/>02095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(topCodeBlock,&#32;nameof(topCodeBlock));
<anchor xml:id="__expression_tests_8cs_source_1l02096"/>02096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeClauseNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node">TypeClauseNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l02097"/>02097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TypeClauseNode,&#32;typeClauseNode.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l02098"/>02098 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02099"/>02099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02100"/>02100 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l02101"/>02101 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02102"/>02102 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l02103"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a1c74fa54631496aedf56fe4dfd936891">02103</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1a1c74fa54631496aedf56fe4dfd936891">TypeClauseNode_GenericNullable</link>()
<anchor xml:id="__expression_tests_8cs_source_1l02104"/>02104 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l02105"/>02105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;List&lt;int&gt;?&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02106"/>02106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l02107"/>02107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(topCodeBlock,&#32;nameof(topCodeBlock));
<anchor xml:id="__expression_tests_8cs_source_1l02108"/>02108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeClauseNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_clause_node">TypeClauseNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l02109"/>02109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TypeClauseNode,&#32;typeClauseNode.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l02110"/>02110 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02111"/>02111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02112"/>02112 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l02113"/>02113 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02114"/>02114 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__expression_tests_8cs_source_1l02115"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ad69a0c440effe84972fb712c19f2cac6">02115</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ad69a0c440effe84972fb712c19f2cac6">VariableAssignmentExpressionNode</link>()
<anchor xml:id="__expression_tests_8cs_source_1l02116"/>02116 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l02117"/>02117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;someVariable&#32;=&#32;2;&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02118"/>02118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__expression_tests_8cs_source_1l02119"/>02119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(topCodeBlock,&#32;nameof(topCodeBlock));
<anchor xml:id="__expression_tests_8cs_source_1l02120"/>02120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableAssignmentExpressionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_expression_tests_1ad69a0c440effe84972fb712c19f2cac6">VariableAssignmentExpressionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__expression_tests_8cs_source_1l02121"/>02121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.VariableAssignmentExpressionNode,&#32;variableAssignmentExpressionNode.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l02122"/>02122 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02123"/>02123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException(<emphasis role="stringliteral">&quot;See&#32;ExpressionAsStatementTests&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02124"/>02124 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l02125"/>02125 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02126"/>02126 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;WriteChildrenIndented(<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node">ISyntaxNode</link>&#32;node,&#32;<emphasis role="keywordtype">string</emphasis>&#32;name&#32;=&#32;<emphasis role="stringliteral">&quot;node&quot;</emphasis>)
<anchor xml:id="__expression_tests_8cs_source_1l02127"/>02127 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l02128"/>02128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine($<emphasis role="stringliteral">&quot;foreach&#32;(var&#32;child&#32;in&#32;{name}.GetChildList())&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02129"/>02129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;child&#32;<emphasis role="keywordflow">in</emphasis>&#32;node.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node_1a73d81f1c4e42db7e80bfdd4db97c10fe">GetChildList</link>())
<anchor xml:id="__expression_tests_8cs_source_1l02130"/>02130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l02131"/>02131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;+&#32;child.SyntaxKind);
<anchor xml:id="__expression_tests_8cs_source_1l02132"/>02132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l02133"/>02133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine();
<anchor xml:id="__expression_tests_8cs_source_1l02134"/>02134 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l02135"/>02135 &#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02136"/>02136 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;WriteChildrenIndentedRecursive(<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node">ISyntaxNode</link>&#32;node,&#32;<emphasis role="keywordtype">string</emphasis>&#32;name&#32;=&#32;<emphasis role="stringliteral">&quot;node&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indentation&#32;=&#32;0)
<anchor xml:id="__expression_tests_8cs_source_1l02137"/>02137 &#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l02138"/>02138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;indentationStringBuilder&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__expression_tests_8cs_source_1l02139"/>02139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;indentation;&#32;i++)
<anchor xml:id="__expression_tests_8cs_source_1l02140"/>02140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indentationStringBuilder.Append(<emphasis role="charliteral">&apos;\t&apos;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02141"/>02141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02142"/>02142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine($<emphasis role="stringliteral">&quot;{indentationStringBuilder.ToString()}{node.SyntaxKind}&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02143"/>02143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02144"/>02144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;the&#32;child&#32;tokens</emphasis>
<anchor xml:id="__expression_tests_8cs_source_1l02145"/>02145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indentationStringBuilder.Append(<emphasis role="charliteral">&apos;\t&apos;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02146"/>02146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;childIndentation&#32;=&#32;indentationStringBuilder.ToString();
<anchor xml:id="__expression_tests_8cs_source_1l02147"/>02147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02148"/>02148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;child&#32;<emphasis role="keywordflow">in</emphasis>&#32;node.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node_1a73d81f1c4e42db7e80bfdd4db97c10fe">GetChildList</link>())
<anchor xml:id="__expression_tests_8cs_source_1l02149"/>02149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l02150"/>02150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(child&#32;is&#32;<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node">ISyntaxNode</link>&#32;syntaxNode)
<anchor xml:id="__expression_tests_8cs_source_1l02151"/>02151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l02152"/>02152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(syntaxNode,&#32;<emphasis role="stringliteral">&quot;node&quot;</emphasis>,&#32;indentation&#32;+&#32;1);
<anchor xml:id="__expression_tests_8cs_source_1l02153"/>02153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l02154"/>02154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(child&#32;is&#32;<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_token">ISyntaxToken</link>&#32;syntaxToken)
<anchor xml:id="__expression_tests_8cs_source_1l02155"/>02155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__expression_tests_8cs_source_1l02156"/>02156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine($<emphasis role="stringliteral">&quot;{childIndentation}{child.SyntaxKind}__{syntaxToken.TextSpan.GetText()}&quot;</emphasis>);
<anchor xml:id="__expression_tests_8cs_source_1l02157"/>02157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l02158"/>02158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l02159"/>02159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__expression_tests_8cs_source_1l02160"/>02160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(indentation&#32;==&#32;0)
<anchor xml:id="__expression_tests_8cs_source_1l02161"/>02161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine();
<anchor xml:id="__expression_tests_8cs_source_1l02162"/>02162 &#32;&#32;&#32;&#32;}
<anchor xml:id="__expression_tests_8cs_source_1l02163"/>02163 }
</programlisting></section>
