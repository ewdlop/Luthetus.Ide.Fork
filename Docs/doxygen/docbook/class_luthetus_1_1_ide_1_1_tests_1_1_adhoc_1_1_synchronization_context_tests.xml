<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests" xml:lang="en-US">
<title>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests Class Reference</title>
<indexterm><primary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</primary></indexterm>
<para>

<para>Personal tests of &quot;Hunter Freeman&quot; are in this file. Probably delete this file long term. </para>
 
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1acd375081173a230d49e43dab7601bbea">Synchronous</link> ()</para>

<para>Idea: Assign a value, increment that value, then assert initialValue + 1.<?linebreak?><?linebreak?>. </para>
</listitem>
            <listitem><para>async Task <link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a0204609155382c9e2089d20874b2e00a">AsynchronousWithAwait</link> ()</para>

<para>Idea: Assign a value, increment that value, then assert initialValue + 1.<?linebreak?><?linebreak?>. </para>
</listitem>
            <listitem><para>async Task <link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1ac084ebb129deff829b4fc8f6b98f2e04">AsynchronousNoAwait</link> ()</para>

<para>Idea: Assign a value, increment that value, then assert initialValue + 1.<?linebreak?><?linebreak?>. </para>
</listitem>
            <listitem><para>async Task <link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1aa60f58c443bfaf0e11fea31a65f3fba7">AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByExecutingSynchronousCodeBetweenItAndTheIncrementation_LargeForLoopUpperBound</link> ()</para>

<para>This test says the actual value is 3 for my current computer. But why did it decide to complete the task here? What if I have the for loop go up to a smaller upper limit. </para>
</listitem>
            <listitem><para>async Task <link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a3b1e5f4e5ad4be57203500b92644a4a9">AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByExecutingSynchronousCodeBetweenItAndTheIncrementation_SmallForLoopUpperBound</link> ()</para>

<para>This test says the actual value is 2 on my computer. It is deeply unsettling that when the upper bound was &apos;1_000_000&apos; it did increment, yet here it didn&apos;t<?linebreak?><?linebreak?>. </para>
</listitem>
            <listitem><para>async Task <link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a9a95ae60246c950f91694f80a8357bc9">AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementation_TaskDelayNonZero</link> ()</para>

<para>This test has 3 as the actual value on my computer. </para>
</listitem>
            <listitem><para>async Task <link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a188ba522857c739aa993046d5f2db7f1">AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementationTaskDelayZero</link> ()</para>

<para>This test has 2 as the actual value on my computer. </para>
</listitem>
            <listitem><para>async Task <link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a6171884db76ec3c2d3426b068743d8f2">AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementationTaskDelayOne</link> ()</para>

<para>This test has 2 as the actual value on my computer.<?linebreak?><?linebreak?>. </para>
</listitem>
            <listitem><para>async Task <link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a7b892bae8808820a3accf384ec109758">Concurrency_WhenAll</link> ()</para>

<para>Can concurrency be performed with a single thread? -An &apos;async-await&apos; model allows this. Can concurrency be performed with a multiple threads? -I&apos;m struggling to respond to this, because would this be parallelism? -What is the difference between concurrency and parallelism. -I suppose you could execute multiple threads concurrently, by using an &apos;async-await&apos; model. -But that furthermore if one ran the threads on two separate computers, then that would be parallelism (no longer concurrent) -I found it easier to think of &quot;two separate computers&quot;, rather than one computer performing parallelism with its own hardware. -I think this clearly shows that I don&apos;t understand computer hardware, and that I should learn more about it. -Is concurrency referring to running many tasks on a single processor with an &apos;await-async&apos; like model, where as parallelism refers to having each task run on a separate processor? -Furthermore, what is a processor, is this the correct word? </para>
</listitem>
            <listitem><para>async Task <link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a5b85d3fc42489018135560ed815657b6">Concurrency_OneAtATime</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1aabd5fd38d0b6f33648437452adcd87b7">Parallel_Sync</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a0ef8e06e0da6ebd62edaed01c4689ae4">Parallel_Async</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Personal tests of &quot;Hunter Freeman&quot; are in this file. Probably delete this file long term. </para>



<para>Purpose of these tests: I like to think that I understand the phrases: -Synchronous -Asynchronous -Concurrency -Parallel -Single Threaded (should the word &apos;runtime&apos; be added to the end of this?) -Multi Threaded (should the word &apos;runtime&apos; be added to the end of this?) -Threads as a general concept -Operating System task vs process &apos;things&apos; -Operating System level Task Scheduling -.NET level Task Scheduling -.NET to Operating System interop relating to tasks -.NET SynchronizationContext -.NET HostedService -.NET BackgroundService -ConfigureAwait(false)</para>

<para>But, I think the reality is that I don&apos;t have clue what I&apos;m doing.</para>

<para>So, I&apos;d like to learn, and do better.</para>

<para>Hopefully I can write a test for every detail of how these things work, and by doing so learn something. </para>
<para>
Definition at line <link linkend="__synchronization_context_tests_8cs_source_1l00032">32</link> of file <link linkend="__synchronization_context_tests_8cs_source">SynchronizationContextTests.cs</link>.</para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1ac084ebb129deff829b4fc8f6b98f2e04"/><section>
    <title>AsynchronousNoAwait()</title>
<indexterm><primary>AsynchronousNoAwait</primary><secondary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</secondary></indexterm>
<indexterm><primary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</primary><secondary>AsynchronousNoAwait</secondary></indexterm>
<para><computeroutput>async Task Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests.AsynchronousNoAwait ( )</computeroutput></para><para>

<para>Idea: Assign a value, increment that value, then assert initialValue + 1.<?linebreak?><?linebreak?>. </para>
</para>

<para>Reason: This code runs asynchronously, but the task is NOT awaited, therefore by the time the program reaches the assertion, the increment is guaranteed to NOT have occurred.</para>

<para>Thoughts: -Is it true that the increment is guaranteed to NOT have occurred? -If I run this enough times could the scheduler for some reason decide to run it immediately? -If I run this code on various operating systems, could the output be different, by nature of the operating system&apos;s scheduler? -Does the computer&apos;s architecture come into play with scheduling tasks? -If it does, how much variance can I encounter by changing the computer&apos;s architecture? -If I add enough code between the &apos;Task.Run&apos; that isn&apos;t awaited, and the assertion, could I manage to have the task complete prior to the assertion? -I specifically say &apos;code&apos; here rather than &apos;await Task.Delay(...)&apos;, because I imagine the inclusion of the &apos;await&apos; keyword could result in a different outcome than if I just added something synchronous, but long enough timespan to compute, that the task somehow finishes. </para>
<para>
Definition at line <link linkend="__synchronization_context_tests_8cs_source_1l00092">92</link> of file <link linkend="__synchronization_context_tests_8cs_source">SynchronizationContextTests.cs</link>.</para>
</section>
<anchor xml:id="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a9a95ae60246c950f91694f80a8357bc9"/><section>
    <title>AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementation_TaskDelayNonZero()</title>
<indexterm><primary>AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementation_TaskDelayNonZero</primary><secondary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</secondary></indexterm>
<indexterm><primary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</primary><secondary>AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementation_TaskDelayNonZero</secondary></indexterm>
<para><computeroutput>async Task Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests.AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementation_TaskDelayNonZero ( )</computeroutput></para><para>

<para>This test has 3 as the actual value on my computer. </para>
</para>
<para>
Definition at line <link linkend="__synchronization_context_tests_8cs_source_1l00198">198</link> of file <link linkend="__synchronization_context_tests_8cs_source">SynchronizationContextTests.cs</link>.</para>
</section>
<anchor xml:id="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a6171884db76ec3c2d3426b068743d8f2"/><section>
    <title>AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementationTaskDelayOne()</title>
<indexterm><primary>AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementationTaskDelayOne</primary><secondary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</secondary></indexterm>
<indexterm><primary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</primary><secondary>AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementationTaskDelayOne</secondary></indexterm>
<para><computeroutput>async Task Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests.AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementationTaskDelayOne ( )</computeroutput></para><para>

<para>This test has 2 as the actual value on my computer.<?linebreak?><?linebreak?>. </para>
</para>

<para>Idea: I have a test for a 0ms delay, and a 1000ms delay. The 0ms delay says the actual value is 2, whereas the 1000ms delay says the actual value is 3. | I&apos;m wondering if maybe the 0ms delay results in some sort of short circuiting, as if the &apos;await&apos; keyword isn&apos;t even there. | For that reasoning, I&apos;m going to use a 1ms delay, to see if it ends up with the actual value being 3. </para>
<para>
Definition at line <link linkend="__synchronization_context_tests_8cs_source_1l00246">246</link> of file <link linkend="__synchronization_context_tests_8cs_source">SynchronizationContextTests.cs</link>.</para>
</section>
<anchor xml:id="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a188ba522857c739aa993046d5f2db7f1"/><section>
    <title>AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementationTaskDelayZero()</title>
<indexterm><primary>AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementationTaskDelayZero</primary><secondary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</secondary></indexterm>
<indexterm><primary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</primary><secondary>AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementationTaskDelayZero</secondary></indexterm>
<para><computeroutput>async Task Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests.AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementationTaskDelayZero ( )</computeroutput></para><para>

<para>This test has 2 as the actual value on my computer. </para>
</para>
<para>
Definition at line <link linkend="__synchronization_context_tests_8cs_source_1l00217">217</link> of file <link linkend="__synchronization_context_tests_8cs_source">SynchronizationContextTests.cs</link>.</para>
</section>
<anchor xml:id="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1aa60f58c443bfaf0e11fea31a65f3fba7"/><section>
    <title>AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByExecutingSynchronousCodeBetweenItAndTheIncrementation_LargeForLoopUpperBound()</title>
<indexterm><primary>AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByExecutingSynchronousCodeBetweenItAndTheIncrementation_LargeForLoopUpperBound</primary><secondary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</secondary></indexterm>
<indexterm><primary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</primary><secondary>AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByExecutingSynchronousCodeBetweenItAndTheIncrementation_LargeForLoopUpperBound</secondary></indexterm>
<para><computeroutput>async Task Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests.AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByExecutingSynchronousCodeBetweenItAndTheIncrementation_LargeForLoopUpperBound ( )</computeroutput></para><para>

<para>This test says the actual value is 3 for my current computer. But why did it decide to complete the task here? What if I have the for loop go up to a smaller upper limit. </para>
</para>
<para>
Definition at line <link linkend="__synchronization_context_tests_8cs_source_1l00113">113</link> of file <link linkend="__synchronization_context_tests_8cs_source">SynchronizationContextTests.cs</link>.</para>
</section>
<anchor xml:id="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a3b1e5f4e5ad4be57203500b92644a4a9"/><section>
    <title>AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByExecutingSynchronousCodeBetweenItAndTheIncrementation_SmallForLoopUpperBound()</title>
<indexterm><primary>AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByExecutingSynchronousCodeBetweenItAndTheIncrementation_SmallForLoopUpperBound</primary><secondary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</secondary></indexterm>
<indexterm><primary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</primary><secondary>AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByExecutingSynchronousCodeBetweenItAndTheIncrementation_SmallForLoopUpperBound</secondary></indexterm>
<para><computeroutput>async Task Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests.AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByExecutingSynchronousCodeBetweenItAndTheIncrementation_SmallForLoopUpperBound ( )</computeroutput></para><para>

<para>This test says the actual value is 2 on my computer. It is deeply unsettling that when the upper bound was &apos;1_000_000&apos; it did increment, yet here it didn&apos;t<?linebreak?><?linebreak?>. </para>
</para>

<para>In terms of a &quot;human feeling&quot;. It &quot;feels&quot; like it makes sense. But at the end of the day, I have no idea why it did this.<?linebreak?><?linebreak?></para>

<para>Its horrifying to think that my computer is running, and I&apos;m using it at this moment. Because there is an unfathomable amount of code being executed, and tasks communicating to one another.<?linebreak?><?linebreak?></para>

<para>How is it possible for the internet to function? Perhaps I purchase something online. I then get charged for &quot;some&quot;-dollar amount, maybe $50 is the charge. I then attempt to pay $50, but somehow the &quot;bytes&quot; that are sent over the internet, are incorrectly saying that I am paying $5,000?<?linebreak?><?linebreak?></para>

<para>Computers appear to be like glass to me. I feel like at any moment everything could shatter, and yet it often works.<?linebreak?><?linebreak?></para>

<para>My perspective here is largely from a &quot;human&quot;-perspective. That is, what if my computer tries to add &quot;4 + 4&quot;, but is feeling a bit tired that day, and tells me the result is 44 instead of 8?<?linebreak?><?linebreak?></para>

<para>Wouldn&apos;t it only take 1 tiny error in my computer for the entire thing to crash? Suppossedly 1s and 0s are set/unset. How many times per second is this being done? Its nauseating to think of doing this as a human, and not making a mistake.<?linebreak?><?linebreak?></para>

<para>Its like some odd anxiety that I could write a for loop in C# that writes &quot;Hello World\n&quot;. But if I run it for enough loops it somehow writes out &quot;Abc123&quot;?<?linebreak?><?linebreak?></para>

<para>I am struggling to wrap my head around the setting of 1s and 0s. I imagine a computer going along setting its bits, then lightning strikes, and this somehow makes the computer write out a 1 instead of a 0. Then the result of this singular bit being incorrectly written out results in some catastrophic event.<?linebreak?><?linebreak?></para>

<para>Even worse, simply imagining a computer settings 1s and 0s, in my head, there is an extremely anxious thought that it goes to mess up, due to no external circumstances, and it will be solely inexplainable.<?linebreak?><?linebreak?> </para>
<para>
Definition at line <link linkend="__synchronization_context_tests_8cs_source_1l00174">174</link> of file <link linkend="__synchronization_context_tests_8cs_source">SynchronizationContextTests.cs</link>.</para>
</section>
<anchor xml:id="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a0204609155382c9e2089d20874b2e00a"/><section>
    <title>AsynchronousWithAwait()</title>
<indexterm><primary>AsynchronousWithAwait</primary><secondary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</secondary></indexterm>
<indexterm><primary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</primary><secondary>AsynchronousWithAwait</secondary></indexterm>
<para><computeroutput>async Task Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests.AsynchronousWithAwait ( )</computeroutput></para><para>

<para>Idea: Assign a value, increment that value, then assert initialValue + 1.<?linebreak?><?linebreak?>. </para>
</para>

<para>Reason: This code runs asynchronously, but the task is awaited, therefore by the time the program reaches the assertion, the increment is guaranteed to have occurred. </para>
<para>
Definition at line <link linkend="__synchronization_context_tests_8cs_source_1l00059">59</link> of file <link linkend="__synchronization_context_tests_8cs_source">SynchronizationContextTests.cs</link>.</para>
</section>
<anchor xml:id="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a5b85d3fc42489018135560ed815657b6"/><section>
    <title>Concurrency_OneAtATime()</title>
<indexterm><primary>Concurrency_OneAtATime</primary><secondary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</secondary></indexterm>
<indexterm><primary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</primary><secondary>Concurrency_OneAtATime</secondary></indexterm>
<para><computeroutput>async Task Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests.Concurrency_OneAtATime ( )</computeroutput></para><para>
Definition at line <link linkend="__synchronization_context_tests_8cs_source_1l00303">303</link> of file <link linkend="__synchronization_context_tests_8cs_source">SynchronizationContextTests.cs</link>.</para>
</section>
<anchor xml:id="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a7b892bae8808820a3accf384ec109758"/><section>
    <title>Concurrency_WhenAll()</title>
<indexterm><primary>Concurrency_WhenAll</primary><secondary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</secondary></indexterm>
<indexterm><primary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</primary><secondary>Concurrency_WhenAll</secondary></indexterm>
<para><computeroutput>async Task Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests.Concurrency_WhenAll ( )</computeroutput></para><para>

<para>Can concurrency be performed with a single thread? -An &apos;async-await&apos; model allows this. Can concurrency be performed with a multiple threads? -I&apos;m struggling to respond to this, because would this be parallelism? -What is the difference between concurrency and parallelism. -I suppose you could execute multiple threads concurrently, by using an &apos;async-await&apos; model. -But that furthermore if one ran the threads on two separate computers, then that would be parallelism (no longer concurrent) -I found it easier to think of &quot;two separate computers&quot;, rather than one computer performing parallelism with its own hardware. -I think this clearly shows that I don&apos;t understand computer hardware, and that I should learn more about it. -Is concurrency referring to running many tasks on a single processor with an &apos;await-async&apos; like model, where as parallelism refers to having each task run on a separate processor? -Furthermore, what is a processor, is this the correct word? </para>
</para>
<para>
Definition at line <link linkend="__synchronization_context_tests_8cs_source_1l00284">284</link> of file <link linkend="__synchronization_context_tests_8cs_source">SynchronizationContextTests.cs</link>.</para>
</section>
<anchor xml:id="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a0ef8e06e0da6ebd62edaed01c4689ae4"/><section>
    <title>Parallel_Async()</title>
<indexterm><primary>Parallel_Async</primary><secondary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</secondary></indexterm>
<indexterm><primary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</primary><secondary>Parallel_Async</secondary></indexterm>
<para><computeroutput>void Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests.Parallel_Async ( )</computeroutput></para><para>
Definition at line <link linkend="__synchronization_context_tests_8cs_source_1l00386">386</link> of file <link linkend="__synchronization_context_tests_8cs_source">SynchronizationContextTests.cs</link>.</para>
</section>
<anchor xml:id="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1aabd5fd38d0b6f33648437452adcd87b7"/><section>
    <title>Parallel_Sync()</title>
<indexterm><primary>Parallel_Sync</primary><secondary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</secondary></indexterm>
<indexterm><primary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</primary><secondary>Parallel_Sync</secondary></indexterm>
<para><computeroutput>void Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests.Parallel_Sync ( )</computeroutput></para><para>
Definition at line <link linkend="__synchronization_context_tests_8cs_source_1l00355">355</link> of file <link linkend="__synchronization_context_tests_8cs_source">SynchronizationContextTests.cs</link>.</para>
</section>
<anchor xml:id="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1acd375081173a230d49e43dab7601bbea"/><section>
    <title>Synchronous()</title>
<indexterm><primary>Synchronous</primary><secondary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</secondary></indexterm>
<indexterm><primary>Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests</primary><secondary>Synchronous</secondary></indexterm>
<para><computeroutput>void Luthetus.Ide.Tests.Adhoc.SynchronizationContextTests.Synchronous ( )</computeroutput></para><para>

<para>Idea: Assign a value, increment that value, then assert initialValue + 1.<?linebreak?><?linebreak?>. </para>
</para>

<para>Reason: This code runs synchronously, therefore by the time the program reaches the assertion, the increment is guaranteed to have occurred. </para>
<para>
Definition at line <link linkend="__synchronization_context_tests_8cs_source_1l00041">41</link> of file <link linkend="__synchronization_context_tests_8cs_source">SynchronizationContextTests.cs</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Source/Tests/Ide/Adhoc/<link linkend="__synchronization_context_tests_8cs">SynchronizationContextTests.cs</link></section>
</section>
