<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_md__docs_2_text_editor_2usage" xml:lang="en-US">
<title>
<para>Luthetus.TextEditor (v2.1.0) </para>
</title>
<indexterm><primary>Luthetus.TextEditor (v2.1.0)</primary></indexterm>

<para><anchor xml:id="_md__docs_2_text_editor_2usage_1autotoc_md203"/></para>
<section xml:id="_md__docs_2_text_editor_2usage_1autotoc_md204">
<title>Usage</title><section xml:id="_md__docs_2_text_editor_2usage_1autotoc_md205">
<title>Source Code</title>
<para>The .NET Solution: <link xlink:href="../../Source/Tutorials/Luthetus.Tutorials.sln">Luthetus.Tutorials.sln</link>, was made by following steps described here. So, the completed result can be found there.</para>
</section>
<section xml:id="_md__docs_2_text_editor_2usage_1autotoc_md206">
<title>Goal</title>
<para></para>

<para><itemizedlist>
<listitem>
<para>Render a C# Text Editor which makes use of the CSharpCompilerService</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md__docs_2_text_editor_2usage_1autotoc_md207">
<title>Steps</title>
<para><itemizedlist>
<listitem>
<para>Create a codebehind for the file: <computeroutput>Pages/Index.razor</computeroutput></para>
</listitem></itemizedlist>
</para>

<para><literallayout><computeroutput>//&#32;Pages/Index.razor.cs

using&#32;Microsoft.AspNetCore.Components;

namespace&#32;Luthetus.Tutorials.RazorLib.Pages;

public&#32;partial&#32;class&#32;Index&#32;:&#32;ComponentBase
{
}
</computeroutput></literallayout></para>

<para><itemizedlist>
<listitem>
<para>There are 2 parts to rendering a Text Editor.</para>
</listitem><listitem>
<para>First, one needs to make a <link xlink:href="/Source/Lib/TextEditor/TextEditors/Models/TextEditorModel.Constructors.cs">TextEditorModel</link>.</para>
</listitem><listitem>
<para>Then, one needs to make a <link xlink:href="/Source/Lib/TextEditor/TextEditors/Models/TextEditorViewModel.cs">TextEditorViewModel</link> for that previously made <computeroutput>model</computeroutput>.</para>
</listitem><listitem>
<para>In <link linkend="__index_8razor_8cs">Index.razor.cs</link> add the following line of code:</para>
</listitem></itemizedlist>
</para>

<para><literallayout><computeroutput>//&#32;using&#32;Luthetus.TextEditor.RazorLib.Lexers.Models;
public&#32;static&#32;ResourceUri&#32;ResourceUri&#32;{&#32;get;&#32;}&#32;=&#32;new(&quot;/index.txt&quot;);
</computeroutput></literallayout></para>

<para><itemizedlist>
<listitem>
<para>The <link xlink:href="/Source/Lib/TextEditor/Lexers/Models/ResourceUri.cs">ResourceUri</link> is a unique identifier for a given <computeroutput>TextEditorModel</computeroutput>.</para>
</listitem><listitem>
<para>One might think of a <computeroutput>TextEditorModel</computeroutput> as mapping to a file on their filesystem, as an example.</para>
</listitem><listitem>
<para>Override the Blazor lifecycle method named: <computeroutput>OnInitialized()</computeroutput></para>
</listitem></itemizedlist>
</para>

<para><literallayout><computeroutput>protected&#32;override&#32;void&#32;OnInitialized()
{
&#32;&#32;&#32;&#32;base.OnInitialized();
}
</computeroutput></literallayout></para>

<para><itemizedlist>
<listitem>
<para>Inside this override, and above the <computeroutput>base.OnInitialized();</computeroutput> invocation, we can register the <computeroutput>TextEditorModel</computeroutput>.</para>
</listitem><listitem>
<para>We need access to the <link xlink:href="/Source/Lib/TextEditor/ITextEditorService.cs">ITextEditorService</link> to register a <computeroutput>TextEditorModel</computeroutput>. So, inject the <computeroutput>ITextEditorService</computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para><literallayout><computeroutput>//&#32;using&#32;Luthetus.TextEditor.RazorLib;
[Inject]
private&#32;ITextEditorService&#32;TextEditorService&#32;{&#32;get;&#32;set;&#32;}&#32;=&#32;null!;
</computeroutput></literallayout></para>

<para><itemizedlist>
<listitem>
<para>The <computeroutput>ITextEditorService</computeroutput> has public properties that encapsulate the API for a given datatype in the <computeroutput><link linkend="_namespace_luthetus_1_1_text_editor">Luthetus.TextEditor</link></computeroutput> namespace. For example, <computeroutput>TextEditorService.ModelApi</computeroutput> accesses the <computeroutput>ModelApi</computeroutput> property, which has all of the API related to the <computeroutput>TextEditorModel</computeroutput> datatype.</para>
</listitem><listitem>
<para>By invoking <computeroutput>TextEditorService.ModelApi.RegisterCustom(...);</computeroutput>, we can create register a TextEditorModel. The <computeroutput>RegisterCustom(...)</computeroutput> method takes as a parameter an instance of <computeroutput>TextEditorModel</computeroutput>. So we need to make that instance.</para>
</listitem><listitem>
<para>In the override for <computeroutput>OnInitialized()</computeroutput>, create an instance of a <computeroutput>TextEditorModel</computeroutput>. Then, pass it in to the <computeroutput>TextEditorService.Model.RegisterCustom(...)</computeroutput> invocation.</para>
</listitem></itemizedlist>
</para>

<para><literallayout><computeroutput>protected&#32;override&#32;void&#32;OnInitialized()
{
&#32;&#32;&#32;&#32;var&#32;model&#32;=&#32;new&#32;TextEditorModel(
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResourceUri,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DateTime.UtcNow,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExtensionNoPeriodFacts.TXT,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;@&quot;public&#32;class&#32;MyClass
{
&#32;&#32;&#32;&#32;public&#32;MyClass(string&#32;firstName,&#32;string&#32;lastName)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FirstName&#32;=&#32;firstName;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LastName&#32;=&#32;lastName;
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;public&#32;string&#32;FirstName&#32;{&#32;get;&#32;set;&#32;}
&#32;&#32;&#32;&#32;public&#32;string&#32;LastName&#32;{&#32;get;&#32;set;&#32;}
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;public&#32;string&#32;DisplayName&#32;=&gt;&#32;$&quot;&quot;{{FirstName}}&#32;{LastName}&quot;&quot;;
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;public&#32;void&#32;SomeMethod(int&#32;arg1,&#32;MyClass&#32;arg2)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(arg1&#32;==&#32;2)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return;
&#32;&#32;&#32;&#32;}
}&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decorationMapper:&#32;null,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compilerService:&#32;null);

&#32;&#32;&#32;&#32;TextEditorService.ModelApi.RegisterCustom(model);

&#32;&#32;&#32;&#32;base.OnInitialized();
}
</computeroutput></literallayout></para>

<para><itemizedlist>
<listitem>
<para>In order to render a <computeroutput>TextEditorModel</computeroutput>, we need a <link xlink:href="/Source/Lib/TextEditor/TextEditors/Models/TextEditorViewModel.cs">TextEditorViewModel</link>. A file on one&apos;s operating system would relate to a <computeroutput>model</computeroutput>. Whereas, an open text editor would relate to a <computeroutput>viewModel</computeroutput>.</para>
</listitem><listitem>
<para>Many <computeroutput>TextEditorViewModel</computeroutput> can reference an underlying <computeroutput>TextEditorModel</computeroutput>. But, only 1 <computeroutput>model</computeroutput> for a given file on one&apos;s operating system can exist.</para>
</listitem></itemizedlist>
</para>

<para><blockquote>
<para><emphasis>NOTE:</emphasis> I use an example of a operating system&apos;s file system but, it is just an example, one can make a TextEditorModel out of &quot;thin air&quot; if they&apos;d like to. </para>
</blockquote></para>

<para><itemizedlist>
<listitem>
<para>We need a TextEditorViewModelKey so we can maintain the TextEditorViewModel state between page changes.</para>
</listitem><listitem>
<para>Add the following line of code:</para>
</listitem></itemizedlist>
</para>

<para><literallayout><computeroutput>public&#32;static&#32;Key&lt;TextEditorViewModel&gt;&#32;ViewModelKey&#32;{&#32;get;&#32;}&#32;=&#32;Key&lt;TextEditorViewModel&gt;.NewKey();
</computeroutput></literallayout></para>

<para><itemizedlist>
<listitem>
<para>Now, in the override for <computeroutput>OnInitialized()</computeroutput>, invoke <computeroutput>TextEditorService.ViewModelApi.Register(...)</computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para><blockquote>
<para><emphasis>NOTE:</emphasis> The argument &apos;Category&apos; to &apos;TextEditorService.ViewModelApi.Register(...)&apos; can be passed as &apos;new Category(&quot;main&quot;)&apos;. It acts only as a way to filter a list of view models. </para>
</blockquote></para>

<para><literallayout><computeroutput>TextEditorService.ViewModelApi.Register(
&#32;&#32;&#32;&#32;ViewModelKey,
&#32;&#32;&#32;&#32;ResourceUri,
&#32;&#32;&#32;&#32;new&#32;Category(&quot;main&quot;));
</computeroutput></literallayout></para>

<para><itemizedlist>
<listitem>
<para>My <computeroutput><link linkend="__index_8razor_8cs">Pages/Index.razor.cs</link></computeroutput> file as of this step looks as follows:</para>
</listitem></itemizedlist>
</para>

<para><literallayout><computeroutput>using&#32;Microsoft.AspNetCore.Components;
using&#32;Luthetus.Common.RazorLib.Keys.Models;
using&#32;Luthetus.TextEditor.RazorLib;
using&#32;Luthetus.TextEditor.RazorLib.TextEditors.Models;
using&#32;Luthetus.TextEditor.RazorLib.Lexers.Models;
using&#32;Luthetus.TextEditor.RazorLib.CompilerServices.Interfaces;
using&#32;Luthetus.TextEditor.RazorLib.Decorations.Models;

namespace&#32;Luthetus.Tutorials.RazorLib.Pages;

public&#32;partial&#32;class&#32;Index&#32;:&#32;ComponentBase
{
&#32;&#32;&#32;&#32;[Inject]
&#32;&#32;&#32;&#32;private&#32;ITextEditorService&#32;TextEditorService&#32;{&#32;get;&#32;set;&#32;}&#32;=&#32;null!;

&#32;&#32;&#32;&#32;public&#32;static&#32;ResourceUri&#32;ResourceUri&#32;{&#32;get;&#32;}&#32;=&#32;new(&quot;/index.txt&quot;);
&#32;&#32;&#32;&#32;public&#32;static&#32;Key&lt;TextEditorViewModel&gt;&#32;ViewModelKey&#32;{&#32;get;&#32;}&#32;=&#32;Key&lt;TextEditorViewModel&gt;.NewKey();
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;protected&#32;override&#32;void&#32;OnInitialized()
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;model&#32;=&#32;new&#32;TextEditorModel(
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResourceUri,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DateTime.UtcNow,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExtensionNoPeriodFacts.TXT,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;@&quot;public&#32;class&#32;MyClass
{
&#32;&#32;&#32;&#32;public&#32;MyClass(string&#32;firstName,&#32;string&#32;lastName)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FirstName&#32;=&#32;firstName;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LastName&#32;=&#32;lastName;
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;public&#32;string&#32;FirstName&#32;{&#32;get;&#32;set;&#32;}
&#32;&#32;&#32;&#32;public&#32;string&#32;LastName&#32;{&#32;get;&#32;set;&#32;}
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;public&#32;string&#32;DisplayName&#32;=&gt;&#32;$&quot;&quot;{{FirstName}}&#32;{LastName}&quot;&quot;;
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;public&#32;void&#32;SomeMethod(int&#32;arg1,&#32;MyClass&#32;arg2)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(arg1&#32;==&#32;2)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return;
&#32;&#32;&#32;&#32;}
}&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decorationMapper:&#32;null,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compilerService:&#32;null);
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TextEditorService.ModelApi.RegisterCustom(model);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TextEditorService.ViewModelApi.Register(
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ViewModelKey,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResourceUri,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new&#32;Category(&quot;main&quot;));
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base.OnInitialized();
&#32;&#32;&#32;&#32;}
}
</computeroutput></literallayout></para>

<para><itemizedlist>
<listitem>
<para>In the .razor markup (<computeroutput>Pages/Index.razor</computeroutput>) render the Blazor component: <computeroutput>&lt;<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_text_editors_1_1_displays_1_1_text_editor_view_model_display">Luthetus.TextEditor.RazorLib.TextEditors.Displays.TextEditorViewModelDisplay</link>/&gt;</computeroutput></para>
</listitem><listitem>
<para>This component takes various parameters, but only one of them is required. The rest of the parameters are for customization.</para>
</listitem><listitem>
<para>Pass in the required parameter <computeroutput>TextEditorViewModelKey</computeroutput> to have the value of the <computeroutput>TextEditorViewModelKey</computeroutput> property from the codebehind.</para>
</listitem></itemizedlist>
</para>

<para><literallayout><computeroutput>@page&#32;&quot;/&quot;

@using&#32;Luthetus.TextEditor.RazorLib.TextEditors.Displays;

&lt;PageTitle&gt;Index&lt;/PageTitle&gt;

&lt;h1&gt;Hello,&#32;world!&lt;/h1&gt;

Welcome&#32;to&#32;your&#32;new&#32;app.

&lt;TextEditorViewModelDisplay&#32;TextEditorViewModelKey=&quot;ViewModelKey&quot;&#32;/&gt;
</computeroutput></literallayout></para>

<para><itemizedlist>
<listitem>
<para>A plain text editor without syntax highlighting should render now when the app is ran.</para>
</listitem></itemizedlist>
</para>

<para></para>

<para><blockquote>
<para><emphasis>NOTE:</emphasis> Height of the text editor is 100% of the parent element. In the Blazor default project template one needs the following: </para>
</blockquote></para>

<para><literallayout><computeroutput>&#32;html
&lt;!--&#32;Example&#32;for&#32;more&#32;height&#32;in&#32;the&#32;Blazor&#32;default&#32;project&#32;template&#32;(this&#32;is&#32;not&#32;an&#32;example&#32;of&#32;ideal&#32;responsive&#32;UI&#32;css&#32;but&#32;it&#32;gets&#32;across&#32;the&#32;idea&#32;and&#32;one&#32;can&#32;customize&#32;as&#32;needed.)&#32;--&gt;

&lt;!--&#32;Index.razor&#32;--&gt;

@page&#32;&quot;/&quot;

@using&#32;Luthetus.TextEditor.RazorLib.TextEditors.Displays;

&lt;PageTitle&gt;Index&lt;/PageTitle&gt;

&lt;div&#32;style=&quot;height:&#32;5em;&quot;&gt;
&#32;&#32;&#32;&#32;&lt;h1&gt;Hello,&#32;world!&lt;/h1&gt;
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;Welcome&#32;to&#32;your&#32;new&#32;app.
&lt;/div&gt;

@*&#32;10px&#32;for&#32;padding&#32;*@
&lt;div&#32;style=&quot;height:&#32;calc(100%&#32;-&#32;5em&#32;-&#32;10px);&quot;&gt;
&#32;&#32;&#32;&#32;&lt;TextEditorViewModelDisplay&#32;TextEditorViewModelKey=&quot;ViewModelKey&quot;/&gt;
&lt;/div&gt;
</computeroutput></literallayout></para>

<para><literallayout><computeroutput>&#32;html
&lt;!--&#32;Example&#32;for&#32;more&#32;height&#32;in&#32;the&#32;Blazor&#32;default&#32;project&#32;template&#32;(this&#32;is&#32;not&#32;an&#32;example&#32;of&#32;ideal&#32;responsive&#32;UI&#32;css&#32;but&#32;it&#32;gets&#32;across&#32;the&#32;idea&#32;and&#32;one&#32;can&#32;customize&#32;as&#32;needed.)&#32;--&gt;

&lt;!--&#32;MainLayout.razor&#32;--&gt;

@inherits&#32;LayoutComponentBase

&lt;PageTitle&gt;Luthetus.Tutorials&lt;/PageTitle&gt;

&lt;div&#32;class=&quot;page&quot;&gt;
&#32;&#32;&#32;&#32;&lt;div&#32;class=&quot;sidebar&quot;&gt;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;NavMenu&#32;/&gt;
&#32;&#32;&#32;&#32;&lt;/div&gt;

&#32;&#32;&#32;&#32;&lt;main&gt;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;div&#32;class=&quot;top-row&#32;px-4&quot;&gt;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;a&#32;href=&quot;https://docs.microsoft.com/aspnet/&quot;&#32;target=&quot;_blank&quot;&gt;About&lt;/a&gt;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;/div&gt;

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;!--&#32;THE&#32;CHANGE&#32;IS&#32;HERE&#32;TO&#32;THE&#32;STYLE&#32;ATTRIBUTE&#32;OF&#32;THE&#32;ARTCILE&#32;ELEMENT.&#32;56px&#32;is&#32;the&#32;height&#32;of&#32;the&#32;top-row.&#32;--&gt;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;article&#32;class=&quot;content&#32;px-4&quot;&#32;style=&quot;height:&#32;calc(100%&#32;-&#32;56px);&quot;&gt;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;@Body
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;/article&gt;
&#32;&#32;&#32;&#32;&lt;/main&gt;
&lt;/div&gt;
</computeroutput></literallayout></para>

<para></para>

<para><itemizedlist>
<listitem>
<para>Now we can add in the C# Compiler Service.</para>
</listitem><listitem>
<para>Reference the <computeroutput><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp">Luthetus.CompilerServices.CSharp</link></computeroutput> Nuget Package</para>
</listitem></itemizedlist>
</para>

<para>Go to the file that you register your services and add the following lines of C# code.</para>

<para><literallayout><computeroutput>using&#32;Luthetus.TextEditor.RazorLib.CompilerServices.Interfaces;
using&#32;Luthetus.TextEditor.RazorLib.Decorations.Models;

//&#32;NOTE:&#32;the&#32;next&#32;step&#32;creates&#32;the&#32;implementations
services
&#32;&#32;&#32;&#32;.AddScoped&lt;ICompilerServiceRegistry,&#32;CompilerServiceRegistry&gt;()
&#32;&#32;&#32;&#32;.AddScoped&lt;IDecorationMapperRegistry,&#32;DecorationMapperRegistry&gt;();
</computeroutput></literallayout></para>

<para>Add CompilerServiceRegistry.cs as follows: <literallayout><computeroutput>using&#32;System.Collections.Immutable;
using&#32;Fluxor;
using&#32;Luthetus.Common.RazorLib.FileSystems.Models;
using&#32;Luthetus.TextEditor.RazorLib;
using&#32;Luthetus.TextEditor.RazorLib.CompilerServices.Implementations;
using&#32;Luthetus.TextEditor.RazorLib.CompilerServices.Interfaces;
using&#32;Luthetus.TextEditor.RazorLib.TextEditors.Models;
using&#32;Luthetus.CompilerServices.CSharp.CompilerServiceCase;

namespace&#32;Luthetus.Tutorials.RazorLib.CompilerServices;

public&#32;class&#32;CompilerServiceRegistry&#32;:&#32;ICompilerServiceRegistry
{
&#32;&#32;&#32;&#32;private&#32;readonly&#32;Dictionary&lt;string,&#32;ICompilerService&gt;&#32;_map&#32;=&#32;new();

&#32;&#32;&#32;&#32;public&#32;ImmutableDictionary&lt;string,&#32;ICompilerService&gt;&#32;Map&#32;=&gt;&#32;_map.ToImmutableDictionary();
&#32;&#32;&#32;&#32;public&#32;ImmutableList&lt;ICompilerService&gt;&#32;CompilerServiceList&#32;=&gt;&#32;_map.Select(x&#32;=&gt;&#32;x.Value).ToImmutableList();

&#32;&#32;&#32;&#32;public&#32;CompilerServiceRegistry(ITextEditorService&#32;textEditorService)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CSharpCompilerService&#32;=&#32;new&#32;CSharpCompilerService(textEditorService);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DefaultCompilerService&#32;=&#32;new&#32;CompilerService(textEditorService);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_map.Add(ExtensionNoPeriodFacts.C_SHARP_CLASS,&#32;CSharpCompilerService);
&#32;&#32;&#32;&#32;}

&#32;&#32;&#32;&#32;public&#32;CSharpCompilerService&#32;CSharpCompilerService&#32;{&#32;get;&#32;}
&#32;&#32;&#32;&#32;public&#32;CompilerService&#32;DefaultCompilerService&#32;{&#32;get;&#32;}

&#32;&#32;&#32;&#32;public&#32;ICompilerService&#32;GetCompilerService(string&#32;extensionNoPeriod)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(_map.TryGetValue(extensionNoPeriod,&#32;out&#32;var&#32;compilerService))
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;compilerService;

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;DefaultCompilerService;
&#32;&#32;&#32;&#32;}
}
</computeroutput></literallayout></para>

<para>Add DecorationMapperRegistry.cs as follows:</para>

<para><literallayout><computeroutput>using&#32;System.Collections.Immutable;
using&#32;Luthetus.TextEditor.RazorLib.CompilerServices.GenericLexer.Decoration;
using&#32;Luthetus.TextEditor.RazorLib.Decorations.Models;
using&#32;Luthetus.TextEditor.RazorLib.TextEditors.Models;

namespace&#32;Luthetus.Tutorials.RazorLib.Decorations;

public&#32;class&#32;DecorationMapperRegistry&#32;:&#32;IDecorationMapperRegistry
{
&#32;&#32;&#32;&#32;private&#32;Dictionary&lt;string,&#32;IDecorationMapper&gt;&#32;_map&#32;{&#32;get;&#32;}&#32;=&#32;new();

&#32;&#32;&#32;&#32;public&#32;ImmutableDictionary&lt;string,&#32;IDecorationMapper&gt;&#32;Map&#32;=&gt;&#32;_map.ToImmutableDictionary();

&#32;&#32;&#32;&#32;public&#32;DecorationMapperRegistry()
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GenericDecorationMapper&#32;=&#32;new&#32;GenericDecorationMapper();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DefaultDecorationMapper&#32;=&#32;new&#32;TextEditorDecorationMapperDefault();

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_map.Add(ExtensionNoPeriodFacts.C_SHARP_CLASS,&#32;GenericDecorationMapper);
&#32;&#32;&#32;&#32;}

&#32;&#32;&#32;&#32;public&#32;GenericDecorationMapper&#32;GenericDecorationMapper&#32;{&#32;get;&#32;}
&#32;&#32;&#32;&#32;public&#32;TextEditorDecorationMapperDefault&#32;DefaultDecorationMapper&#32;{&#32;get;&#32;}

&#32;&#32;&#32;&#32;public&#32;IDecorationMapper&#32;GetDecorationMapper(string&#32;extensionNoPeriod)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(_map.TryGetValue(extensionNoPeriod,&#32;out&#32;var&#32;decorationMapper))
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;decorationMapper;

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;DefaultDecorationMapper;
&#32;&#32;&#32;&#32;}
}
</computeroutput></literallayout></para>

<para><itemizedlist>
<listitem>
<para>In the <computeroutput><link linkend="__index_8razor_8cs">Pages/Index.razor.cs</link></computeroutput> file we now can provide the <computeroutput>CSharpCompilerService</computeroutput> when instantiating a <computeroutput>TextEditorModel</computeroutput>.</para>
</listitem><listitem>
<para>Inject the <computeroutput>ICompilerServiceRegistry</computeroutput> and the <computeroutput>IDecorationMapperRegistry</computeroutput></para>
</listitem></itemizedlist>
</para>

<para><literallayout><computeroutput>//&#32;using&#32;Luthetus.TextEditor.RazorLib.CompilerServices.Interfaces;
//&#32;using&#32;Luthetus.TextEditor.RazorLib.Decorations.Models;

[Inject]
private&#32;ICompilerServiceRegistry&#32;CompilerServiceRegistry&#32;{&#32;get;&#32;set;&#32;}&#32;=&#32;null!;
[Inject]
private&#32;IDecorationMapperRegistry&#32;DecorationMapperRegistry&#32;{&#32;get;&#32;set;&#32;}&#32;=&#32;null!;
</computeroutput></literallayout></para>

<para><itemizedlist>
<listitem>
<para>In <computeroutput>OnInitialized()</computeroutput>, prior to constructing the <computeroutput>TextEditorModel</computeroutput> we can get the decoration mapper, and compiler service we wish to use.</para>
</listitem></itemizedlist>
</para>

<para><literallayout><computeroutput>var&#32;genericDecorationMapper&#32;=&#32;DecorationMapperRegistry.GetDecorationMapper(
&#32;&#32;&#32;&#32;ExtensionNoPeriodFacts.C_SHARP_CLASS);

var&#32;cSharpCompilerService&#32;=&#32;CompilerServiceRegistry.GetCompilerService(
&#32;&#32;&#32;&#32;ExtensionNoPeriodFacts.C_SHARP_CLASS);
</computeroutput></literallayout></para>

<para><itemizedlist>
<listitem>
<para>Then pass in <computeroutput>genericDecorationMapper</computeroutput> and <computeroutput>cSharpCompilerService</computeroutput> instead of the nulls when invoking the <computeroutput>TextEditorModel</computeroutput> constructor.</para>
</listitem><listitem>
<para>One last step, on the line immediately following, <computeroutput>TextEditorService.ModelApi.RegisterCustom(model);</computeroutput> add the line: <computeroutput>cSharpCompilerService.RegisterResource(model.ResourceUri, shouldTriggerResourceWasModified: true);</computeroutput></para>
</listitem><listitem>
<para>My <computeroutput><link linkend="__index_8razor_8cs">Pages/Index.razor.cs</link></computeroutput> file as of this step is shown in the following code snippet:</para>
</listitem></itemizedlist>
</para>

<para><literallayout><computeroutput>using&#32;Luthetus.Common.RazorLib.Keys.Models;
using&#32;Luthetus.TextEditor.RazorLib;
using&#32;Luthetus.TextEditor.RazorLib.CompilerServices.Interfaces;
using&#32;Luthetus.TextEditor.RazorLib.Decorations.Models;
using&#32;Luthetus.TextEditor.RazorLib.Lexers.Models;
using&#32;Luthetus.TextEditor.RazorLib.TextEditors.Models;
using&#32;Microsoft.AspNetCore.Components;

namespace&#32;NugetPackageTest.Pages;

public&#32;partial&#32;class&#32;Home&#32;:&#32;ComponentBase
{
&#32;&#32;&#32;&#32;[Inject]
&#32;&#32;&#32;&#32;private&#32;ITextEditorService&#32;TextEditorService&#32;{&#32;get;&#32;set;&#32;}&#32;=&#32;null!;
&#32;&#32;&#32;&#32;[Inject]
&#32;&#32;&#32;&#32;private&#32;ICompilerServiceRegistry&#32;CompilerServiceRegistry&#32;{&#32;get;&#32;set;&#32;}&#32;=&#32;null!;
&#32;&#32;&#32;&#32;[Inject]
&#32;&#32;&#32;&#32;private&#32;IDecorationMapperRegistry&#32;DecorationMapperRegistry&#32;{&#32;get;&#32;set;&#32;}&#32;=&#32;null!;

&#32;&#32;&#32;&#32;public&#32;static&#32;ResourceUri&#32;ResourceUri&#32;{&#32;get;&#32;}&#32;=&#32;new(&quot;/index.txt&quot;);
&#32;&#32;&#32;&#32;public&#32;static&#32;Key&lt;TextEditorViewModel&gt;&#32;ViewModelKey&#32;{&#32;get;&#32;}&#32;=&#32;Key&lt;TextEditorViewModel&gt;.NewKey();

&#32;&#32;&#32;&#32;protected&#32;override&#32;void&#32;OnInitialized()
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;genericDecorationMapper&#32;=&#32;DecorationMapperRegistry.GetDecorationMapper(
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExtensionNoPeriodFacts.C_SHARP_CLASS);

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cSharpCompilerService&#32;=&#32;CompilerServiceRegistry.GetCompilerService(
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExtensionNoPeriodFacts.C_SHARP_CLASS);

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;model&#32;=&#32;new&#32;TextEditorModel(
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResourceUri,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DateTime.UtcNow,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExtensionNoPeriodFacts.TXT,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;@&quot;public&#32;class&#32;MyClass
{
&#32;&#32;&#32;&#32;public&#32;MyClass(string&#32;firstName,&#32;string&#32;lastName)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FirstName&#32;=&#32;firstName;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LastName&#32;=&#32;lastName;
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;public&#32;string&#32;FirstName&#32;{&#32;get;&#32;set;&#32;}
&#32;&#32;&#32;&#32;public&#32;string&#32;LastName&#32;{&#32;get;&#32;set;&#32;}
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;public&#32;string&#32;DisplayName&#32;=&gt;&#32;$&quot;&quot;{{FirstName}}&#32;{LastName}&quot;&quot;;
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;public&#32;void&#32;SomeMethod(int&#32;arg1,&#32;MyClass&#32;arg2)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(arg1&#32;==&#32;2)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return;
&#32;&#32;&#32;&#32;}
}&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;genericDecorationMapper,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cSharpCompilerService);

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TextEditorService.ModelApi.RegisterCustom(model);

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cSharpCompilerService.RegisterResource(model.ResourceUri,&#32;shouldTriggerResourceWasModified:&#32;true);

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TextEditorService.ViewModelApi.Register(
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ViewModelKey,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResourceUri,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new&#32;Category(&quot;main&quot;));

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base.OnInitialized();
&#32;&#32;&#32;&#32;}
}
</computeroutput></literallayout></para>

<para><itemizedlist>
<listitem>
<para>Now you should have a Text Editor with the CSharpCompilerService as shown in this GIF:</para>
</listitem></itemizedlist>
</para>

<para></para>
</section>
</section>
<section xml:id="_md__docs_2_text_editor_2usage_1autotoc_md208">
<title>Next tutorial: #TODO: Continue</title></section>
</section>
