<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__scope_tests_8cs_source" xml:lang="en-US">
<title>ScopeTests.cs</title>
<indexterm><primary>Source/Tests/CompilerServices/CSharp/SmokeTests/Parsers/ScopeTests.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__scope_tests_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis>System.Text;
<anchor xml:id="__scope_tests_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models">Luthetus.TextEditor.RazorLib.Lexers.Models</link>;
<anchor xml:id="__scope_tests_8cs_source_1l00003"/>00003 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services">Luthetus.TextEditor.RazorLib.CompilerServices</link>;
<anchor xml:id="__scope_tests_8cs_source_1l00004"/>00004 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces">Luthetus.TextEditor.RazorLib.CompilerServices.Interfaces</link>;
<anchor xml:id="__scope_tests_8cs_source_1l00005"/>00005 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax</link>;
<anchor xml:id="__scope_tests_8cs_source_1l00006"/>00006 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Tokens</link>;
<anchor xml:id="__scope_tests_8cs_source_1l00007"/>00007 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes</link>;
<anchor xml:id="__scope_tests_8cs_source_1l00008"/>00008 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_interfaces">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes.Interfaces</link>;
<anchor xml:id="__scope_tests_8cs_source_1l00009"/>00009 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_enums">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes.Enums</link>;
<anchor xml:id="__scope_tests_8cs_source_1l00010"/>00010 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case">Luthetus.CompilerServices.CSharp.LexerCase</link>;
<anchor xml:id="__scope_tests_8cs_source_1l00011"/>00011 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case">Luthetus.CompilerServices.CSharp.ParserCase</link>;
<anchor xml:id="__scope_tests_8cs_source_1l00012"/>00012 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals">Luthetus.CompilerServices.CSharp.ParserCase.Internals</link>;
<anchor xml:id="__scope_tests_8cs_source_1l00013"/>00013 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_facts">Luthetus.CompilerServices.CSharp.Facts</link>;
<anchor xml:id="__scope_tests_8cs_source_1l00014"/>00014 
<anchor xml:id="__scope_tests_8cs_source_1l00015"/>00015 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers">Luthetus.CompilerServices.CSharp.Tests.SmokeTests.Parsers</link>;
<anchor xml:id="__scope_tests_8cs_source_1l00016"/>00016 
<anchor xml:id="__scope_tests_8cs_source_1l00036"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests">00036</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests">ScopeTests</link>
<anchor xml:id="__scope_tests_8cs_source_1l00037"/>00037 {
<anchor xml:id="__scope_tests_8cs_source_1l00038"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">00038</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a73a9c2f8be8eebb7d8c3356086a7f6dc">Test</link>
<anchor xml:id="__scope_tests_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00040"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a73a9c2f8be8eebb7d8c3356086a7f6dc">00040</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a73a9c2f8be8eebb7d8c3356086a7f6dc">Test</link>(<emphasis role="keywordtype">string</emphasis>&#32;sourceText)
<anchor xml:id="__scope_tests_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1aa7b753860e729416ad50c2d9ec1f97e0">SourceText</link>&#32;=&#32;sourceText;
<anchor xml:id="__scope_tests_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1ab1c960b7de2be104a63d278bd520c3ec">ResourceUri</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;./unitTesting.txt&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a916e30ec093a6bd2a152bb1730b8469a">Lexer</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1ab1c960b7de2be104a63d278bd520c3ec">ResourceUri</link>,&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1aa7b753860e729416ad50c2d9ec1f97e0">SourceText</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a916e30ec093a6bd2a152bb1730b8469a">Lexer</link>.Lex();
<anchor xml:id="__scope_tests_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a121ec1fe8c7656bf7f6f2e62f23be55c">Parser</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_c_sharp_parser">CSharpParser</link>(<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a916e30ec093a6bd2a152bb1730b8469a">Lexer</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a32030df395d09283d80e4f4ac326ff14">CompilationUnit</link>&#32;=&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a121ec1fe8c7656bf7f6f2e62f23be55c">Parser</link>.Parse();
<anchor xml:id="__scope_tests_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00050"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1aa7b753860e729416ad50c2d9ec1f97e0">00050</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1aa7b753860e729416ad50c2d9ec1f97e0">SourceText</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00051"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1ab1c960b7de2be104a63d278bd520c3ec">00051</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1ab1c960b7de2be104a63d278bd520c3ec">ResourceUri</link>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1ab1c960b7de2be104a63d278bd520c3ec">ResourceUri</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00052"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a916e30ec093a6bd2a152bb1730b8469a">00052</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a916e30ec093a6bd2a152bb1730b8469a">Lexer</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00053"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a121ec1fe8c7656bf7f6f2e62f23be55c">00053</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_c_sharp_parser">CSharpParser</link>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a121ec1fe8c7656bf7f6f2e62f23be55c">Parser</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00054"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1ac1e1da5feb0c8c3495cc3781fdd80283">00054</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_binder">IBinder</link>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1ac1e1da5feb0c8c3495cc3781fdd80283">Binder</link>&#32;=&gt;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a32030df395d09283d80e4f4ac326ff14">CompilationUnit</link>.Binder;
<anchor xml:id="__scope_tests_8cs_source_1l00055"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a32030df395d09283d80e4f4ac326ff14">00055</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a32030df395d09283d80e4f4ac326ff14">CompilationUnit</link>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test_1a32030df395d09283d80e4f4ac326ff14">CompilationUnit</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00059"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a687a86a64cbe3dd73a50eddfe0e967a4">00059</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a687a86a64cbe3dd73a50eddfe0e967a4">GlobalScope</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;scope&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.GetScopeByPositionIndex(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;0);
<anchor xml:id="__scope_tests_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(scope);
<anchor xml:id="__scope_tests_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList.Single();
<anchor xml:id="__scope_tests_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00081"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a466295910f601203b5c493c731347017">00081</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a466295910f601203b5c493c731347017">GlobalScope_ArbitraryScope</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;{}&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Arbitrary&#32;scope</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;arbitraryScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;arbitraryScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;arbitraryScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;arbitraryScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;arbitraryScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ArbitraryCodeBlockNode,&#32;arbitraryScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00109"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1af694a140fcb6ba69ab90c55a2999f0c8">00109</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1af694a140fcb6ba69ab90c55a2999f0c8">GlobalScope_ArbitraryScope_ArbitraryScope</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;{}&#32;{}&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(3,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Arbitrary&#32;scope&#32;1</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;arbitraryScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;arbitraryScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;arbitraryScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;arbitraryScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;arbitraryScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ArbitraryCodeBlockNode,&#32;arbitraryScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Arbitrary&#32;scope&#32;2</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;arbitraryScope&#32;=&#32;binderSession.ScopeList[2];
<anchor xml:id="__scope_tests_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;arbitraryScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;arbitraryScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(3,&#32;arbitraryScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(5,&#32;arbitraryScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ArbitraryCodeBlockNode,&#32;arbitraryScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00146"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a96a61b1549fd4810da146b82dec7fc47">00146</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a96a61b1549fd4810da146b82dec7fc47">GlobalScope_ArbitraryScope_Depth_ArbitraryScope_ArbitraryScope</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;{&#32;{}&#32;{}&#32;}&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(4,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_scope">IScope</link>&#32;arbitraryScope;
<anchor xml:id="__scope_tests_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Arbitrary&#32;scope</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arbitraryScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;arbitraryScope.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_scope_1a61522fba59477beb1f3cafe27c43cb9c">IndexKey</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;arbitraryScope.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_scope_1abfaa5ee6ee4ef26f6072fc309d244d71">ParentIndexKey</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;arbitraryScope.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_scope_1a7e7db70d787bcdb4c9ffd3d5f11f9ca4">StartingIndexInclusive</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(9,&#32;arbitraryScope.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_scope_1a3aafa57351a91d8b8be8f76045501186">EndingIndexExclusive</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ArbitraryCodeBlockNode,&#32;arbitraryScope.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_scope_1ac864a69c5039a944689ef6e02d803e3a">CodeBlockOwner</link>.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_1a29fb0ee8667648a748dfdca9d4e71a26">SyntaxKind</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Arbitrary&#32;scope&#32;1</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arbitraryScope&#32;=&#32;binderSession.ScopeList[2];
<anchor xml:id="__scope_tests_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;arbitraryScope.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_scope_1a61522fba59477beb1f3cafe27c43cb9c">IndexKey</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;arbitraryScope.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_scope_1abfaa5ee6ee4ef26f6072fc309d244d71">ParentIndexKey</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;arbitraryScope.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_scope_1a7e7db70d787bcdb4c9ffd3d5f11f9ca4">StartingIndexInclusive</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(4,&#32;arbitraryScope.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_scope_1a3aafa57351a91d8b8be8f76045501186">EndingIndexExclusive</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ArbitraryCodeBlockNode,&#32;arbitraryScope.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_scope_1ac864a69c5039a944689ef6e02d803e3a">CodeBlockOwner</link>.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_1a29fb0ee8667648a748dfdca9d4e71a26">SyntaxKind</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Arbitrary&#32;scope&#32;2</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arbitraryScope&#32;=&#32;binderSession.ScopeList[3];
<anchor xml:id="__scope_tests_8cs_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(3,&#32;arbitraryScope.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_scope_1a61522fba59477beb1f3cafe27c43cb9c">IndexKey</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;arbitraryScope.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_scope_1abfaa5ee6ee4ef26f6072fc309d244d71">ParentIndexKey</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(5,&#32;arbitraryScope.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_scope_1a7e7db70d787bcdb4c9ffd3d5f11f9ca4">StartingIndexInclusive</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(7,&#32;arbitraryScope.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_scope_1a3aafa57351a91d8b8be8f76045501186">EndingIndexExclusive</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ArbitraryCodeBlockNode,&#32;arbitraryScope.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces_1_1_i_scope_1ac864a69c5039a944689ef6e02d803e3a">CodeBlockOwner</link>.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_1a29fb0ee8667648a748dfdca9d4e71a26">SyntaxKind</link>);
<anchor xml:id="__scope_tests_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00194"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1ac5c61971cbd92b68eb9783cde42d3b9e">00194</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1ac5c61971cbd92b68eb9783cde42d3b9e">GlobalScope_TypeDefinitionNode</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;class&#32;Person&#32;{&#32;}&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Type&#32;definition</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeDefinitionScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;typeDefinitionScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;typeDefinitionScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(20,&#32;typeDefinitionScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(23,&#32;typeDefinitionScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TypeDefinitionNode,&#32;typeDefinitionScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00219"/>00219 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00221"/>00221 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00222"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1ac6ce8aed55398d7cb2fd96040cd54c66">00222</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1ac6ce8aed55398d7cb2fd96040cd54c66">GlobalScope_TypeDefinitionNode_Depth_ConstructorDefinitionNode</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;class&#32;Person&#32;{&#32;public&#32;Person()&#32;{&#32;}&#32;}&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(3,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Type&#32;definition</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeDefinitionScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;typeDefinitionScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;typeDefinitionScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(20,&#32;typeDefinitionScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(43,&#32;typeDefinitionScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TypeDefinitionNode,&#32;typeDefinitionScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Constructor&#32;definition</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorDefinitionScope&#32;=&#32;binderSession.ScopeList[2];
<anchor xml:id="__scope_tests_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;constructorDefinitionScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;constructorDefinitionScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(38,&#32;constructorDefinitionScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(41,&#32;constructorDefinitionScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ConstructorDefinitionNode,&#32;constructorDefinitionScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00256"/>00256 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00257"/>00257 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00258"/>00258 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00259"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a6ddd3b3fb85e0c6074550cee6557501b">00259</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a6ddd3b3fb85e0c6074550cee6557501b">GlobalScope_TypeDefinitionNode_Depth_ConstructorDefinitionNode_PropertyInitialized</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00260"/>00260 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Erroneous&#32;behavior:</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;===================</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Property&#32;definitions&#32;being&#32;initialized&#32;can&#32;break&#32;the&#32;scope&#32;of&#32;constructors&#32;that&#32;appear&#32;in&#32;source&#32;code&#32;text-wise&#32;above&#32;them.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;not&#32;happening&#32;if&#32;the&#32;property&#32;definition&#32;with&#32;initialization&#32;is&#32;moved&#32;above&#32;the&#32;constructor,&#32;only&#32;if&#32;it&#32;is&#32;below.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;this&#32;behavior&#32;occurs,&#32;instead&#32;of&#32;a&#32;scope&#32;being&#32;defined&#32;at&#32;the&#32;constructor&apos;s&#32;OpenBraceToken</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;its&#32;CloseBraceToken.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;|</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;will&#32;instead&#32;create&#32;a&#32;scope&#32;at&#32;the&#32;semicolon&#32;of&#32;the&#32;property&#32;definition&#32;with&#32;initialization.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;constructor&#32;having&#32;or&#32;not&#32;having&#32;arguments&#32;has&#32;no&#32;impact&#32;on&#32;the&#32;behavior.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00273"/>00273 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(
<anchor xml:id="__scope_tests_8cs_source_1l00275"/>00275 <emphasis role="stringliteral">@&quot;public&#32;class&#32;Person</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00276"/>00276 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00277"/>00277 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;public&#32;Person(string&#32;firstName)</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00278"/>00278 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00279"/>00279 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FirstName&#32;=&#32;firstName;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00280"/>00280 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00281"/>00281 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00282"/>00282 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;public&#32;string&#32;FirstName&#32;{&#32;get;&#32;set;&#32;}&#32;=&#32;&quot;&quot;abc&quot;&quot;;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00283"/>00283 <emphasis role="stringliteral">}&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__scope_tests_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00287"/>00287 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00288"/>00288 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00289"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a3e798aa117efc42be33b1914aae2a2cf">00289</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a3e798aa117efc42be33b1914aae2a2cf">GlobalScope_TypeDefinitionNode_Depth_PropertyDefinitionNode</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;class&#32;Person&#32;{&#32;public&#32;string&#32;FirstName&#32;{&#32;get;&#32;set;&#32;}&#32;}&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Type&#32;definition</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeDefinitionScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;typeDefinitionScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;typeDefinitionScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(20,&#32;typeDefinitionScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(61,&#32;typeDefinitionScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TypeDefinitionNode,&#32;typeDefinitionScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00314"/>00314 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00315"/>00315 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00316"/>00316 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00317"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a35be4a91dfc1cbc943763d926e7f1ed6">00317</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a35be4a91dfc1cbc943763d926e7f1ed6">GlobalScope_TypeDefinitionNode_Depth_PropertyDefinitionNodeWithAttribute</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00318"/>00318 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_1:&#32;position_0</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_2:&#32;position_20</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_3:&#32;position_22</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_4:&#32;position_51</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_5:&#32;position_90</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(
<anchor xml:id="__scope_tests_8cs_source_1l00325"/>00325 <emphasis role="stringliteral">@&quot;public&#32;class&#32;Person</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00326"/>00326 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00327"/>00327 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;[Parameter,&#32;EditorRequired]</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00328"/>00328 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;public&#32;string&#32;FirstName&#32;{&#32;get;&#32;set;&#32;}</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00329"/>00329 <emphasis role="stringliteral">}&quot;</emphasis>.ReplaceLineEndings(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>));
<anchor xml:id="__scope_tests_8cs_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Type&#32;definition</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeDefinitionScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;typeDefinitionScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;typeDefinitionScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(20,&#32;typeDefinitionScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(91,&#32;typeDefinitionScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TypeDefinitionNode,&#32;typeDefinitionScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00351"/>00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00352"/>00352 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00353"/>00353 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00365"/>00365 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00366"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a66a2ec96bda4810b0c59a628f67a07a8">00366</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a66a2ec96bda4810b0c59a628f67a07a8">GlobalScope_TypeDefinitionNode_Depth_PropertyDefinitionNodeWithAttributeThatInvokesConstructor</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00367"/>00367 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_1:&#32;position_0</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_2:&#32;position_20</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_3:&#32;position_22</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_4:&#32;position_68</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_5:&#32;position_107</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(
<anchor xml:id="__scope_tests_8cs_source_1l00374"/>00374 <emphasis role="stringliteral">@&quot;public&#32;class&#32;Person</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00375"/>00375 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00376"/>00376 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;[Parameter(Name=&quot;&quot;Aaa&quot;&quot;),&#32;EditorRequired(3)]</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00377"/>00377 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;public&#32;string&#32;FirstName&#32;{&#32;get;&#32;set;&#32;}</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00378"/>00378 <emphasis role="stringliteral">}&quot;</emphasis>.ReplaceLineEndings(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>));
<anchor xml:id="__scope_tests_8cs_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00391"/>00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Type&#32;definition</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeDefinitionScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;typeDefinitionScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;typeDefinitionScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(20,&#32;typeDefinitionScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(108,&#32;typeDefinitionScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TypeDefinitionNode,&#32;typeDefinitionScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00399"/>00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00401"/>00401 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00402"/>00402 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00403"/>00403 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00404"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1ae7cff070d7d2f2b4fdd1a9d0f56245c9">00404</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1ae7cff070d7d2f2b4fdd1a9d0f56245c9">GlobalScope_TypeDefinitionNode_Depth_PropertyDefinitionNodeGetterAndSetterCodeBlock</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00405"/>00405 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_~1:&#32;position_0</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_~2:&#32;position_20</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_~3:&#32;position_22</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_~4:&#32;position_47</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_~5:&#32;position_50</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_~6:&#32;position_56</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_~7:&#32;position_60</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_~8:&#32;position_82</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_~9:&#32;position_86</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00415"/>00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_10:&#32;position_92</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00416"/>00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_11:&#32;position_96</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_12:&#32;position_119</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_13:&#32;position_123</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line_14:&#32;position_126</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00420"/>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(
<anchor xml:id="__scope_tests_8cs_source_1l00421"/>00421 <emphasis role="stringliteral">@&quot;public&#32;class&#32;Person</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00422"/>00422 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00423"/>00423 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;public&#32;string&#32;FirstName</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00424"/>00424 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00425"/>00425 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00426"/>00426 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00427"/>00427 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;_firstName;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00428"/>00428 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00429"/>00429 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00430"/>00430 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00431"/>00431 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_firstName&#32;=&#32;value;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00432"/>00432 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00433"/>00433 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00434"/>00434 <emphasis role="stringliteral">}&quot;</emphasis>.ReplaceLineEndings(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>));
<anchor xml:id="__scope_tests_8cs_source_1l00435"/>00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00438"/>00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00439"/>00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00440"/>00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00441"/>00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00442"/>00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00443"/>00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00444"/>00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00446"/>00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Type&#32;definition</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeDefinitionScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00450"/>00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;typeDefinitionScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;typeDefinitionScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00452"/>00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(20,&#32;typeDefinitionScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(127,&#32;typeDefinitionScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00454"/>00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TypeDefinitionNode,&#32;typeDefinitionScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00457"/>00457 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00458"/>00458 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00459"/>00459 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00460"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1aa2c80c44768c56de73cf13b18915a6eb">00460</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1aa2c80c44768c56de73cf13b18915a6eb">GlobalScope_TypeDefinitionNode_Depth_FunctionDefinitionNode</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00461"/>00461 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00462"/>00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;class&#32;Person&#32;{&#32;public&#32;void&#32;MyMethod()&#32;{&#32;}&#32;}&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00464"/>00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00465"/>00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00466"/>00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(3,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00467"/>00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00468"/>00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00469"/>00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00470"/>00470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00471"/>00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00472"/>00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00473"/>00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00474"/>00474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00475"/>00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00476"/>00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Type&#32;definition</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00477"/>00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeDefinitionScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00478"/>00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;typeDefinitionScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00479"/>00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;typeDefinitionScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00480"/>00480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(20,&#32;typeDefinitionScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00481"/>00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(50,&#32;typeDefinitionScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00482"/>00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TypeDefinitionNode,&#32;typeDefinitionScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00483"/>00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00484"/>00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Function&#32;definition</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00485"/>00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionDefinitionScope&#32;=&#32;binderSession.ScopeList[2];
<anchor xml:id="__scope_tests_8cs_source_1l00486"/>00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;functionDefinitionScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00487"/>00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;functionDefinitionScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00488"/>00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(45,&#32;functionDefinitionScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(48,&#32;functionDefinitionScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00490"/>00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.FunctionDefinitionNode,&#32;functionDefinitionScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00491"/>00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00492"/>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00494"/>00494 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00495"/>00495 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00496"/>00496 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00497"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1ae528a580922456e543662e242a83f7be">00497</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1ae528a580922456e543662e242a83f7be">GlobalScope_TypeDefinitionNode_Depth_ArbitraryCodeBlock</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00498"/>00498 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;class&#32;Person&#32;{&#32;{&#32;}&#32;}&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00502"/>00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00503"/>00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(3,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00504"/>00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00506"/>00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00508"/>00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00510"/>00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00512"/>00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Type&#32;definition</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00514"/>00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeDefinitionScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00515"/>00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;typeDefinitionScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00516"/>00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;typeDefinitionScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00517"/>00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(20,&#32;typeDefinitionScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00518"/>00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(27,&#32;typeDefinitionScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TypeDefinitionNode,&#32;typeDefinitionScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00521"/>00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Arbitrary&#32;scope</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00522"/>00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;arbitraryScope&#32;=&#32;binderSession.ScopeList[2];
<anchor xml:id="__scope_tests_8cs_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;arbitraryScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;arbitraryScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(22,&#32;arbitraryScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00526"/>00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(25,&#32;arbitraryScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00527"/>00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ArbitraryCodeBlockNode,&#32;arbitraryScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00528"/>00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00530"/>00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00531"/>00531 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00532"/>00532 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00533"/>00533 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00534"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a766db9647999b4d247bedc2153bd9ca8">00534</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a766db9647999b4d247bedc2153bd9ca8">GlobalScope_FunctionDefinitionNode</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00535"/>00535 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00536"/>00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;void&#32;MyMethod()&#32;{&#32;}&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l00537"/>00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00538"/>00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00539"/>00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00540"/>00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00541"/>00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00542"/>00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00543"/>00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00544"/>00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00545"/>00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00546"/>00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00547"/>00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00548"/>00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00549"/>00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Function&#32;definition</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00551"/>00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionDefinitionScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00552"/>00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;functionDefinitionScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00553"/>00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;functionDefinitionScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(23,&#32;functionDefinitionScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00555"/>00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(26,&#32;functionDefinitionScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00556"/>00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.FunctionDefinitionNode,&#32;functionDefinitionScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00557"/>00557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00558"/>00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00559"/>00559 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00560"/>00560 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00571"/>00571 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00572"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a29c3e40ecbf15f2ccba770e650969de3">00572</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a29c3e40ecbf15f2ccba770e650969de3">GlobalScope_ConstructorDefinitionNode</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00573"/>00573 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00574"/>00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;Person()&#32;{&#32;}&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l00575"/>00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00576"/>00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00577"/>00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00578"/>00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00579"/>00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00580"/>00580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00581"/>00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00582"/>00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00583"/>00583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00584"/>00584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00585"/>00585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00586"/>00586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00587"/>00587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00588"/>00588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Function&#32;definition</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00589"/>00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionDefinitionScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00590"/>00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;functionDefinitionScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00591"/>00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;functionDefinitionScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00592"/>00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(16,&#32;functionDefinitionScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00593"/>00593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(19,&#32;functionDefinitionScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00594"/>00594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.FunctionDefinitionNode,&#32;functionDefinitionScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00595"/>00595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00596"/>00596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00597"/>00597 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00598"/>00598 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00599"/>00599 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00600"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a772c549fef5b94a8f5c5c2b1ce3ac429">00600</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a772c549fef5b94a8f5c5c2b1ce3ac429">GlobalScope_FunctionDefinitionNode_Depth_ArbitraryCodeBlock</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00601"/>00601 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00602"/>00602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;void&#32;MyMethod()&#32;{&#32;{&#32;}&#32;}&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l00603"/>00603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00604"/>00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00605"/>00605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00606"/>00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(3,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00607"/>00607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00608"/>00608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00609"/>00609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00610"/>00610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00611"/>00611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00612"/>00612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00613"/>00613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00614"/>00614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00615"/>00615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00616"/>00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Function&#32;definition</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00617"/>00617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionDefinitionScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00618"/>00618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;functionDefinitionScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00619"/>00619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;functionDefinitionScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00620"/>00620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(23,&#32;functionDefinitionScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00621"/>00621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(30,&#32;functionDefinitionScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00622"/>00622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.FunctionDefinitionNode,&#32;functionDefinitionScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00623"/>00623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00624"/>00624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Arbitrary&#32;scope</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00625"/>00625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;arbitraryScope&#32;=&#32;binderSession.ScopeList[2];
<anchor xml:id="__scope_tests_8cs_source_1l00626"/>00626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;arbitraryScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00627"/>00627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;arbitraryScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00628"/>00628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(25,&#32;arbitraryScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00629"/>00629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(28,&#32;arbitraryScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00630"/>00630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ArbitraryCodeBlockNode,&#32;arbitraryScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00631"/>00631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00632"/>00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00633"/>00633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00634"/>00634 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00635"/>00635 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00636"/>00636 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00637"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a49adb9da1ed50a43162e983e3faefe47">00637</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a49adb9da1ed50a43162e983e3faefe47">GlobalScope_PropertyDefinitionNode_ArbitraryScope</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00638"/>00638 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00639"/>00639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;property&#32;definition&#32;node&#32;isn&apos;t&#32;creating&#32;scope.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00640"/>00640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;So,&#32;the&#32;final&#32;&apos;ArbitraryCodeBlockNode&apos;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00641"/>00641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;there&#32;to&#32;check&#32;that&#32;the&#32;scope&#32;logic&#32;did&#32;not&#32;break&#32;due&#32;to&#32;the</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00642"/>00642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;OpenBraceToken&#32;and&#32;CloseBraceToken&#32;being&#32;used&#32;as&#32;part&#32;of&#32;the&#32;property&#32;definition&#32;node&#32;syntax.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00643"/>00643 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00644"/>00644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;string&#32;FirstName&#32;{&#32;get;&#32;set;&#32;}&#32;{}&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l00645"/>00645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00646"/>00646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00647"/>00647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00648"/>00648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00649"/>00649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00650"/>00650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;scope&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.GetScopeByPositionIndex(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;0);
<anchor xml:id="__scope_tests_8cs_source_1l00651"/>00651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(scope);
<anchor xml:id="__scope_tests_8cs_source_1l00652"/>00652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00653"/>00653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00654"/>00654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00655"/>00655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00656"/>00656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00657"/>00657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00658"/>00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00659"/>00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00660"/>00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00661"/>00661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Arbitrary&#32;scope</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00662"/>00662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;arbitraryScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00663"/>00663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;arbitraryScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00664"/>00664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;arbitraryScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00665"/>00665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(38,&#32;arbitraryScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00666"/>00666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(40,&#32;arbitraryScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00667"/>00667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ArbitraryCodeBlockNode,&#32;arbitraryScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00668"/>00668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00669"/>00669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00670"/>00670 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00671"/>00671 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00672"/>00672 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00673"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a7632145ea95518f01720ee91db798832">00673</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a7632145ea95518f01720ee91db798832">GlobalScope_PropertyDefinitionNodeGetterAndSetterCodeBlock_ArbitraryScope</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00674"/>00674 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00675"/>00675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;property&#32;definition&#32;node&#32;isn&apos;t&#32;creating&#32;scope.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00676"/>00676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;So,&#32;the&#32;final&#32;&apos;ArbitraryCodeBlockNode&apos;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00677"/>00677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;there&#32;to&#32;check&#32;that&#32;the&#32;scope&#32;logic&#32;did&#32;not&#32;break&#32;due&#32;to&#32;the</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00678"/>00678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;OpenBraceToken&#32;and&#32;CloseBraceToken&#32;being&#32;used&#32;as&#32;part&#32;of&#32;the&#32;property&#32;definition&#32;node&#32;syntax.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00679"/>00679 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00680"/>00680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(
<anchor xml:id="__scope_tests_8cs_source_1l00681"/>00681 <emphasis role="stringliteral">@&quot;public&#32;string&#32;FirstName</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00682"/>00682 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00683"/>00683 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;get</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00684"/>00684 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00685"/>00685 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;_firstName;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00686"/>00686 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00687"/>00687 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;set</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00688"/>00688 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00689"/>00689 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_firstName&#32;=&#32;value;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00690"/>00690 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00691"/>00691 <emphasis role="stringliteral">}</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00692"/>00692 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00693"/>00693 <emphasis role="stringliteral">{}&quot;</emphasis>.ReplaceLineEndings(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>));
<anchor xml:id="__scope_tests_8cs_source_1l00694"/>00694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00695"/>00695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00696"/>00696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00697"/>00697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00698"/>00698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00699"/>00699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;scope&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.GetScopeByPositionIndex(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;0);
<anchor xml:id="__scope_tests_8cs_source_1l00700"/>00700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(scope);
<anchor xml:id="__scope_tests_8cs_source_1l00701"/>00701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00702"/>00702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00703"/>00703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00704"/>00704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00705"/>00705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00706"/>00706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00707"/>00707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00708"/>00708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00709"/>00709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00710"/>00710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Arbitrary&#32;scope</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00711"/>00711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;arbitraryScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00712"/>00712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;arbitraryScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00713"/>00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;arbitraryScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00714"/>00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(94,&#32;arbitraryScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00715"/>00715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(96,&#32;arbitraryScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00716"/>00716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ArbitraryCodeBlockNode,&#32;arbitraryScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00717"/>00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00718"/>00718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00719"/>00719 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00720"/>00720 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00721"/>00721 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00722"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a4dcfece34b6cb6a05f5e51fbfdc48ca1">00722</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a4dcfece34b6cb6a05f5e51fbfdc48ca1">GlobalScope_RecordWith_ArbitraryScope</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00723"/>00723 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00724"/>00724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;record&#32;&apos;with&apos;&#32;keyword&#32;isn&apos;t&#32;creating&#32;scope.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00725"/>00725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;So,&#32;the&#32;final&#32;&apos;ArbitraryCodeBlockNode&apos;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00726"/>00726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;there&#32;to&#32;check&#32;that&#32;the&#32;scope&#32;logic&#32;did&#32;not&#32;break&#32;due&#32;to&#32;the</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00727"/>00727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;OpenBraceToken&#32;and&#32;CloseBraceToken&#32;being&#32;used&#32;as&#32;part&#32;of&#32;the&#32;record&#32;&apos;with&apos;&#32;keyword&#32;syntax.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00728"/>00728 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00729"/>00729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(
<anchor xml:id="__scope_tests_8cs_source_1l00730"/>00730 <emphasis role="stringliteral">@&quot;var&#32;x&#32;=&#32;new&#32;PersonRecord();</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00731"/>00731 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00732"/>00732 <emphasis role="stringliteral">x&#32;=&#32;x&#32;with</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00733"/>00733 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00734"/>00734 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;FirstName&#32;=&#32;&quot;&quot;John&quot;&quot;,</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00735"/>00735 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;LastName&#32;=&#32;&quot;&quot;Doe&quot;&quot;,</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00736"/>00736 <emphasis role="stringliteral">};</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00737"/>00737 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00738"/>00738 <emphasis role="stringliteral">{}&quot;</emphasis>.ReplaceLineEndings(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>));
<anchor xml:id="__scope_tests_8cs_source_1l00739"/>00739 
<anchor xml:id="__scope_tests_8cs_source_1l00740"/>00740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00741"/>00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00742"/>00742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00743"/>00743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00744"/>00744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;scope&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.GetScopeByPositionIndex(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;0);
<anchor xml:id="__scope_tests_8cs_source_1l00745"/>00745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(scope);
<anchor xml:id="__scope_tests_8cs_source_1l00746"/>00746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00747"/>00747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00748"/>00748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00749"/>00749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00750"/>00750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00751"/>00751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00752"/>00752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00753"/>00753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00754"/>00754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00755"/>00755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Arbitrary&#32;scope</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00756"/>00756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;arbitraryScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00757"/>00757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;arbitraryScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00758"/>00758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;arbitraryScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00759"/>00759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(89,&#32;arbitraryScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00760"/>00760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(91,&#32;arbitraryScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00761"/>00761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ArbitraryCodeBlockNode,&#32;arbitraryScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00762"/>00762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00763"/>00763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00764"/>00764 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00765"/>00765 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00766"/>00766 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00767"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a935e380af402685dd7767fffa5bc5e9b">00767</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a935e380af402685dd7767fffa5bc5e9b">GlobalScope_ObjectInitialization_ArbitraryScope</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00768"/>00768 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00769"/>00769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;object&#32;initialization&#32;syntax&#32;isn&apos;t&#32;creating&#32;scope.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00770"/>00770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;So,&#32;the&#32;final&#32;&apos;ArbitraryCodeBlockNode&apos;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00771"/>00771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;there&#32;to&#32;check&#32;that&#32;the&#32;scope&#32;logic&#32;did&#32;not&#32;break&#32;due&#32;to&#32;the</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00772"/>00772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;OpenBraceToken&#32;and&#32;CloseBraceToken&#32;being&#32;used&#32;as&#32;part&#32;of&#32;the&#32;object&#32;initialization&#32;syntax.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00773"/>00773 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00774"/>00774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(
<anchor xml:id="__scope_tests_8cs_source_1l00775"/>00775 <emphasis role="stringliteral">@&quot;var&#32;x&#32;=&#32;new&#32;PersonRecord</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00776"/>00776 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00777"/>00777 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;FirstName&#32;=&#32;&quot;&quot;John&quot;&quot;,</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00778"/>00778 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;LastName&#32;=&#32;&quot;&quot;Doe&quot;&quot;,</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00779"/>00779 <emphasis role="stringliteral">};</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00780"/>00780 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00781"/>00781 <emphasis role="stringliteral">{}&quot;</emphasis>.ReplaceLineEndings(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>));
<anchor xml:id="__scope_tests_8cs_source_1l00782"/>00782 
<anchor xml:id="__scope_tests_8cs_source_1l00783"/>00783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00784"/>00784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00785"/>00785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00786"/>00786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00787"/>00787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;scope&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.GetScopeByPositionIndex(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;0);
<anchor xml:id="__scope_tests_8cs_source_1l00788"/>00788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(scope);
<anchor xml:id="__scope_tests_8cs_source_1l00789"/>00789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00790"/>00790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00791"/>00791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00792"/>00792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00793"/>00793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00794"/>00794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00795"/>00795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00796"/>00796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00797"/>00797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00798"/>00798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Arbitrary&#32;scope</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00799"/>00799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;arbitraryScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00800"/>00800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;arbitraryScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00801"/>00801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;arbitraryScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00802"/>00802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(75,&#32;arbitraryScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00803"/>00803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(77,&#32;arbitraryScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00804"/>00804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ArbitraryCodeBlockNode,&#32;arbitraryScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00805"/>00805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00806"/>00806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00807"/>00807 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00808"/>00808 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00809"/>00809 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00810"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a7f7efcb056adab84986ea280708d60e2">00810</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a7f7efcb056adab84986ea280708d60e2">GlobalScope_CollectionInitialization_ArbitraryScope</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00811"/>00811 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00812"/>00812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;collection&#32;initialization&#32;syntax&#32;isn&apos;t&#32;creating&#32;scope.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00813"/>00813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;So,&#32;the&#32;final&#32;&apos;ArbitraryCodeBlockNode&apos;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00814"/>00814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;there&#32;to&#32;check&#32;that&#32;the&#32;scope&#32;logic&#32;did&#32;not&#32;break&#32;due&#32;to&#32;the</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00815"/>00815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;OpenBraceToken&#32;and&#32;CloseBraceToken&#32;being&#32;used&#32;as&#32;part&#32;of&#32;the&#32;collection&#32;initialization&#32;syntax.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00816"/>00816 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00817"/>00817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(
<anchor xml:id="__scope_tests_8cs_source_1l00818"/>00818 <emphasis role="stringliteral">@&quot;var&#32;x&#32;=&#32;new&#32;List&lt;int&gt;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00819"/>00819 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00820"/>00820 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;1,</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00821"/>00821 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;2,</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00822"/>00822 <emphasis role="stringliteral">};</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00823"/>00823 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00824"/>00824 <emphasis role="stringliteral">{}&quot;</emphasis>.ReplaceLineEndings(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>));
<anchor xml:id="__scope_tests_8cs_source_1l00825"/>00825 
<anchor xml:id="__scope_tests_8cs_source_1l00826"/>00826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00827"/>00827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00828"/>00828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00829"/>00829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00830"/>00830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;scope&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.GetScopeByPositionIndex(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;0);
<anchor xml:id="__scope_tests_8cs_source_1l00831"/>00831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(scope);
<anchor xml:id="__scope_tests_8cs_source_1l00832"/>00832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00833"/>00833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00834"/>00834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00835"/>00835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00836"/>00836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00837"/>00837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00838"/>00838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00839"/>00839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00840"/>00840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00841"/>00841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Arbitrary&#32;scope</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00842"/>00842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;arbitraryScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00843"/>00843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;arbitraryScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00844"/>00844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;arbitraryScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00845"/>00845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(36,&#32;arbitraryScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00846"/>00846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(38,&#32;arbitraryScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00847"/>00847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ArbitraryCodeBlockNode,&#32;arbitraryScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00848"/>00848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00849"/>00849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00850"/>00850 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00851"/>00851 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00852"/>00852 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00853"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1ab9119e6776a16693fca0eb8ba5c9cbde">00853</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1ab9119e6776a16693fca0eb8ba5c9cbde">GlobalScope_CollectionInitializationFromArray_ArbitraryScope</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00854"/>00854 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00855"/>00855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;collection&#32;initialization&#32;syntax&#32;isn&apos;t&#32;creating&#32;scope.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00856"/>00856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;So,&#32;the&#32;final&#32;&apos;ArbitraryCodeBlockNode&apos;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00857"/>00857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;there&#32;to&#32;check&#32;that&#32;the&#32;scope&#32;logic&#32;did&#32;not&#32;break&#32;due&#32;to&#32;the</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00858"/>00858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;OpenBraceToken&#32;and&#32;CloseBraceToken&#32;being&#32;used&#32;as&#32;part&#32;of&#32;the&#32;collection&#32;initialization&#32;syntax.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00859"/>00859 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00860"/>00860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(
<anchor xml:id="__scope_tests_8cs_source_1l00861"/>00861 <emphasis role="stringliteral">@&quot;var&#32;x&#32;=&#32;new&#32;int[]</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00862"/>00862 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00863"/>00863 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;1,</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00864"/>00864 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;2,</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00865"/>00865 <emphasis role="stringliteral">};</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00866"/>00866 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00867"/>00867 <emphasis role="stringliteral">{}&quot;</emphasis>.ReplaceLineEndings(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>));
<anchor xml:id="__scope_tests_8cs_source_1l00868"/>00868 
<anchor xml:id="__scope_tests_8cs_source_1l00869"/>00869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00870"/>00870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00871"/>00871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00872"/>00872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00873"/>00873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;scope&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.GetScopeByPositionIndex(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;0);
<anchor xml:id="__scope_tests_8cs_source_1l00874"/>00874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(scope);
<anchor xml:id="__scope_tests_8cs_source_1l00875"/>00875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00876"/>00876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00877"/>00877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00878"/>00878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00879"/>00879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00880"/>00880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00881"/>00881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00882"/>00882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00883"/>00883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00884"/>00884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Arbitrary&#32;scope</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00885"/>00885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;arbitraryScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00886"/>00886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;arbitraryScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00887"/>00887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;arbitraryScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00888"/>00888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(32,&#32;arbitraryScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00889"/>00889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(34,&#32;arbitraryScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00890"/>00890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ArbitraryCodeBlockNode,&#32;arbitraryScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00891"/>00891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00892"/>00892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00893"/>00893 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00894"/>00894 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00895"/>00895 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00896"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1adfb38f2e4fcd218fe85c04b9c5501256">00896</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1adfb38f2e4fcd218fe85c04b9c5501256">Find_VariableDeclaration_ThatWasDeclaredInParentScope</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00897"/>00897 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00898"/>00898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Erroneous&#32;behavior:</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00899"/>00899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;===================</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00900"/>00900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00901"/>00901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;variable&#32;declared&#32;in&#32;a&#32;parent&#32;scope,</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00902"/>00902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;will&#32;not&#32;be&#32;found&#32;as&#32;a&#32;variable&#32;reference&#32;if&#32;it&#32;is&#32;referenced&#32;from&#32;a&#32;child&#32;scope.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00903"/>00903 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00904"/>00904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(
<anchor xml:id="__scope_tests_8cs_source_1l00905"/>00905 <emphasis role="stringliteral">@&quot;var&#32;ccc&#32;=&#32;2;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00906"/>00906 <emphasis role="stringliteral">ccc;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00907"/>00907 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00908"/>00908 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;ccc;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00909"/>00909 <emphasis role="stringliteral">}&quot;</emphasis>.ReplaceLineEndings(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>));
<anchor xml:id="__scope_tests_8cs_source_1l00910"/>00910 
<anchor xml:id="__scope_tests_8cs_source_1l00911"/>00911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00912"/>00912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00913"/>00913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00914"/>00914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00915"/>00915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;scope&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.GetScopeByPositionIndex(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;0);
<anchor xml:id="__scope_tests_8cs_source_1l00916"/>00916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(scope);
<anchor xml:id="__scope_tests_8cs_source_1l00917"/>00917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00918"/>00918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00919"/>00919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00920"/>00920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00921"/>00921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00922"/>00922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00923"/>00923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00924"/>00924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l00925"/>00925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00926"/>00926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Arbitrary&#32;scope</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00927"/>00927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;arbitraryScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l00928"/>00928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;arbitraryScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00929"/>00929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;arbitraryScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00930"/>00930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(18,&#32;arbitraryScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00931"/>00931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(27,&#32;arbitraryScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00932"/>00932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ArbitraryCodeBlockNode,&#32;arbitraryScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00933"/>00933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00934"/>00934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;arbitraryScope.CodeBlockOwner.GetChildList().Length);
<anchor xml:id="__scope_tests_8cs_source_1l00935"/>00935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.OpenBraceToken,&#32;arbitraryScope.CodeBlockOwner.GetChildList()[0].SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00936"/>00936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.VariableReferenceNode,&#32;arbitraryScope.CodeBlockOwner.CodeBlockNode.GetChildList().Single().SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l00937"/>00937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00938"/>00938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00939"/>00939 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l00940"/>00940 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00941"/>00941 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l00942"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1ae379dba0b6875788f6365fb630029247">00942</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1ae379dba0b6875788f6365fb630029247">Keyword_CreatesScopeWithOpenAndCloseBraceToken_ButGetsSingleStatementBody</link>()
<anchor xml:id="__scope_tests_8cs_source_1l00943"/>00943 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l00944"/>00944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Erroneous&#32;behavior:</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00945"/>00945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;===================</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00946"/>00946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00947"/>00947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;keyword&#32;that&#32;creates&#32;a&#32;code&#32;block</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00948"/>00948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(either&#32;with&#32;OpenBraceToken&#32;and&#32;CloseBraceToken,&#32;or&#32;as&#32;a&#32;&quot;single&#32;statement&#32;body&quot;&#32;deliminated&#32;by&#32;a&#32;semicolon)</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00949"/>00949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;At&#32;times&#32;will&#32;use&#32;the&#32;&apos;OpenBraceToken&#32;and&#32;CloseBraceToken&apos;&#32;syntax,&#32;yet&#32;capture</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00950"/>00950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;next&#32;statement&#32;inside&#32;&apos;OpenBraceToken&#32;and&#32;CloseBraceToken&apos;&#32;deliminated&#32;code&#32;block</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00951"/>00951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;be&#32;&apos;&quot;single&#32;statement&#32;body&quot;&#32;deliminated&#32;by&#32;a&#32;semicolon&apos;&#32;syntax.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00952"/>00952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00953"/>00953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;the&#32;cases&#32;where&#32;this&#32;happens,&#32;&quot;simplifying&quot;&#32;the&#32;keyword&apos;s&#32;syntax&#32;within&#32;the&#32;parentheses&#32;(if&#32;it&#32;has&#32;this&#32;syntax)</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00954"/>00954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;can&#32;sometimes&#32;fix&#32;the&#32;issue.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00955"/>00955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00956"/>00956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;As&#32;well,&#32;it&#32;seems&#32;that&#32;not&#32;all&#32;statements&#32;will&#32;be&#32;taken&#32;erroneously&#32;as&#32;the&#32;&quot;single&#32;statement&#32;body&quot;.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00957"/>00957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;is&#32;believed&#32;that&#32;at&#32;one&#32;point&#32;changing&#32;a&#32;FunctionInvocation&#32;statement&#32;to&#32;a&#32;variable&#32;declaration</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00958"/>00958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;assignment&#32;statement&#32;&quot;fixed&quot;&#32;this&#32;issue,&#32;but&#32;this&#32;cannot&#32;currently&#32;be&#32;replicated&#32;anymore&#32;it&#32;seems.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00959"/>00959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00960"/>00960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;More&#32;Details:</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00961"/>00961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-------------</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00962"/>00962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00963"/>00963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;following&#32;code&#32;correctly&#32;puts&#32;the&#32;scope&#32;at&#32;the&#32;OpenBraceToken&#32;and&#32;CloseBraceToken:</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00964"/>00964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;|</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00965"/>00965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;````if&#32;(false)</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00966"/>00966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;````{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00967"/>00967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;````&#32;_queue.RemoveLast();</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00968"/>00968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;````}</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00969"/>00969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00970"/>00970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;following&#32;code&#32;erroneously&#32;puts&#32;the&#32;scope&#32;at&#32;the&#32;StatementDelimiterToken&#32;that&#32;appears&#32;at&#32;the&#32;end&#32;of&#32;the&#32;3rd&#32;line&#32;of&#32;the&#32;text.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00971"/>00971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;|</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00972"/>00972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;````if&#32;(batchEvent&#32;is&#32;not&#32;null)</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00973"/>00973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;````{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00974"/>00974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;````&#32;_queue.RemoveLast();</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00975"/>00975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;````}</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00976"/>00976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00977"/>00977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;appears&#32;that&#32;the&#32;issue&#32;is&#32;with&#32;parsing&#32;an&#32;expression,&#32;and&#32;erroneously&#32;consuming&#32;an&#32;OpenBraceToken.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00978"/>00978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;console&#32;messages&#32;show&#32;that&#32;a&#32;&apos;BadExpressionNode&#32;+&#32;OpenBraceToken&#32;=&gt;&#32;BadExpressionNode&apos;</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00979"/>00979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;the&#32;&apos;OpenBraceToken&apos;,&#32;this&#32;message&#32;is&#32;saying&#32;that&#32;it&#32;was&#32;consumed.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00980"/>00980 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00981"/>00981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(
<anchor xml:id="__scope_tests_8cs_source_1l00982"/>00982 <emphasis role="stringliteral">@&quot;if&#32;(batchEvent&#32;is&#32;not&#32;null)</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00983"/>00983 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00984"/>00984 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;_queue.RemoveLast();</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00985"/>00985 <emphasis role="stringliteral">}&quot;</emphasis>.ReplaceLineEndings(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>));
<anchor xml:id="__scope_tests_8cs_source_1l00986"/>00986 
<anchor xml:id="__scope_tests_8cs_source_1l00987"/>00987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l00988"/>00988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l00989"/>00989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l00990"/>00990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00991"/>00991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;scope&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.GetScopeByPositionIndex(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;0);
<anchor xml:id="__scope_tests_8cs_source_1l00992"/>00992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(scope);
<anchor xml:id="__scope_tests_8cs_source_1l00993"/>00993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l00994"/>00994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l00995"/>00995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l00996"/>00996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00997"/>00997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l00998"/>00998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l00999"/>00999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l01000"/>01000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l01001"/>01001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01002"/>01002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;If&#32;statement&#32;scope</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01003"/>01003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;ifStatementScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l01004"/>01004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;ifStatementScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l01005"/>01005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;ifStatementScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l01006"/>01006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(28,&#32;ifStatementScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l01007"/>01007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(53,&#32;ifStatementScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l01008"/>01008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.IfStatementNode,&#32;ifStatementScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l01009"/>01009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l01010"/>01010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l01011"/>01011 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l01012"/>01012 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01013"/>01013 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l01014"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1ad8629dd0a3f5bd16109ad7c850313737">01014</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1ad8629dd0a3f5bd16109ad7c850313737">If_IsPatternMatchVariableDefinition_Misses_OpenBraceToken</link>()
<anchor xml:id="__scope_tests_8cs_source_1l01015"/>01015 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l01016"/>01016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Erroneous&#32;behavior:</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01017"/>01017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;===================</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01018"/>01018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01019"/>01019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;OpenBraceToken&#32;of&#32;the&#32;if&#32;statement&#32;is&#32;being&#32;missed,&#32;and&#32;the&#32;scope&#32;for&#32;the&#32;IfStatementNode</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01020"/>01020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;placed&#32;at&#32;the&#32;StatementDelimiterToken&#32;which&#32;is&#32;at&#32;the&#32;end&#32;of&#32;the&#32;3rd&#32;line&#32;of&#32;the&#32;text.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01021"/>01021 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01022"/>01022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(
<anchor xml:id="__scope_tests_8cs_source_1l01023"/>01023 <emphasis role="stringliteral">@&quot;if&#32;(child&#32;is&#32;ISyntaxNode&#32;syntaxNode)</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01024"/>01024 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01025"/>01025 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(syntaxNode,&#32;&quot;&quot;node&quot;&quot;,&#32;indentation&#32;+&#32;1);</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01026"/>01026 <emphasis role="stringliteral">}&quot;</emphasis>.ReplaceLineEndings(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>));
<anchor xml:id="__scope_tests_8cs_source_1l01027"/>01027 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l01028"/>01028 
<anchor xml:id="__scope_tests_8cs_source_1l01029"/>01029 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l01030"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a2d0a504b6e9e2fae1ef759a838e807a8">01030</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1a2d0a504b6e9e2fae1ef759a838e807a8">Statement_Inside_If_CodeBlock_Causes_Miss_CloseBraceToken_CaseA</link>()
<anchor xml:id="__scope_tests_8cs_source_1l01031"/>01031 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l01032"/>01032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Erroneous&#32;behavior:</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01033"/>01033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;===================</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01034"/>01034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01035"/>01035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;issue&#32;occurs&#32;with&#32;the&#32;following&#32;input&#32;(and&#32;probably&#32;some&#32;others):</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01036"/>01036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;````if&#32;(false)</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01037"/>01037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;````{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01038"/>01038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;````&#32;_queue.RemoveLast();</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01039"/>01039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;````}</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01040"/>01040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01041"/>01041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;But,&#32;it&#32;does&#32;NOT&#32;occur&#32;with&#32;this&#32;input:</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01042"/>01042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;````if&#32;(false)</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01043"/>01043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;````{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01044"/>01044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;````&#32;var&#32;x&#32;=&#32;_queue.RemoveLast();</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01045"/>01045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;````}</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01046"/>01046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01047"/>01047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;scope&#32;should&#32;start&#32;at&#32;the&#32;OpenBraceToken,&#32;and&#32;end&#32;at&#32;the&#32;CloseBraceToken.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01048"/>01048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01049"/>01049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;However,&#32;in&#32;the&#32;erroneous&#32;example,&#32;the&#32;CloseBraceToken&#32;is&#32;somehow&#32;skipped&#32;over,</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01050"/>01050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;the&#32;IfStatementNode&#32;will&#32;use&#32;the&#32;next&#32;CloseBraceToken&#32;as&#32;the&#32;end&#32;of&#32;the&#32;scope</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01051"/>01051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(if&#32;there&#32;happens&#32;to&#32;be&#32;another&#32;CloseBraceToken&#32;deeper&#32;in&#32;the&#32;text&#32;file).</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01052"/>01052 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01053"/>01053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(
<anchor xml:id="__scope_tests_8cs_source_1l01054"/>01054 <emphasis role="stringliteral">@&quot;if&#32;(false)</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01055"/>01055 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01056"/>01056 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;_queue.RemoveLast();</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01057"/>01057 <emphasis role="stringliteral">}&quot;</emphasis>.ReplaceLineEndings(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>));
<anchor xml:id="__scope_tests_8cs_source_1l01058"/>01058 
<anchor xml:id="__scope_tests_8cs_source_1l01059"/>01059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l01060"/>01060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l01061"/>01061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l01062"/>01062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01063"/>01063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;scope&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.GetScopeByPositionIndex(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;0);
<anchor xml:id="__scope_tests_8cs_source_1l01064"/>01064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(scope);
<anchor xml:id="__scope_tests_8cs_source_1l01065"/>01065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01066"/>01066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01067"/>01067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l01068"/>01068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l01069"/>01069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l01070"/>01070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l01071"/>01071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l01072"/>01072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l01073"/>01073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01074"/>01074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;If&#32;statement&#32;scope</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01075"/>01075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;ifStatementScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l01076"/>01076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;ifStatementScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l01077"/>01077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;ifStatementScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l01078"/>01078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(28,&#32;ifStatementScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l01079"/>01079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(53,&#32;ifStatementScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l01080"/>01080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.IfStatementNode,&#32;ifStatementScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l01081"/>01081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l01082"/>01082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l01083"/>01083 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l01084"/>01084 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01085"/>01085 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__scope_tests_8cs_source_1l01086"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1ac073df070b7f569c9fb59b95f8b73f0f">01086</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1ac073df070b7f569c9fb59b95f8b73f0f">Statement_Inside_If_CodeBlock_Causes_Miss_CloseBraceToken_CaseB</link>()
<anchor xml:id="__scope_tests_8cs_source_1l01087"/>01087 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l01088"/>01088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;&apos;Statement_Inside_If_CodeBlock_Causes_Miss_CloseBraceToken_CaseA&apos;&#32;above&#32;this.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01089"/>01089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;an&#32;extra&#32;test&#32;to&#32;ensure&#32;that&#32;a&#32;fix&#32;to&#32;the&#32;erroneous&#32;case&#32;doesn&apos;t&#32;break</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01090"/>01090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;related,&#32;and&#32;working,&#32;case.</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01091"/>01091 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01092"/>01092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_scope_tests_1_1_test">Test</link>(
<anchor xml:id="__scope_tests_8cs_source_1l01093"/>01093 <emphasis role="stringliteral">@&quot;if&#32;(false)</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01094"/>01094 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01095"/>01095 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;var&#32;x&#32;=&#32;_queue.RemoveLast();</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01096"/>01096 <emphasis role="stringliteral">}&quot;</emphasis>.ReplaceLineEndings(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>));
<anchor xml:id="__scope_tests_8cs_source_1l01097"/>01097 
<anchor xml:id="__scope_tests_8cs_source_1l01098"/>01098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;success&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.TryGetBinderSession(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;out&#32;var&#32;binderSession);
<anchor xml:id="__scope_tests_8cs_source_1l01099"/>01099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(success);
<anchor xml:id="__scope_tests_8cs_source_1l01100"/>01100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;binderSession.ScopeList.Count);
<anchor xml:id="__scope_tests_8cs_source_1l01101"/>01101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01102"/>01102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;scope&#32;=&#32;<link linkend="_namespacetest">test</link>.Binder.GetScopeByPositionIndex(<link linkend="_namespacetest">test</link>.ResourceUri,&#32;0);
<anchor xml:id="__scope_tests_8cs_source_1l01103"/>01103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(scope);
<anchor xml:id="__scope_tests_8cs_source_1l01104"/>01104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01105"/>01105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Global</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01106"/>01106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;globalScope&#32;=&#32;binderSession.ScopeList[0];
<anchor xml:id="__scope_tests_8cs_source_1l01107"/>01107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l01108"/>01108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l01109"/>01109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;globalScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l01110"/>01110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l01111"/>01111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(globalScope.CodeBlockOwner);
<anchor xml:id="__scope_tests_8cs_source_1l01112"/>01112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01113"/>01113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;If&#32;statement&#32;scope</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01114"/>01114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;ifStatementScope&#32;=&#32;binderSession.ScopeList[1];
<anchor xml:id="__scope_tests_8cs_source_1l01115"/>01115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;ifStatementScope.IndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l01116"/>01116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;ifStatementScope.ParentIndexKey);
<anchor xml:id="__scope_tests_8cs_source_1l01117"/>01117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(28,&#32;ifStatementScope.StartingIndexInclusive);
<anchor xml:id="__scope_tests_8cs_source_1l01118"/>01118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(53,&#32;ifStatementScope.EndingIndexExclusive);
<anchor xml:id="__scope_tests_8cs_source_1l01119"/>01119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.IfStatementNode,&#32;ifStatementScope.CodeBlockOwner.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l01120"/>01120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l01121"/>01121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l01122"/>01122 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l01123"/>01123 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01124"/>01124 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;WriteChildrenIndented(<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node">ISyntaxNode</link>&#32;node,&#32;<emphasis role="keywordtype">string</emphasis>&#32;name&#32;=&#32;<emphasis role="stringliteral">&quot;node&quot;</emphasis>)
<anchor xml:id="__scope_tests_8cs_source_1l01125"/>01125 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l01126"/>01126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine($<emphasis role="stringliteral">&quot;foreach&#32;(var&#32;child&#32;in&#32;{name}.GetChildList())&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l01127"/>01127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;child&#32;<emphasis role="keywordflow">in</emphasis>&#32;node.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node_1a73d81f1c4e42db7e80bfdd4db97c10fe">GetChildList</link>())
<anchor xml:id="__scope_tests_8cs_source_1l01128"/>01128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l01129"/>01129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;+&#32;child.SyntaxKind);
<anchor xml:id="__scope_tests_8cs_source_1l01130"/>01130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l01131"/>01131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine();
<anchor xml:id="__scope_tests_8cs_source_1l01132"/>01132 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l01133"/>01133 &#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01134"/>01134 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;WriteChildrenIndentedRecursive(<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node">ISyntaxNode</link>&#32;node,&#32;<emphasis role="keywordtype">string</emphasis>&#32;name&#32;=&#32;<emphasis role="stringliteral">&quot;node&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indentation&#32;=&#32;0)
<anchor xml:id="__scope_tests_8cs_source_1l01135"/>01135 &#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l01136"/>01136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;indentationStringBuilder&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__scope_tests_8cs_source_1l01137"/>01137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;indentation;&#32;i++)
<anchor xml:id="__scope_tests_8cs_source_1l01138"/>01138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indentationStringBuilder.Append(<emphasis role="charliteral">&apos;\t&apos;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l01139"/>01139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01140"/>01140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine($<emphasis role="stringliteral">&quot;{indentationStringBuilder.ToString()}{node.SyntaxKind}&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l01141"/>01141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01142"/>01142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;the&#32;child&#32;tokens</emphasis>
<anchor xml:id="__scope_tests_8cs_source_1l01143"/>01143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indentationStringBuilder.Append(<emphasis role="charliteral">&apos;\t&apos;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l01144"/>01144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;childIndentation&#32;=&#32;indentationStringBuilder.ToString();
<anchor xml:id="__scope_tests_8cs_source_1l01145"/>01145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01146"/>01146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;child&#32;<emphasis role="keywordflow">in</emphasis>&#32;node.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node_1a73d81f1c4e42db7e80bfdd4db97c10fe">GetChildList</link>())
<anchor xml:id="__scope_tests_8cs_source_1l01147"/>01147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l01148"/>01148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(child&#32;is&#32;<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node">ISyntaxNode</link>&#32;syntaxNode)
<anchor xml:id="__scope_tests_8cs_source_1l01149"/>01149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l01150"/>01150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(syntaxNode,&#32;<emphasis role="stringliteral">&quot;node&quot;</emphasis>,&#32;indentation&#32;+&#32;1);
<anchor xml:id="__scope_tests_8cs_source_1l01151"/>01151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l01152"/>01152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(child&#32;is&#32;<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_token">ISyntaxToken</link>&#32;syntaxToken)
<anchor xml:id="__scope_tests_8cs_source_1l01153"/>01153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__scope_tests_8cs_source_1l01154"/>01154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine($<emphasis role="stringliteral">&quot;{childIndentation}{child.SyntaxKind}__{syntaxToken.TextSpan.GetText()}&quot;</emphasis>);
<anchor xml:id="__scope_tests_8cs_source_1l01155"/>01155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l01156"/>01156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l01157"/>01157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__scope_tests_8cs_source_1l01158"/>01158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(indentation&#32;==&#32;0)
<anchor xml:id="__scope_tests_8cs_source_1l01159"/>01159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine();
<anchor xml:id="__scope_tests_8cs_source_1l01160"/>01160 &#32;&#32;&#32;&#32;}
<anchor xml:id="__scope_tests_8cs_source_1l01161"/>01161 }
</programlisting></section>
