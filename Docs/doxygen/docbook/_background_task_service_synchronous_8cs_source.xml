<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__background_task_service_synchronous_8cs_source" xml:lang="en-US">
<title>BackgroundTaskServiceSynchronous.cs</title>
<indexterm><primary>Source/Lib/Common/BackgroundTasks/Models/BackgroundTaskServiceSynchronous.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__background_task_service_synchronous_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_keys_1_1_models">Luthetus.Common.RazorLib.Keys.Models</link>;
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis>System.Collections.Immutable;
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00003"/>00003 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00004"/>00004 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models">Luthetus.Common.RazorLib.BackgroundTasks.Models</link>;
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00005"/>00005 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00006"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous">00006</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous">BackgroundTaskServiceSynchronous</link>&#32;:&#32;<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task_service">IBackgroundTaskService</link>
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00007"/>00007 {
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00008"/>00008 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;readonly&#32;Dictionary&lt;Key&lt;IBackgroundTaskQueue&gt;,&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_queue">BackgroundTaskQueue</link>&gt;&#32;_queueMap&#32;=&#32;<emphasis role="keyword">new</emphasis>();
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00009"/>00009 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_enqueuesAreDisabled;
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00011"/>00011 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00012"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a78567ee278026fd5fabd73e7740f3906">00012</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;ImmutableArray&lt;IBackgroundTaskQueue&gt;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a78567ee278026fd5fabd73e7740f3906">Queues</link>&#32;=&gt;&#32;_queueMap.Values.Select(x&#32;=&gt;&#32;(<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task_queue">IBackgroundTaskQueue</link>)x).ToImmutableArray();
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00013"/>00013 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00014"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a9a92eaf330d46a1bed7b6f5f5a03f29d">00014</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a9a92eaf330d46a1bed7b6f5f5a03f29d">Enqueue</link>(<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task">IBackgroundTask</link>&#32;backgroundTask)
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00015"/>00015 &#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Could&#32;there&#32;be&#32;concurrency&#32;issues&#32;regarding&#32;&apos;_enqueuesAreDisabled&apos;?&#32;(2023-11-19)</emphasis>
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_enqueuesAreDisabled)
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00019"/>00019 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;queue&#32;=&#32;_queueMap[backgroundTask.<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task_1aa2f741e09d6826b4dcbe732fe052790d">QueueKey</link>];
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00021"/>00021 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Why&#32;enqueue&#32;when&#32;no&#32;dequeue&#32;happens?&#32;Also&#32;StopAsync&#32;seems&#32;nonsensical</emphasis>
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;the&#32;same&#32;reason.&#32;This&#32;is&#32;the&#32;synchronous&#32;version.</emphasis>
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;queue.Enqueue(backgroundTask);
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00025"/>00025 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1af6f6e829d3c68b3fc3536b922dde5afb">SetExecutingBackgroundTask</link>(backgroundTask.<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task_1aa2f741e09d6826b4dcbe732fe052790d">QueueKey</link>,&#32;backgroundTask);
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00027"/>00027 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;backgroundTask
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task_1a21b25df8bfd1ba84e61469ad757b5085">HandleEvent</link>(CancellationToken.None)
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Wait();
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00031"/>00031 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;await&#32;Task.Delay(backgroundTask.ThrottleTimeSpan)&#32;for</emphasis>
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;BackgroundTaskServiceSynchronous&#32;implementation.</emphasis>
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00034"/>00034 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1af6f6e829d3c68b3fc3536b922dde5afb">SetExecutingBackgroundTask</link>(backgroundTask.<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task_1aa2f741e09d6826b4dcbe732fe052790d">QueueKey</link>,&#32;<emphasis role="keyword">null</emphasis>);
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00037"/>00037 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00038"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a5f22d1c33398d0b7b2b9dad58414ba1e">00038</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a5f22d1c33398d0b7b2b9dad58414ba1e">Enqueue</link>(Key&lt;IBackgroundTask&gt;&#32;taskKey,&#32;Key&lt;IBackgroundTaskQueue&gt;&#32;queueKey,&#32;<emphasis role="keywordtype">string</emphasis>&#32;name,&#32;Func&lt;Task&gt;&#32;runFunc)
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a9a92eaf330d46a1bed7b6f5f5a03f29d">Enqueue</link>(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task">BackgroundTask</link>(taskKey,&#32;queueKey,&#32;name,&#32;runFunc));
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00043"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1ae65b862158b9add7083e682162419ecb">00043</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1ae65b862158b9add7083e682162419ecb">EnqueueAsync</link>(<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task">IBackgroundTask</link>&#32;backgroundTask)
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a9a92eaf330d46a1bed7b6f5f5a03f29d">Enqueue</link>(backgroundTask);
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Task.CompletedTask;
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00049"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a43a1f1bb2fd512cbcd39d32f3901eaa4">00049</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a43a1f1bb2fd512cbcd39d32f3901eaa4">EnqueueAsync</link>(Key&lt;IBackgroundTask&gt;&#32;taskKey,&#32;Key&lt;IBackgroundTaskQueue&gt;&#32;queueKey,&#32;<emphasis role="keywordtype">string</emphasis>&#32;name,&#32;Func&lt;Task&gt;&#32;runFunc)
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1ae65b862158b9add7083e682162419ecb">EnqueueAsync</link>(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task">BackgroundTask</link>(taskKey,&#32;queueKey,&#32;name,&#32;runFunc));
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00054"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a482e12a2b073a9fa2d4e9fe8c9f2c2a8">00054</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a482e12a2b073a9fa2d4e9fe8c9f2c2a8">CompleteTaskCompletionSource</link>(Key&lt;IBackgroundTask&gt;&#32;taskKey)
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException($<emphasis role="stringliteral">&quot;The&#32;{nameof(CompleteTaskCompletionSource)}(...)&#32;method&#32;should&#32;not&#32;be&#32;invoked&#32;when&#32;using&#32;&quot;</emphasis>&#32;+
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$<emphasis role="stringliteral">&quot;a&#32;{nameof(BackgroundTaskServiceSynchronous)}.&#32;This&#32;type&#32;is&#32;designed&#32;such&#32;that&#32;{nameof(Enqueue)}(...)&#32;&quot;</emphasis>&#32;+
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$<emphasis role="stringliteral">&quot;will&#32;invoke&#32;{nameof(Task.Wait)}()&#32;on&#32;the&#32;background&#32;task,&#32;as&#32;opposed&#32;to&#32;enqueueing.&quot;</emphasis>);
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00060"/>00060 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00061"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a9eb870d98ba45cd91f7204a91f7cd618">00061</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task">IBackgroundTask</link>?&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a9eb870d98ba45cd91f7204a91f7cd618">Dequeue</link>(Key&lt;IBackgroundTaskQueue&gt;&#32;queueKey)
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException($<emphasis role="stringliteral">&quot;The&#32;{nameof(Dequeue)}(...)&#32;method&#32;should&#32;not&#32;be&#32;invoked&#32;when&#32;using&#32;&quot;</emphasis>&#32;+
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$<emphasis role="stringliteral">&quot;a&#32;{nameof(BackgroundTaskServiceSynchronous)}.&#32;This&#32;type&#32;is&#32;designed&#32;such&#32;that&#32;{nameof(Enqueue)}(...)&#32;&quot;</emphasis>&#32;+
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$<emphasis role="stringliteral">&quot;will&#32;invoke&#32;{nameof(Task.Wait)}()&#32;on&#32;the&#32;background&#32;task,&#32;as&#32;opposed&#32;to&#32;enqueueing.&quot;</emphasis>);
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00067"/>00067 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00068"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a4f16d835855122d88144000b1402e51b">00068</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Task&lt;IBackgroundTask?&gt;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a4f16d835855122d88144000b1402e51b">DequeueAsync</link>(
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&lt;IBackgroundTaskQueue&gt;&#32;queueKey,
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CancellationToken&#32;cancellationToken)
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException($<emphasis role="stringliteral">&quot;The&#32;{nameof(DequeueAsync)}(...)&#32;method&#32;should&#32;not&#32;be&#32;invoked&#32;when&#32;using&#32;&quot;</emphasis>&#32;+
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$<emphasis role="stringliteral">&quot;a&#32;{nameof(BackgroundTaskServiceSynchronous)}.&#32;This&#32;type&#32;is&#32;designed&#32;such&#32;that&#32;{nameof(Enqueue)}(...)&#32;&quot;</emphasis>&#32;+
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$<emphasis role="stringliteral">&quot;will&#32;invoke&#32;{nameof(Task.Wait)}()&#32;on&#32;the&#32;background&#32;task,&#32;as&#32;opposed&#32;to&#32;enqueueing.&quot;</emphasis>);
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00076"/>00076 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00077"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a3cbe68dbbfdf694762cd2d38a3f62af4">00077</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a3cbe68dbbfdf694762cd2d38a3f62af4">RegisterQueue</link>(<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task_queue">IBackgroundTaskQueue</link>&#32;queue)
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_queueMap.Add(queue.<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task_queue_1ab0a4a6223a9a5633d5b318cb37ee0ff2">Key</link>,&#32;(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_queue">BackgroundTaskQueue</link>)queue);
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00081"/>00081 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00082"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1af6f6e829d3c68b3fc3536b922dde5afb">00082</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1af6f6e829d3c68b3fc3536b922dde5afb">SetExecutingBackgroundTask</link>(
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&lt;IBackgroundTaskQueue&gt;&#32;queueKey,
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task">IBackgroundTask</link>?&#32;backgroundTask)
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;queue&#32;=&#32;_queueMap[queueKey];
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00087"/>00087 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;queue.ExecutingBackgroundTask&#32;=&#32;backgroundTask;
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00090"/>00090 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00091"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a559a081227ca5afb0750a08c52ef6b7c">00091</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task_queue">IBackgroundTaskQueue</link>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1a559a081227ca5afb0750a08c52ef6b7c">GetQueue</link>(Key&lt;IBackgroundTaskQueue&gt;&#32;queueKey)
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_queueMap[queueKey];
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00095"/>00095 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00096"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1adf09ade61006c8be63caa9c13fbae8ce">00096</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_service_synchronous_1adf09ade61006c8be63caa9c13fbae8ce">StopAsync</link>(CancellationToken&#32;cancellationToken)
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_enqueuesAreDisabled&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00099"/>00099 
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Polling&#32;solution&#32;for&#32;now,&#32;perhaps&#32;change&#32;to&#32;a&#32;more&#32;optimal&#32;solution?&#32;(2023-11-19)</emphasis>
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(_queueMap.Values.SelectMany(x&#32;=&gt;&#32;x.<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task_queue_1a15a097076aac6a06570b70a8671e9e22">BackgroundTaskList</link>).Any())
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;Task.Delay(TimeSpan.FromMilliseconds(100),&#32;cancellationToken).ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_service_synchronous_8cs_source_1l00106"/>00106 }
</programlisting></section>
