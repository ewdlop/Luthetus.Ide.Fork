<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__throttle_event_queue_async_8cs_source" xml:lang="en-US">
<title>ThrottleEventQueueAsync.cs</title>
<indexterm><primary>Source/Lib/Common/Reactives/Models/ThrottleEventQueueAsync.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__throttle_event_queue_async_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models">Luthetus.Common.RazorLib.BackgroundTasks.Models</link>;
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_exceptions">Luthetus.Common.RazorLib.Exceptions</link>;
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00003"/>00003 <emphasis role="keyword">using&#32;</emphasis>System.Collections.Immutable;
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00004"/>00004 
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00005"/>00005 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models">Luthetus.Common.RazorLib.Reactives.Models</link>;
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00006"/>00006 
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00010"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async">00010</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async">ThrottleEventQueueAsync</link>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00011"/>00011 {
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;readonly&#32;LinkedList&lt;IBackgroundTask&gt;&#32;_queue&#32;=&#32;<emphasis role="keyword">new</emphasis>();
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;readonly&#32;SemaphoreSlim&#32;_dequeueSemaphoreSlim&#32;=&#32;<emphasis role="keyword">new</emphasis>(0);
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;readonly&#32;SemaphoreSlim&#32;_modifyQueueSemaphoreSlim&#32;=&#32;<emphasis role="keyword">new</emphasis>(1,&#32;1);
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00028"/>00028 
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00029"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1af84a28f244c74fdc2a039063702327f8">00029</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1af84a28f244c74fdc2a039063702327f8">IsStoppingFurtherEnqueues</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00030"/>00030 
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00034"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1a1e9fb50316818930ce2e364d3ad9f865">00034</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1a1e9fb50316818930ce2e364d3ad9f865">Count</link>&#32;=&gt;&#32;_queue.Count;
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00035"/>00035 
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00036"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1a1a431e4252754457b13e82d1bae10472">00036</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;ImmutableArray&lt;IBackgroundTask&gt;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1a1a431e4252754457b13e82d1bae10472">ThrottleEventList</link>&#32;=&gt;&#32;_queue.ToImmutableArray();
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00037"/>00037 
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00052"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1af0406fd8ea7dd2d9c9a3f255588ead75">00052</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1af0406fd8ea7dd2d9c9a3f255588ead75">EnqueueAsync</link>(<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task">IBackgroundTask</link>&#32;downstreamEvent)
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1af84a28f244c74fdc2a039063702327f8">IsStoppingFurtherEnqueues</link>)
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_exceptions_1_1_luthetus_common_exception">LuthetusCommonException</link>($<emphasis role="stringliteral">&quot;Cannot&#32;enqueue&#32;on&#32;a&#32;stopped&#32;{nameof(ThrottleEventQueueAsync)}&quot;</emphasis>);
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00056"/>00056 
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;_modifyQueueSemaphoreSlim.WaitAsync().ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00060"/>00060 
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;This&#32;looks&#32;very&#32;incorrect.&#32;(2025-05-27)</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;============================================</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Why&#32;am&#32;I&#32;looping&#32;through&#32;the&#32;&apos;_queue&apos;,</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;as&#32;opposed&#32;to&#32;just&#32;batching&#32;with&#32;the&#32;most&#32;recently</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;enqueued&#32;thing&#32;prior&#32;to&#32;&quot;me&quot;?</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;--------------------------------------------------</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;is&#32;likely&#32;a&#32;lot&#32;of&#32;shifting&#32;within&#32;the&#32;&apos;_queue&apos;,</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;when&#32;tasks&#32;are&#32;enqueued/dequeued.</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Perhaps&#32;a&#32;different&#32;datastructure&#32;would&#32;be&#32;preferred?</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Is&#32;a&#32;linked&#32;list&#32;a&#32;good&#32;idea&#32;here?</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;--------------------------------------------------</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;OnKeyDown&#32;events&#32;have&#32;a&#32;special&#32;issue,</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;that&#32;they&apos;re&#32;not&#32;batchable&#32;until&#32;the&#32;time&#32;of&#32;their&#32;dequeueing,</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;because&#32;the&#32;command&#32;that&#32;is&#32;invoked&#32;as&#32;a&#32;result&#32;of&#32;an&#32;OnKeyDown&#32;event</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;dependent&#32;on&#32;what&#32;layer&#32;the&#32;keymap&#32;is&#32;in.</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;That&#32;being&#32;that,&#32;one&#32;can&#32;still&#32;batch&#32;all&#32;OnKeyDown&#32;events&#32;together</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;without&#32;the&#32;intent&#32;of&#32;performing&#32;an&#32;optimized&#32;calculation,&#32;but&#32;instead</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;foreach-loop-batching.</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;During&#32;the&#32;foreach-loop-batching,&#32;you&#32;can&#32;still&#32;try&#32;to&#32;optimize&#32;calculations</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;where&#32;consecutive&#32;OnKeyDown&#32;events&#32;can&#32;be&#32;combined&#32;as&#32;well.</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;But,&#32;this&#32;way&#32;you&apos;d&#32;avoid&#32;any&#32;of&#32;the&#32;&apos;TentativeKeyboardEventArgsKind&apos;</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;confusion.</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_queue.Count&#32;&gt;&#32;0)
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;upstreamEvent&#32;=&#32;_queue.Last.Value;
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Rename&#32;&apos;BatchOrDefault&apos;&#32;to&#32;&apos;TryMergeIntoUpstream&apos;</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;batchEvent&#32;=&#32;downstreamEvent.<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task_1a1297b3be631c1bb2c38c132674f61911">BatchOrDefault</link>(upstreamEvent);
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00091"/>00091 
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(batchEvent&#32;is&#32;not&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;length&#32;of&#32;the&#32;queue&#32;has&#32;not&#32;changed,</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;do&#32;not&#32;release&#32;the&#32;dequeue&#32;semaphore&#32;here.</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;batching&#32;was&#32;successful&#32;so&#32;return&#32;early.</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_queue.RemoveLast();
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_queue.AddLast(batchEvent);
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00103"/>00103 
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;batching&#32;was&#32;NOT&#32;successful&#32;so&#32;add&#32;to&#32;the&#32;queue.</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_queue.AddLast(downstreamEvent);
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_dequeueSemaphoreSlim.Release();
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">finally</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_modifyQueueSemaphoreSlim.Release();
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00117"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1ad16053388e4858f8a083cf6619dcdace">00117</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&lt;IBackgroundTask&gt;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1ad16053388e4858f8a083cf6619dcdace">DequeueOrDefaultAsync</link>()
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;_dequeueSemaphoreSlim.WaitAsync().ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00120"/>00120 
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;_modifyQueueSemaphoreSlim.WaitAsync().ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;task&#32;=&#32;_queue.First.Value;
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_queue.RemoveFirst();
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;task;
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(ArgumentOutOfRangeException&#32;e)
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00132"/>00132 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Got&#32;exception&#32;on&#32;(2024-05-08):</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00133"/>00133 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;===========================================================</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00134"/>00134 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;System.ArgumentOutOfRangeException:&#32;Index&#32;was&#32;out&#32;of&#32;range.&#32;Must&#32;be&#32;non-negative&#32;and&#32;less&#32;than&#32;the&#32;size&#32;of&#32;the&#32;collection.&#32;(Parameter&#32;&apos;index&apos;)</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00135"/>00135 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;at&#32;System.Collections.Generic.List`1.get_Item(Int32&#32;index)</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00136"/>00136 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;at&#32;Luthetus.Common.RazorLib.Reactives.Models.ThrottleEventQueueAsync.DequeueOrDefaultAsync()&#32;in&#32;C:\Users\hunte\Repos\Luthetus.Ide_Fork\Source\Lib\Common\Reactives\Models\ThrottleEventQueueAsync.cs:line&#32;97</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00137"/>00137 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;at&#32;Luthetus.Common.RazorLib.BackgroundTasks.Models.BackgroundTaskWorker.ExecuteAsync(CancellationToken&#32;cancellationToken)&#32;in&#32;C:\Users\hunte\Repos\Luthetus.Ide_Fork\Source\Lib\Common\BackgroundTasks\Models\BackgroundTaskWorker.cs:line&#32;31</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00138"/>00138 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;at&#32;Microsoft.Extensions.Hosting.Internal.Host.TryExecuteBackgroundServiceAsync(BackgroundService&#32;backgroundService)</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00139"/>00139 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00140"/>00140 
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00142"/>00142 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I&apos;m&#32;going&#32;to&#32;eat&#32;this&#32;exception&#32;for&#32;a&#32;moment.</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00143"/>00143 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;can&apos;t&#32;test&#32;scrolling&#32;logic&#32;cause&#32;this&#32;exception&#32;keeps&#32;happening&#32;(2024-05-09).</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00144"/>00144 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(e.ToString());
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task">BackgroundTask</link>(
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_keys">Keys</link>.<link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_keys_1_1_models">Models</link>.Key&lt;<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task">IBackgroundTask</link>&gt;.NewKey(),
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_continuous_background_task_worker">ContinuousBackgroundTaskWorker</link>.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_continuous_background_task_worker_1a2bbecf18336413ee1caff9d378acc256">GetQueueKey</link>(),
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;I&apos;m&#32;going&#32;to&#32;eat&#32;this&#32;exception&#32;for&#32;a&#32;moment.&quot;</emphasis>,
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;()&#32;=&gt;&#32;Task.CompletedTask);
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;throw;</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">finally</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_modifyQueueSemaphoreSlim.Release();
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00161"/>00161 
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00162"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1a9080c44a0d47eb00c63d893448e0daa6">00162</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1a9080c44a0d47eb00c63d893448e0daa6">StopFurtherEnqueuesAsync</link>()
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;_modifyQueueSemaphoreSlim.WaitAsync().ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1af84a28f244c74fdc2a039063702327f8">IsStoppingFurtherEnqueues</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">finally</emphasis>
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_modifyQueueSemaphoreSlim.Release();
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00174"/>00174 
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00183"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1a9c18aeecddeaca7a66fac33f13a58ff5">00183</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1a9c18aeecddeaca7a66fac33f13a58ff5">UntilIsEmptyAsync</link>(
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TimeSpan?&#32;pollingTimeSpan&#32;=&#32;<emphasis role="keyword">null</emphasis>,
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CancellationToken&#32;cancellationToken&#32;=&#32;<emphasis role="keywordflow">default</emphasis>)
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pollingTimeSpan&#32;??=&#32;TimeSpan.FromMilliseconds(333);
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00188"/>00188 
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!cancellationToken.IsCancellationRequested)
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_event_queue_async_1a1e9fb50316818930ce2e364d3ad9f865">Count</link>&#32;==&#32;0)
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00193"/>00193 
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;Task.Delay(pollingTimeSpan.Value).ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00196"/>00196 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_event_queue_async_8cs_source_1l00197"/>00197 }
</programlisting></section>
