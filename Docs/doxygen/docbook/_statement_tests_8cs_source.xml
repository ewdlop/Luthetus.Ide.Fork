<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__statement_tests_8cs_source" xml:lang="en-US">
<title>StatementTests.cs</title>
<indexterm><primary>Source/Tests/CompilerServices/CSharp/SmokeTests/Parsers/StatementTests.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__statement_tests_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis>System.Text;
<anchor xml:id="__statement_tests_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models">Luthetus.TextEditor.RazorLib.Lexers.Models</link>;
<anchor xml:id="__statement_tests_8cs_source_1l00003"/>00003 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services">Luthetus.TextEditor.RazorLib.CompilerServices</link>;
<anchor xml:id="__statement_tests_8cs_source_1l00004"/>00004 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_interfaces">Luthetus.TextEditor.RazorLib.CompilerServices.Interfaces</link>;
<anchor xml:id="__statement_tests_8cs_source_1l00005"/>00005 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax</link>;
<anchor xml:id="__statement_tests_8cs_source_1l00006"/>00006 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Tokens</link>;
<anchor xml:id="__statement_tests_8cs_source_1l00007"/>00007 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes</link>;
<anchor xml:id="__statement_tests_8cs_source_1l00008"/>00008 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_interfaces">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes.Interfaces</link>;
<anchor xml:id="__statement_tests_8cs_source_1l00009"/>00009 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_enums">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes.Enums</link>;
<anchor xml:id="__statement_tests_8cs_source_1l00010"/>00010 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case">Luthetus.CompilerServices.CSharp.LexerCase</link>;
<anchor xml:id="__statement_tests_8cs_source_1l00011"/>00011 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case">Luthetus.CompilerServices.CSharp.ParserCase</link>;
<anchor xml:id="__statement_tests_8cs_source_1l00012"/>00012 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_internals">Luthetus.CompilerServices.CSharp.ParserCase.Internals</link>;
<anchor xml:id="__statement_tests_8cs_source_1l00013"/>00013 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_facts">Luthetus.CompilerServices.CSharp.Facts</link>;
<anchor xml:id="__statement_tests_8cs_source_1l00014"/>00014 
<anchor xml:id="__statement_tests_8cs_source_1l00015"/>00015 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers">Luthetus.CompilerServices.CSharp.Tests.SmokeTests.Parsers</link>;
<anchor xml:id="__statement_tests_8cs_source_1l00016"/>00016 
<anchor xml:id="__statement_tests_8cs_source_1l00017"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests">00017</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests">StatementTests</link>
<anchor xml:id="__statement_tests_8cs_source_1l00018"/>00018 {
<anchor xml:id="__statement_tests_8cs_source_1l00019"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">00019</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1af9f95da65d89d96266d4cc304c433bfd">Test</link>
<anchor xml:id="__statement_tests_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00021"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1af9f95da65d89d96266d4cc304c433bfd">00021</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1af9f95da65d89d96266d4cc304c433bfd">Test</link>(<emphasis role="keywordtype">string</emphasis>&#32;sourceText)
<anchor xml:id="__statement_tests_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1a36ed2bbb2f30c98e11a56c2f3ce823d6">SourceText</link>&#32;=&#32;sourceText;
<anchor xml:id="__statement_tests_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1adda1a5c702effa7af992a6f3c0524246">ResourceUri</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;./unitTesting.txt&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1acd5ecac9d2486449ae10b65ef8617a0d">Lexer</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1adda1a5c702effa7af992a6f3c0524246">ResourceUri</link>,&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1a36ed2bbb2f30c98e11a56c2f3ce823d6">SourceText</link>);
<anchor xml:id="__statement_tests_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1acd5ecac9d2486449ae10b65ef8617a0d">Lexer</link>.Lex();
<anchor xml:id="__statement_tests_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1a8b58e5ae36e7126fb115df318832a3c0">Parser</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_c_sharp_parser">CSharpParser</link>(<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1acd5ecac9d2486449ae10b65ef8617a0d">Lexer</link>);
<anchor xml:id="__statement_tests_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1a56b4fa825a7a7c12bed709be267e3a01">CompilationUnit</link>&#32;=&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1a8b58e5ae36e7126fb115df318832a3c0">Parser</link>.Parse();
<anchor xml:id="__statement_tests_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00031"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1a36ed2bbb2f30c98e11a56c2f3ce823d6">00031</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1a36ed2bbb2f30c98e11a56c2f3ce823d6">SourceText</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00032"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1adda1a5c702effa7af992a6f3c0524246">00032</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1adda1a5c702effa7af992a6f3c0524246">ResourceUri</link>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1adda1a5c702effa7af992a6f3c0524246">ResourceUri</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00033"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1acd5ecac9d2486449ae10b65ef8617a0d">00033</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1acd5ecac9d2486449ae10b65ef8617a0d">Lexer</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00034"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1a8b58e5ae36e7126fb115df318832a3c0">00034</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_parser_case_1_1_c_sharp_parser">CSharpParser</link>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1a8b58e5ae36e7126fb115df318832a3c0">Parser</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00035"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1a56b4fa825a7a7c12bed709be267e3a01">00035</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1a56b4fa825a7a7c12bed709be267e3a01">CompilationUnit</link>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test_1a56b4fa825a7a7c12bed709be267e3a01">CompilationUnit</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00037"/>00037 
<anchor xml:id="__statement_tests_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00039"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1ae2431d9ded8c7e0de75adc90ae10317c">00039</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1ae2431d9ded8c7e0de75adc90ae10317c">NamespaceStatementNode_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;namespace&#32;Luthetus.CompilerServices.CSharp.Tests.SmokeTests.Parsers;&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;namespaceStatementNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_namespace_statement_node">NamespaceStatementNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__statement_tests_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.NamespaceStatementNode,&#32;namespaceStatementNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00049"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1aed69e6b957efa944726823238c085465">00049</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1aed69e6b957efa944726823238c085465">UsingStatementNode_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;using&#32;Luthetus.CompilerServices.CSharp.Tests.SmokeTests.Parsers;&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;usingStatementNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_using_statement_node">UsingStatementNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__statement_tests_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.UsingStatementNode,&#32;usingStatementNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00059"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a9974fd3e1aea847883e5af5ea96f27ed">00059</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a9974fd3e1aea847883e5af5ea96f27ed">TypeDefinitionNode_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;class&#32;Aaa&#32;{&#32;}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeDefinitionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_definition_node">TypeDefinitionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__statement_tests_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TypeDefinitionNode,&#32;typeDefinitionNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00069"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a6265111659006dc008a0deb42a005713">00069</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a6265111659006dc008a0deb42a005713">FunctionDefinitionNode_Keyword_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;void&#32;Aaa()&#32;{&#32;}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;publicKeywordToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_keyword_token">KeywordToken</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__statement_tests_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.PublicTokenKeyword,&#32;publicKeywordToken.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionDefinitionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_definition_node">FunctionDefinitionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__statement_tests_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.FunctionDefinitionNode,&#32;functionDefinitionNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00083"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1adbd31b11758f2e7c1f8cb84bd7941132">00083</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1adbd31b11758f2e7c1f8cb84bd7941132">FunctionDefinitionNode_Identifier_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;Person&#32;Aaa()&#32;{&#32;}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;publicKeywordToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_keyword_token">KeywordToken</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__statement_tests_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.PublicTokenKeyword,&#32;publicKeywordToken.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;functionDefinitionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_function_definition_node">FunctionDefinitionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__statement_tests_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.FunctionDefinitionNode,&#32;functionDefinitionNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00097"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a44e88b4ef9eb276462649b76283f5544">00097</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a44e88b4ef9eb276462649b76283f5544">ConstructorDefinitionNode_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;class&#32;Aaa&#32;{&#32;public&#32;Aaa()&#32;{&#32;}&#32;}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeDefinitionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_definition_node">TypeDefinitionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__statement_tests_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//var&#32;publicKeywordToken&#32;=&#32;(KeywordToken)typeDefinitionNode.GetChildList()[0];</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Assert.Equal(SyntaxKind.PublicTokenKeyword,&#32;publicKeywordToken.SyntaxKind);</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorDefinitionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_constructor_definition_node">ConstructorDefinitionNode</link>)typeDefinitionNode.CodeBlockNode.GetChildList()[1];
<anchor xml:id="__statement_tests_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ConstructorDefinitionNode,&#32;constructorDefinitionNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00113"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a8d0c598dd78bee56f0edaa48aec54f76">00113</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a8d0c598dd78bee56f0edaa48aec54f76">ConstructorDefinitionNode_Arguments_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;class&#32;Aaa&#32;{&#32;public&#32;Aaa(string&#32;firstName,&#32;string&#32;lastName)&#32;{&#32;}&#32;}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(topCodeBlock);
<anchor xml:id="__statement_tests_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;typeDefinitionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_type_definition_node">TypeDefinitionNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__statement_tests_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//var&#32;publicKeywordToken&#32;=&#32;(KeywordToken)typeDefinitionNode.GetChildList()[0];</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Assert.Equal(SyntaxKind.PublicTokenKeyword,&#32;publicKeywordToken.SyntaxKind);</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;constructorDefinitionNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_constructor_definition_node">ConstructorDefinitionNode</link>)typeDefinitionNode.CodeBlockNode.GetChildList()[1];
<anchor xml:id="__statement_tests_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ConstructorDefinitionNode,&#32;constructorDefinitionNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00131"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1ad7f59cbd8a70e5cda1d4c8d6fee611a2">00131</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1ad7f59cbd8a70e5cda1d4c8d6fee611a2">ArbitraryCodeBlockNode_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;{&#32;}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;arbitraryCodeBlockNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_arbitrary_code_block_node">ArbitraryCodeBlockNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__statement_tests_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ArbitraryCodeBlockNode,&#32;arbitraryCodeBlockNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00141"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1abb931c74b8965905d0c5bf27445dfbef">00141</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1abb931c74b8965905d0c5bf27445dfbef">DoWhileStatementNode_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;do&#32;{&#32;}&#32;while(false);&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;doWhileStatementNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_do_while_statement_node">DoWhileStatementNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__statement_tests_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.DoWhileStatementNode,&#32;doWhileStatementNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00151"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1ac6fd4991930d0b3e2cd31b3f1f930bb5">00151</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1ac6fd4991930d0b3e2cd31b3f1f930bb5">ForeachStatementNode_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00152"/>00152 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;foreach&#32;(var&#32;item&#32;in&#32;list)&#32;{&#32;}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;foreachStatementNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_foreach_statement_node">ForeachStatementNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__statement_tests_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ForeachStatementNode,&#32;foreachStatementNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00161"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a506784f5dcd18a6775d4e4726cf05a94">00161</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a506784f5dcd18a6775d4e4726cf05a94">ForStatementNode_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;for&#32;(int&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;list.Count;&#32;i++)&#32;{&#32;}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;forStatementNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_for_statement_node">ForStatementNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__statement_tests_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ForStatementNode,&#32;forStatementNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00171"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1abfdce5a28b1db947080447a2b29a0112">00171</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1abfdce5a28b1db947080447a2b29a0112">IfStatementNode_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;if&#32;(false)&#32;{&#32;}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;ifStatementNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_if_statement_node">IfStatementNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__statement_tests_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.IfStatementNode,&#32;ifStatementNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00181"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a9a922ea76d98d74e2b20c0d80de224b3">00181</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a9a922ea76d98d74e2b20c0d80de224b3">LockStatementNode_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;lock&#32;(objectLock)&#32;{&#32;}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lockStatementNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_lock_statement_node">LockStatementNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__statement_tests_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.LockStatementNode,&#32;lockStatementNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00191"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a2c44f3e1810e1edc66bd705f1f0dcf88">00191</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a2c44f3e1810e1edc66bd705f1f0dcf88">NamespaceStatementNode_FileScope_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;namespace&#32;Luthetus.CompilerServices.CSharp.Tests.SmokeTests.Parsers;&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;namespaceStatementNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_namespace_statement_node">NamespaceStatementNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__statement_tests_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.NamespaceStatementNode,&#32;namespaceStatementNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00201"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1aca2d2187b6894f8da2546ce2900d2f8f">00201</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1aca2d2187b6894f8da2546ce2900d2f8f">NamespaceStatementNode_BlockScope_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;namespace&#32;Luthetus.CompilerServices.CSharp.Tests.SmokeTests.Parsers&#32;{&#32;}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;namespaceStatementNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_namespace_statement_node">NamespaceStatementNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__statement_tests_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.NamespaceStatementNode,&#32;namespaceStatementNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00211"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a9da119606ade984df0428315487fcc76">00211</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a9da119606ade984df0428315487fcc76">SwitchStatementNode_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(
<anchor xml:id="__statement_tests_8cs_source_1l00214"/>00214 <emphasis role="stringliteral">@&quot;switch&#32;(character)</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00215"/>00215 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00216"/>00216 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;case&#32;&apos;a&apos;:</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00217"/>00217 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00218"/>00218 <emphasis role="stringliteral">}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;switchStatementNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_switch_statement_node">SwitchStatementNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__statement_tests_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.SwitchStatementNode,&#32;switchStatementNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00225"/>00225 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00226"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1ab23f484795757c69959fb70cd9fe23ca">00226</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1ab23f484795757c69959fb70cd9fe23ca">TryStatementNode_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(
<anchor xml:id="__statement_tests_8cs_source_1l00229"/>00229 <emphasis role="stringliteral">@&quot;try</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00230"/>00230 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00231"/>00231 <emphasis role="stringliteral">}</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00232"/>00232 <emphasis role="stringliteral">catch&#32;(Exception&#32;e)</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00233"/>00233 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00234"/>00234 <emphasis role="stringliteral">}</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00235"/>00235 <emphasis role="stringliteral">finally</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00236"/>00236 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00237"/>00237 <emphasis role="stringliteral">}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00238"/>00238 
<anchor xml:id="__statement_tests_8cs_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;tryStatementNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_try_statement_node">TryStatementNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__statement_tests_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.TryStatementNode,&#32;tryStatementNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00245"/>00245 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00246"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a7f5432ade1bc8f3757a47eeb23d6116e">00246</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a7f5432ade1bc8f3757a47eeb23d6116e">WhileStatementNode_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;while&#32;(false)&#32;{&#32;}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;whileStatementNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_while_statement_node">WhileStatementNode</link>)topCodeBlock.GetChildList().Single();
<anchor xml:id="__statement_tests_8cs_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.WhileStatementNode,&#32;whileStatementNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00254"/>00254 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00255"/>00255 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00256"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a95db2d6f8e452edb74fec2942a71deed">00256</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a95db2d6f8e452edb74fec2942a71deed">VariableDeclaration_Keyword_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00257"/>00257 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;int&#32;aaa;&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(topCodeBlock,&#32;nameof(topCodeBlock));
<anchor xml:id="__statement_tests_8cs_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableDeclarationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_declaration_node">VariableDeclarationNode</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__statement_tests_8cs_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.VariableDeclarationNode,&#32;variableDeclarationNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00268"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1ac4610ca02e1c21b142137206ccfaf93d">00268</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1ac4610ca02e1c21b142137206ccfaf93d">VariableDeclaration_Identifier_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;Person&#32;aaa;&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(topCodeBlock,&#32;nameof(topCodeBlock));
<anchor xml:id="__statement_tests_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableDeclarationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_declaration_node">VariableDeclarationNode</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__statement_tests_8cs_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.VariableDeclarationNode,&#32;variableDeclarationNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00277"/>00277 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00278"/>00278 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00279"/>00279 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00280"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a9895ad59523d48e61fb2feb2fcaa9fbc">00280</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a9895ad59523d48e61fb2feb2fcaa9fbc">VariableDeclaration_Var_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00281"/>00281 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;var&#32;aaa;&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(topCodeBlock,&#32;nameof(topCodeBlock));
<anchor xml:id="__statement_tests_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableDeclarationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_declaration_node">VariableDeclarationNode</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__statement_tests_8cs_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.VariableDeclarationNode,&#32;variableDeclarationNode.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00289"/>00289 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00291"/>00291 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00292"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a193fa4a27de351c9d7689086c69adebb">00292</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a193fa4a27de351c9d7689086c69adebb">VariableDeclarationNodeAndAssignment_Var_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;var&#32;aaa&#32;=&#32;2;&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00295"/>00295 
<anchor xml:id="__statement_tests_8cs_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableDeclarationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_declaration_node">VariableDeclarationNode</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__statement_tests_8cs_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableAssignmentNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_assignment_expression_node">VariableAssignmentExpressionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__statement_tests_8cs_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.Equal(SyntaxKind.WhileStatementNode,&#32;whileStatementNode.SyntaxKind);</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00302"/>00302 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00303"/>00303 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00304"/>00304 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00305"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1ab153024119873c77cef723a23f656d0c">00305</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1ab153024119873c77cef723a23f656d0c">VariableDeclarationNodeAndAssignment_IdentifierToken_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00306"/>00306 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;Person&#32;aaa&#32;=&#32;2;&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00308"/>00308 
<anchor xml:id="__statement_tests_8cs_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableDeclarationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_declaration_node">VariableDeclarationNode</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__statement_tests_8cs_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableAssignmentNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_assignment_expression_node">VariableAssignmentExpressionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__statement_tests_8cs_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.Equal(SyntaxKind.WhileStatementNode,&#32;whileStatementNode.SyntaxKind);</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00315"/>00315 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00316"/>00316 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00317"/>00317 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00318"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a14909f3c7044850e4696a25d74ec6bbf">00318</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a14909f3c7044850e4696a25d74ec6bbf">VariableDeclarationNodeAndAssignment_KeywordToken_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00319"/>00319 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;int&#32;aaa&#32;=&#32;2;&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00321"/>00321 
<anchor xml:id="__statement_tests_8cs_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableDeclarationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_declaration_node">VariableDeclarationNode</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__statement_tests_8cs_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableAssignmentNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_assignment_expression_node">VariableAssignmentExpressionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__statement_tests_8cs_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.Equal(SyntaxKind.WhileStatementNode,&#32;whileStatementNode.SyntaxKind);</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00328"/>00328 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00329"/>00329 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00330"/>00330 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00331"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1ae9c54a2e0c058da68ceaf30f5ff9c1ba">00331</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1ae9c54a2e0c058da68ceaf30f5ff9c1ba">VariableDeclarationNodeAndAssignment_Property_Auto_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00332"/>00332 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;int&#32;Aaa&#32;{&#32;get;&#32;set;&#32;}&#32;=&#32;2;&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00334"/>00334 
<anchor xml:id="__statement_tests_8cs_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableDeclarationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_declaration_node">VariableDeclarationNode</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__statement_tests_8cs_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableAssignmentNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_assignment_expression_node">VariableAssignmentExpressionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__statement_tests_8cs_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.Equal(SyntaxKind.WhileStatementNode,&#32;whileStatementNode.SyntaxKind);</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00341"/>00341 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00342"/>00342 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00343"/>00343 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00344"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1adc598d046533579bbfb2dcf5136fcf95">00344</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1adc598d046533579bbfb2dcf5136fcf95">VariableDeclarationNodeAndAssignment_Property_ExpressionBound_Test</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00345"/>00345 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;int&#32;Aaa&#32;=&gt;&#32;2;&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00347"/>00347 
<anchor xml:id="__statement_tests_8cs_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(topCodeBlock);
<anchor xml:id="__statement_tests_8cs_source_1l00351"/>00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableDeclarationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_declaration_node">VariableDeclarationNode</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__statement_tests_8cs_source_1l00353"/>00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableAssignmentNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_assignment_expression_node">VariableAssignmentExpressionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__statement_tests_8cs_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.Equal(SyntaxKind.WhileStatementNode,&#32;whileStatementNode.SyntaxKind);</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00356"/>00356 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00357"/>00357 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00358"/>00358 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00359"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1abfe7f265b9162ccba26b01067b5ef152">00359</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1abfe7f265b9162ccba26b01067b5ef152">PropertyDeclaration</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00360"/>00360 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;string&#32;FirstName&#32;{&#32;get;&#32;set;&#32;}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00362"/>00362 
<anchor xml:id="__statement_tests_8cs_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableDeclarationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_declaration_node">VariableDeclarationNode</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__statement_tests_8cs_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_enums_1a4cbcf68aea676ee33001aa4912ffbc7e">VariableKind</link>.Property,&#32;variableDeclarationNode.VariableKind);
<anchor xml:id="__statement_tests_8cs_source_1l00367"/>00367 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00368"/>00368 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00369"/>00369 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00370"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1adabc53cdc9e17695336497c6888665a6">00370</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1adabc53cdc9e17695336497c6888665a6">PropertyDeclaration_Initialization</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00371"/>00371 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;string&#32;FirstName&#32;{&#32;get;&#32;set;&#32;}&#32;=&#32;&quot;&quot;John&quot;&quot;;&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00373"/>00373 
<anchor xml:id="__statement_tests_8cs_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableDeclarationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_declaration_node">VariableDeclarationNode</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__statement_tests_8cs_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableAssignmentNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_assignment_expression_node">VariableAssignmentExpressionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__statement_tests_8cs_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.Equal(SyntaxKind.WhileStatementNode,&#32;whileStatementNode.SyntaxKind);</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00380"/>00380 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00381"/>00381 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00382"/>00382 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00383"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a70e405a877b2855244dc2d5fec520009">00383</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a70e405a877b2855244dc2d5fec520009">PropertyDeclaration_ExpressionBound</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00384"/>00384 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;string&#32;FirstName&#32;=&gt;&#32;&quot;&quot;John&quot;&quot;;&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00386"/>00386 
<anchor xml:id="__statement_tests_8cs_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableDeclarationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_declaration_node">VariableDeclarationNode</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__statement_tests_8cs_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableAssignmentNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_assignment_expression_node">VariableAssignmentExpressionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__statement_tests_8cs_source_1l00391"/>00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.Equal(SyntaxKind.WhileStatementNode,&#32;whileStatementNode.SyntaxKind);</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00393"/>00393 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00394"/>00394 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00395"/>00395 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00396"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a7aac4c230bda644058cf3cfa0ec1f651">00396</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a7aac4c230bda644058cf3cfa0ec1f651">PropertyDeclaration_AccessModifiers</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00397"/>00397 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;string&#32;FirstName&#32;{&#32;get;&#32;private&#32;set;&#32;}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00399"/>00399 
<anchor xml:id="__statement_tests_8cs_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00402"/>00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableDeclarationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_declaration_node">VariableDeclarationNode</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__statement_tests_8cs_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableAssignmentNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_assignment_expression_node">VariableAssignmentExpressionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__statement_tests_8cs_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.Equal(SyntaxKind.WhileStatementNode,&#32;whileStatementNode.SyntaxKind);</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00406"/>00406 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00407"/>00407 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00408"/>00408 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00409"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1af9b40122a903b19d8e0c80f0f0941837">00409</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1af9b40122a903b19d8e0c80f0f0941837">PropertyDeclaration_GetterExpression_SetterBlock</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00410"/>00410 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;public&#32;string&#32;FirstName&#32;{&#32;get&#32;=&gt;&#32;_firstName;&#32;set&#32;{&#32;_firstName&#32;=&#32;value;&#32;}&#32;}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00412"/>00412 
<anchor xml:id="__statement_tests_8cs_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00415"/>00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableDeclarationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_declaration_node">VariableDeclarationNode</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__statement_tests_8cs_source_1l00416"/>00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableAssignmentNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_assignment_expression_node">VariableAssignmentExpressionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__statement_tests_8cs_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.Equal(SyntaxKind.WhileStatementNode,&#32;whileStatementNode.SyntaxKind);</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00419"/>00419 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00420"/>00420 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00421"/>00421 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__statement_tests_8cs_source_1l00422"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a7c0957c8a9e7d6bd1a006b370aef4c97">00422</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1a7c0957c8a9e7d6bd1a006b370aef4c97">Attribute</link>()
<anchor xml:id="__statement_tests_8cs_source_1l00423"/>00423 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00424"/>00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_namespacetest">test</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_parsers_1_1_statement_tests_1_1_test">Test</link>(<emphasis role="stringliteral">@&quot;[Inject]&#32;private&#32;IDialogService&#32;DialogService&#32;{&#32;get;&#32;set;&#32;}&#32;=&#32;null!;&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00425"/>00425 
<anchor xml:id="__statement_tests_8cs_source_1l00426"/>00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;topCodeBlock&#32;=&#32;<link linkend="_namespacetest">test</link>.CompilationUnit.RootCodeBlockNode;
<anchor xml:id="__statement_tests_8cs_source_1l00427"/>00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00428"/>00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableDeclarationNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_declaration_node">VariableDeclarationNode</link>)topCodeBlock.GetChildList()[0];
<anchor xml:id="__statement_tests_8cs_source_1l00429"/>00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;variableAssignmentNode&#32;=&#32;(<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_nodes_1_1_variable_assignment_expression_node">VariableAssignmentExpressionNode</link>)topCodeBlock.GetChildList()[1];
<anchor xml:id="__statement_tests_8cs_source_1l00430"/>00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00431"/>00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.Equal(SyntaxKind.WhileStatementNode,&#32;whileStatementNode.SyntaxKind);</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00432"/>00432 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00433"/>00433 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00434"/>00434 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;WriteChildrenIndented(<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node">ISyntaxNode</link>&#32;node,&#32;<emphasis role="keywordtype">string</emphasis>&#32;name&#32;=&#32;<emphasis role="stringliteral">&quot;node&quot;</emphasis>)
<anchor xml:id="__statement_tests_8cs_source_1l00435"/>00435 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine($<emphasis role="stringliteral">&quot;foreach&#32;(var&#32;child&#32;in&#32;{name}.GetChildList())&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;child&#32;<emphasis role="keywordflow">in</emphasis>&#32;node.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node_1a73d81f1c4e42db7e80bfdd4db97c10fe">GetChildList</link>())
<anchor xml:id="__statement_tests_8cs_source_1l00438"/>00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00439"/>00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;+&#32;child.SyntaxKind);
<anchor xml:id="__statement_tests_8cs_source_1l00440"/>00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00441"/>00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine();
<anchor xml:id="__statement_tests_8cs_source_1l00442"/>00442 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00443"/>00443 &#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00444"/>00444 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;WriteChildrenIndentedRecursive(<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node">ISyntaxNode</link>&#32;node,&#32;<emphasis role="keywordtype">string</emphasis>&#32;name&#32;=&#32;<emphasis role="stringliteral">&quot;node&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;indentation&#32;=&#32;0)
<anchor xml:id="__statement_tests_8cs_source_1l00445"/>00445 &#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00446"/>00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;indentationStringBuilder&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__statement_tests_8cs_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;indentation;&#32;i++)
<anchor xml:id="__statement_tests_8cs_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indentationStringBuilder.Append(<emphasis role="charliteral">&apos;\t&apos;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00450"/>00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine($<emphasis role="stringliteral">&quot;{indentationStringBuilder.ToString()}{node.SyntaxKind}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00452"/>00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;the&#32;child&#32;tokens</emphasis>
<anchor xml:id="__statement_tests_8cs_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indentationStringBuilder.Append(<emphasis role="charliteral">&apos;\t&apos;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00454"/>00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;childIndentation&#32;=&#32;indentationStringBuilder.ToString();
<anchor xml:id="__statement_tests_8cs_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;child&#32;<emphasis role="keywordflow">in</emphasis>&#32;node.<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node_1a73d81f1c4e42db7e80bfdd4db97c10fe">GetChildList</link>())
<anchor xml:id="__statement_tests_8cs_source_1l00457"/>00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00458"/>00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(child&#32;is&#32;<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_node">ISyntaxNode</link>&#32;syntaxNode)
<anchor xml:id="__statement_tests_8cs_source_1l00459"/>00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00460"/>00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteChildrenIndentedRecursive(syntaxNode,&#32;<emphasis role="stringliteral">&quot;node&quot;</emphasis>,&#32;indentation&#32;+&#32;1);
<anchor xml:id="__statement_tests_8cs_source_1l00461"/>00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00462"/>00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(child&#32;is&#32;<link linkend="_interface_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_i_syntax_token">ISyntaxToken</link>&#32;syntaxToken)
<anchor xml:id="__statement_tests_8cs_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__statement_tests_8cs_source_1l00464"/>00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine($<emphasis role="stringliteral">&quot;{childIndentation}{child.SyntaxKind}__{syntaxToken.TextSpan.GetText()}&quot;</emphasis>);
<anchor xml:id="__statement_tests_8cs_source_1l00465"/>00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00466"/>00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00467"/>00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__statement_tests_8cs_source_1l00468"/>00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(indentation&#32;==&#32;0)
<anchor xml:id="__statement_tests_8cs_source_1l00469"/>00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine();
<anchor xml:id="__statement_tests_8cs_source_1l00470"/>00470 &#32;&#32;&#32;&#32;}
<anchor xml:id="__statement_tests_8cs_source_1l00471"/>00471 }
</programlisting></section>
