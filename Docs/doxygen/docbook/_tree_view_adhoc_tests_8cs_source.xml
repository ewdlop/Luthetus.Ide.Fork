<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__tree_view_adhoc_tests_8cs_source" xml:lang="en-US">
<title>TreeViewAdhocTests.cs</title>
<indexterm><primary>Source/Tests/Common/Basis/TreeViews/Models/TreeViewAdhocTests.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_component_renderers_1_1_models">Luthetus.Common.RazorLib.ComponentRenderers.Models</link>;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_keys_1_1_models">Luthetus.Common.RazorLib.Keys.Models</link>;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00003"/>00003 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_notifications_1_1_displays">Luthetus.Common.RazorLib.Notifications.Displays</link>;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00004"/>00004 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_displays_1_1_utils">Luthetus.Common.RazorLib.TreeViews.Displays.Utils</link>;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00005"/>00005 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models">Luthetus.Common.RazorLib.TreeViews.Models</link>;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00006"/>00006 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_watch_windows_1_1_displays">Luthetus.Common.RazorLib.WatchWindows.Displays</link>;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00007"/>00007 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_watch_windows_1_1_models">Luthetus.Common.RazorLib.WatchWindows.Models</link>;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00008"/>00008 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00009"/>00009 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models">Luthetus.Common.Tests.Basis.TreeViews.Models</link>;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00010"/>00010 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00014"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests">00014</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests">TreeViewAdhocTests</link>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00015"/>00015 {
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00020"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests_1a15105a7a5164ee4b69853f758d486d32">00020</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests_1a15105a7a5164ee4b69853f758d486d32">Constructor</link>()
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;item&#32;=&#32;<emphasis role="keywordtype">byte</emphasis>.MinValue;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhoc&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(item);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00024"/>00024 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(item,&#32;treeViewAdhoc.UntypedItem);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(typeof(<emphasis role="keywordtype">byte</emphasis>),&#32;treeViewAdhoc.ItemType);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(treeViewAdhoc.Parent);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(treeViewAdhoc.ChildList);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;treeViewAdhoc.IndexAmongSiblings);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(treeViewAdhoc.IsRoot);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(treeViewAdhoc.IsHidden);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(treeViewAdhoc.IsExpandable);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(treeViewAdhoc.IsExpanded);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotEqual(Key&lt;TreeViewChanged&gt;.Empty,&#32;treeViewAdhoc.TreeViewChangedKey);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotEqual(Key&lt;TreeViewNoType&gt;.Empty,&#32;treeViewAdhoc.Key);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(item,&#32;treeViewAdhoc.Item);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00038"/>00038 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00043"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests_1aab54b924a75c2624a742f89dbf0534ff">00043</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests_1aab54b924a75c2624a742f89dbf0534ff">Equals_Test</link>()
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Same&#32;keys,&#32;different&#32;item</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;key&#32;=&#32;Key&lt;TreeViewNoType&gt;.NewKey();
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00048"/>00048 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhocOne&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(<emphasis role="keywordtype">byte</emphasis>.MinValue)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&#32;=&#32;key
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00053"/>00053 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhocTwo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(<emphasis role="keywordtype">byte</emphasis>.MaxValue)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&#32;=&#32;key
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00058"/>00058 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(treeViewAdhocOne,&#32;treeViewAdhocTwo);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00061"/>00061 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Same&#32;keys,&#32;same&#32;item</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;key&#32;=&#32;Key&lt;TreeViewNoType&gt;.NewKey();
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;item&#32;=&#32;<emphasis role="keywordtype">byte</emphasis>.MinValue;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00066"/>00066 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhocOne&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(item)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&#32;=&#32;key
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00071"/>00071 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhocTwo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(item)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&#32;=&#32;key
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00076"/>00076 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(treeViewAdhocOne,&#32;treeViewAdhocTwo);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00079"/>00079 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Different&#32;keys,&#32;different&#32;item</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhocOne&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(<emphasis role="keywordtype">byte</emphasis>.MinValue)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;default&#32;value&#32;is&#32;equivalent,&#32;but&#32;its&#32;written&#32;here&#32;to&#32;be&#32;explicit</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&#32;=&#32;Key&lt;TreeViewNoType&gt;.NewKey()
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00087"/>00087 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhocTwo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(<emphasis role="keywordtype">byte</emphasis>.MaxValue)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;default&#32;value&#32;is&#32;equivalent,&#32;but&#32;its&#32;written&#32;here&#32;to&#32;be&#32;explicit</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&#32;=&#32;Key&lt;TreeViewNoType&gt;.NewKey()
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00093"/>00093 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotEqual(treeViewAdhocOne,&#32;treeViewAdhocTwo);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Different&#32;keys,&#32;same&#32;item</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;item&#32;=&#32;<emphasis role="keywordtype">byte</emphasis>.MinValue;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00100"/>00100 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhocOne&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(item)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;default&#32;value&#32;is&#32;equivalent,&#32;but&#32;its&#32;written&#32;here&#32;to&#32;be&#32;explicit</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&#32;=&#32;Key&lt;TreeViewNoType&gt;.NewKey()
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00106"/>00106 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhocTwo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(item)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;default&#32;value&#32;is&#32;equivalent,&#32;but&#32;its&#32;written&#32;here&#32;to&#32;be&#32;explicit</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&#32;=&#32;Key&lt;TreeViewNoType&gt;.NewKey()
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00112"/>00112 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotEqual(treeViewAdhocOne,&#32;treeViewAdhocTwo);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00116"/>00116 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00121"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests_1ac2ec9e04c1e3f7eb1152290257b5dc41">00121</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests_1ac2ec9e04c1e3f7eb1152290257b5dc41">GetHashCode_Test</link>()
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Same&#32;keys,&#32;different&#32;item</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;key&#32;=&#32;Key&lt;TreeViewNoType&gt;.NewKey();
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00126"/>00126 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhocOne&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(<emphasis role="keywordtype">byte</emphasis>.MinValue)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&#32;=&#32;key
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00131"/>00131 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhocTwo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(<emphasis role="keywordtype">byte</emphasis>.MaxValue)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&#32;=&#32;key
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00136"/>00136 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(treeViewAdhocOne.GetHashCode(),&#32;treeViewAdhocTwo.GetHashCode());
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00139"/>00139 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Same&#32;keys,&#32;same&#32;item</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;key&#32;=&#32;Key&lt;TreeViewNoType&gt;.NewKey();
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;item&#32;=&#32;<emphasis role="keywordtype">byte</emphasis>.MinValue;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00144"/>00144 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhocOne&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(item)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&#32;=&#32;key
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00149"/>00149 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhocTwo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(item)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&#32;=&#32;key
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00154"/>00154 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(treeViewAdhocOne.GetHashCode(),&#32;treeViewAdhocTwo.GetHashCode());
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00157"/>00157 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Different&#32;keys,&#32;different&#32;item</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhocOne&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(<emphasis role="keywordtype">byte</emphasis>.MinValue)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;default&#32;value&#32;is&#32;equivalent,&#32;but&#32;its&#32;written&#32;here&#32;to&#32;be&#32;explicit</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&#32;=&#32;Key&lt;TreeViewNoType&gt;.NewKey()
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00165"/>00165 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhocTwo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(<emphasis role="keywordtype">byte</emphasis>.MaxValue)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;default&#32;value&#32;is&#32;equivalent,&#32;but&#32;its&#32;written&#32;here&#32;to&#32;be&#32;explicit</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&#32;=&#32;Key&lt;TreeViewNoType&gt;.NewKey()
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00171"/>00171 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotEqual(treeViewAdhocOne.GetHashCode(),&#32;treeViewAdhocTwo.GetHashCode());
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00174"/>00174 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Different&#32;keys,&#32;same&#32;item</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;item&#32;=&#32;<emphasis role="keywordtype">byte</emphasis>.MinValue;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00178"/>00178 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhocOne&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(item)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;default&#32;value&#32;is&#32;equivalent,&#32;but&#32;its&#32;written&#32;here&#32;to&#32;be&#32;explicit</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&#32;=&#32;Key&lt;TreeViewNoType&gt;.NewKey()
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00184"/>00184 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhocTwo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>(item)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;default&#32;value&#32;is&#32;equivalent,&#32;but&#32;its&#32;written&#32;here&#32;to&#32;be&#32;explicit</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&#32;=&#32;Key&lt;TreeViewNoType&gt;.NewKey()
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00190"/>00190 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotEqual(treeViewAdhocOne.GetHashCode(),&#32;treeViewAdhocTwo.GetHashCode());
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00194"/>00194 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00199"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests_1ac6d22bc6d98e508cb66d5f9a7120c76b">00199</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests_1ac6d22bc6d98e508cb66d5f9a7120c76b">ConstructTreeViewAdhocA</link>()
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhoc&#32;=&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_1a3dd148b2cb6390af05ed84da0ad21857">ConstructTreeViewAdhoc</link>();
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00202"/>00202 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="keywordtype">byte</emphasis>.MinValue,&#32;treeViewAdhoc.Item);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(treeViewAdhoc.Parent);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(treeViewAdhoc.IsExpandable);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(treeViewAdhoc.IsExpanded);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;treeViewAdhoc.IndexAmongSiblings);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(treeViewAdhoc.IsRoot);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(treeViewAdhoc.IsHidden);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotEqual(Key&lt;TreeViewChanged&gt;.Empty,&#32;treeViewAdhoc.TreeViewChangedKey);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00212"/>00212 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00216"/>00216 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00217"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests_1ad19f77f8d1ca77855a4a7a7eaf5069d5">00217</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests_1ad19f77f8d1ca77855a4a7a7eaf5069d5">ConstructTreeViewAdhocB</link>()
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00218"/>00218 &#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;commonTreeViews&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_component_renderers_1_1_models_1_1_common_tree_views">CommonTreeViews</link>(
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_displays_1_1_utils_1_1_tree_view_exception_display">TreeViewExceptionDisplay</link>),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_watch_windows_1_1_displays_1_1_tree_view_missing_renderer_fallback_display">TreeViewMissingRendererFallbackDisplay</link>),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_watch_windows_1_1_displays_1_1_tree_view_text_display">TreeViewTextDisplay</link>),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_watch_windows_1_1_displays_1_1_tree_view_reflection_display">TreeViewReflectionDisplay</link>),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_watch_windows_1_1_displays_1_1_tree_view_properties_display">TreeViewPropertiesDisplay</link>),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_watch_windows_1_1_displays_1_1_tree_view_interface_implementation_display">TreeViewInterfaceImplementationDisplay</link>),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_watch_windows_1_1_displays_1_1_tree_view_fields_display">TreeViewFieldsDisplay</link>),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_displays_1_1_utils_1_1_tree_view_exception_display">TreeViewExceptionDisplay</link>),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_watch_windows_1_1_displays_1_1_tree_view_enumerable_display">TreeViewEnumerableDisplay</link>));
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00229"/>00229 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;commonComponentRenderers&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_component_renderers_1_1_models_1_1_common_component_renderers">CommonComponentRenderers</link>(
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_notifications_1_1_displays_1_1_common_error_notification_display">CommonErrorNotificationDisplay</link>),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_notifications_1_1_displays_1_1_common_informative_notification_display">CommonInformativeNotificationDisplay</link>),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_notifications_1_1_displays_1_1_common_progress_notification_display">CommonProgressNotificationDisplay</link>),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;commonTreeViews);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00235"/>00235 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;childOneText&#32;=&#32;<emphasis role="stringliteral">&quot;Hello&#32;World!&quot;</emphasis>;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;childTwoText&#32;=&#32;<emphasis role="stringliteral">&quot;Goodbye&#32;World!&quot;</emphasis>;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;childThreeText&#32;=&#32;<emphasis role="stringliteral">&quot;Salutations&#32;World!&quot;</emphasis>;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00239"/>00239 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0&#32;children</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhoc&#32;=&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_1a3dd148b2cb6390af05ed84da0ad21857">ConstructTreeViewAdhoc</link>(<emphasis role="keyword">new</emphasis>&#32;List&lt;TreeViewNoType&gt;().ToArray());
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertTreeViewAdhocIsValid(treeViewAdhoc);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00244"/>00244 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(treeViewAdhoc.ChildList);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00247"/>00247 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1&#32;children</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhoc&#32;=&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_1a3dd148b2cb6390af05ed84da0ad21857">ConstructTreeViewAdhoc</link>(<emphasis role="keyword">new</emphasis>&#32;List&lt;TreeViewNoType&gt;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_watch_windows_1_1_models_1_1_tree_view_text">TreeViewText</link>(childOneText,&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">false</emphasis>,&#32;commonComponentRenderers),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}.ToArray());
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00254"/>00254 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertTreeViewAdhocIsValid(treeViewAdhoc);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00256"/>00256 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Single(treeViewAdhoc.ChildList);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00258"/>00258 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;childOne&#32;=&#32;treeViewAdhoc.ChildList[0];
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(childOneText,&#32;(<emphasis role="keywordtype">string</emphasis>)childOne.UntypedItem);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00262"/>00262 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2&#32;children</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhoc&#32;=&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_1a3dd148b2cb6390af05ed84da0ad21857">ConstructTreeViewAdhoc</link>(<emphasis role="keyword">new</emphasis>&#32;List&lt;TreeViewNoType&gt;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_watch_windows_1_1_models_1_1_tree_view_text">TreeViewText</link>(childOneText,&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">false</emphasis>,&#32;commonComponentRenderers),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_watch_windows_1_1_models_1_1_tree_view_text">TreeViewText</link>(childTwoText,&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">false</emphasis>,&#32;commonComponentRenderers),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}.ToArray());
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00270"/>00270 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertTreeViewAdhocIsValid(treeViewAdhoc);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00272"/>00272 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;treeViewAdhoc.ChildList.Count);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00274"/>00274 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;childOne&#32;=&#32;treeViewAdhoc.ChildList[0];
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(childOneText,&#32;(<emphasis role="keywordtype">string</emphasis>)childOne.UntypedItem);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00277"/>00277 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;childTwo&#32;=&#32;treeViewAdhoc.ChildList[1];
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(childTwoText,&#32;(<emphasis role="keywordtype">string</emphasis>)childTwo.UntypedItem);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00281"/>00281 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3&#32;children</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhoc&#32;=&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_1a3dd148b2cb6390af05ed84da0ad21857">ConstructTreeViewAdhoc</link>(<emphasis role="keyword">new</emphasis>&#32;List&lt;TreeViewNoType&gt;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_watch_windows_1_1_models_1_1_tree_view_text">TreeViewText</link>(childOneText,&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">false</emphasis>,&#32;commonComponentRenderers),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_watch_windows_1_1_models_1_1_tree_view_text">TreeViewText</link>(childTwoText,&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">false</emphasis>,&#32;commonComponentRenderers),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_watch_windows_1_1_models_1_1_tree_view_text">TreeViewText</link>(childThreeText,&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">false</emphasis>,&#32;commonComponentRenderers),
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}.ToArray());
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00290"/>00290 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssertTreeViewAdhocIsValid(treeViewAdhoc);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00292"/>00292 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(3,&#32;treeViewAdhoc.ChildList.Count);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00294"/>00294 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;childOne&#32;=&#32;treeViewAdhoc.ChildList[0];
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(childOneText,&#32;(<emphasis role="keywordtype">string</emphasis>)childOne.UntypedItem);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00297"/>00297 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;childTwo&#32;=&#32;treeViewAdhoc.ChildList[1];
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(childTwoText,&#32;(<emphasis role="keywordtype">string</emphasis>)childTwo.UntypedItem);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00300"/>00300 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;childThree&#32;=&#32;treeViewAdhoc.ChildList[2];
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(childThreeText,&#32;(<emphasis role="keywordtype">string</emphasis>)childThree.UntypedItem);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00304"/>00304 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AssertTreeViewAdhocIsValid(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>&#32;localTreeViewAdhoc)
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="keywordtype">byte</emphasis>.MinValue,&#32;localTreeViewAdhoc.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_with_type-1-g_1a4f46d99a34756894b183f9ce601825bc">Item</link>);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(localTreeViewAdhoc.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_no_type_1aef3093ce691044a11c5b9969b4b2c29a">Parent</link>);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(localTreeViewAdhoc.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_no_type_1a5fde962c0ca09119fb76ab240def77f3">IsExpandable</link>);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(localTreeViewAdhoc.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_no_type_1a9410caf8779c9f16b53376bd859e854c">IsExpanded</link>);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;localTreeViewAdhoc.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_no_type_1a1378ceb01f612cfa05a0e439af7b6b6f">IndexAmongSiblings</link>);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(localTreeViewAdhoc.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_no_type_1a76d37dee1ac20cceb881b0c9c9c99e8b">IsRoot</link>);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(localTreeViewAdhoc.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_no_type_1a01784c165b595fe877a4b24069734fe5">IsHidden</link>);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotEqual(Key&lt;TreeViewChanged&gt;.Empty,&#32;localTreeViewAdhoc.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_no_type_1a77af2f1c56f0a2895b08d1c7622e372d">TreeViewChangedKey</link>);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00316"/>00316 &#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00317"/>00317 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00321"/>00321 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00322"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests_1a8731b5598fc3745df665ce8cc24d637a">00322</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests_1a8731b5598fc3745df665ce8cc24d637a">GetTreeViewRenderer</link>()
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00323"/>00323 &#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhoc&#32;=&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_1a3dd148b2cb6390af05ed84da0ad21857">ConstructTreeViewAdhoc</link>();
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00325"/>00325 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewRenderer&#32;=&#32;treeViewAdhoc.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_1a6052bf299a007f9f1819db5d0b5fdd61">GetTreeViewRenderer</link>();
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00327"/>00327 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_displays_1_1_utils_1_1_tree_view_adhoc_display">TreeViewAdhocDisplay</link>),&#32;treeViewRenderer.DynamicComponentType);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00329"/>00329 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(treeViewRenderer.DynamicComponentParameters);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Single(treeViewRenderer.DynamicComponentParameters!);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00332"/>00332 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;keyValuePair&#32;=&#32;treeViewRenderer.DynamicComponentParameters!.Single();
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00334"/>00334 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(nameof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_displays_1_1_utils_1_1_tree_view_adhoc_display">TreeViewAdhocDisplay</link>.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_displays_1_1_utils_1_1_tree_view_adhoc_display_1af23bb1cf7c9e4648a1b4ed42ad771415">TreeViewNoTypeAdhoc</link>),&#32;keyValuePair.Key);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(treeViewAdhoc,&#32;keyValuePair.Value);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00337"/>00337 &#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00338"/>00338 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00342"/>00342 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00343"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests_1ae6865599619980618aeb814470c32fae">00343</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests_1ae6865599619980618aeb814470c32fae">LoadChildListAsync</link>()
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00344"/>00344 &#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhoc&#32;=&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_1a3dd148b2cb6390af05ed84da0ad21857">ConstructTreeViewAdhoc</link>();
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00346"/>00346 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(treeViewAdhoc.ChildList);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00348"/>00348 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TreeViewAdhoc.LoadChildListAsync()&#32;should&#32;do&#32;nothing</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;treeViewAdhoc.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_1a5615ceb0bea02581e7a489fa47f12126">LoadChildListAsync</link>();
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00351"/>00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(treeViewAdhoc.ChildList);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00353"/>00353 &#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00354"/>00354 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00358"/>00358 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00359"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests_1a91ced359adc8a2468beb81abf48232b8">00359</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_tests_1a91ced359adc8a2468beb81abf48232b8">RemoveRelatedFilesFromParent</link>()
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00360"/>00360 &#32;&#32;&#32;&#32;{
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;treeViewAdhoc&#32;=&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc">TreeViewAdhoc</link>.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_1a3dd148b2cb6390af05ed84da0ad21857">ConstructTreeViewAdhoc</link>();
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00362"/>00362 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(treeViewAdhoc.ChildList);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00364"/>00364 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TreeViewAdhoc.RemoveRelatedFilesFromParent(...)&#32;should&#32;do&#32;nothing</emphasis>
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;treeViewAdhoc.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_tree_views_1_1_models_1_1_tree_view_adhoc_1aec905622d634fa784e09bd0ef6827c4f">RemoveRelatedFilesFromParent</link>(<emphasis role="keyword">new</emphasis>&#32;List&lt;TreeViewNoType&gt;&#32;{&#32;treeViewAdhoc&#32;});
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00367"/>00367 
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(treeViewAdhoc.ChildList);
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00369"/>00369 &#32;&#32;&#32;&#32;}
<anchor xml:id="__tree_view_adhoc_tests_8cs_source_1l00370"/>00370 }
</programlisting></section>
