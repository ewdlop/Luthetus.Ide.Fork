<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__adhoc_test_8_data_8cs_source" xml:lang="en-US">
<title>AdhocTest.Data.cs</title>
<indexterm><primary>Source/Tests/TextEditor/Adhoc/AdhocTest.Data.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__adhoc_test_8_data_8cs_source_1l00001"/><link linkend="_namespace_luthetus_1_1_text_editor_1_1_tests_1_1_adhoc">00001</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_tests_1_1_adhoc">Luthetus.TextEditor.Tests.Adhoc</link>;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00002"/>00002 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00003"/><link linkend="_class_luthetus_1_1_text_editor_1_1_tests_1_1_adhoc_1_1_adhoc_test">00003</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">partial&#32;class&#32;</emphasis><link linkend="_class_luthetus_1_1_text_editor_1_1_tests_1_1_adhoc_1_1_adhoc_test">AdhocTest</link>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00004"/>00004 {
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00005"/><link linkend="_class_luthetus_1_1_text_editor_1_1_tests_1_1_adhoc_1_1_adhoc_test_1a21674b19a4eea348351e41f0a732da9e">00005</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;<link linkend="_class_luthetus_1_1_text_editor_1_1_tests_1_1_adhoc_1_1_adhoc_test_1a21674b19a4eea348351e41f0a732da9e">_bigString</link>&#32;=&#32;<emphasis role="stringliteral">@&quot;using&#32;Luthetus.TextEditor.RazorLib.Lexers.Models;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00006"/>00006 <emphasis role="stringliteral">using&#32;Luthetus.TextEditor.RazorLib.TextEditors.Models;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00007"/>00007 <emphasis role="stringliteral">using&#32;Luthetus.TextEditor.RazorLib.CompilerServices.GenericLexer.Decoration;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00008"/>00008 <emphasis role="stringliteral">using&#32;Fluxor;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00009"/>00009 <emphasis role="stringliteral">using&#32;Luthetus.Common.RazorLib.BackgroundTasks.Models;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00010"/>00010 <emphasis role="stringliteral">using&#32;Luthetus.Common.RazorLib.Installations.Models;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00011"/>00011 <emphasis role="stringliteral">using&#32;Luthetus.Common.RazorLib.Keys.Models;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00012"/>00012 <emphasis role="stringliteral">using&#32;Luthetus.Common.RazorLib.Misc;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00013"/>00013 <emphasis role="stringliteral">using&#32;Luthetus.TextEditor.RazorLib.CompilerServices.Interfaces;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00014"/>00014 <emphasis role="stringliteral">using&#32;Luthetus.TextEditor.RazorLib.Decorations.Models;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00015"/>00015 <emphasis role="stringliteral">using&#32;Microsoft.Extensions.DependencyInjection;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00016"/>00016 <emphasis role="stringliteral">using&#32;Microsoft.JSInterop;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00017"/>00017 <emphasis role="stringliteral">using&#32;System.Collections.Immutable;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00018"/>00018 <emphasis role="stringliteral">using&#32;Luthetus.Ide.RazorLib.CompilerServices.Models;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00019"/>00019 <emphasis role="stringliteral">using&#32;Luthetus.Ide.RazorLib.Decorations;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00020"/>00020 <emphasis role="stringliteral">using&#32;Luthetus.Ide.RazorLib.Installations.Models;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00021"/>00021 <emphasis role="stringliteral">using&#32;Luthetus.TextEditor.RazorLib.Rows.Models;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00022"/>00022 <emphasis role="stringliteral">using&#32;Luthetus.CompilerServices.CSharp.CompilerServiceCase;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00023"/>00023 <emphasis role="stringliteral">using&#32;Luthetus.TextEditor.RazorLib.CompilerServices.Syntax;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00024"/>00024 <emphasis role="stringliteral">using&#32;Luthetus.TextEditor.RazorLib;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00025"/>00025 <emphasis role="stringliteral">using&#32;Luthetus.TextEditor.RazorLib.Cursors.Models;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00026"/>00026 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00027"/>00027 <emphasis role="stringliteral">namespace&#32;Luthetus.TextEditor.Tests.Adhoc;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00028"/>00028 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00029"/>00029 <emphasis role="stringliteral">public&#32;partial&#32;class&#32;AdhocTest</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00030"/>00030 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00031"/>00031 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;[Fact]</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00032"/>00032 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;public&#32;void&#32;Why_Is_Command_Cut_Very_Slow()</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00033"/>00033 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00034"/>00034 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;model&#32;=&#32;new&#32;TextEditorModel(</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00035"/>00035 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new&#32;ResourceUri(&quot;&quot;/unitTesting.cs&quot;&quot;),</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00036"/>00036 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DateTime.UtcNow,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00037"/>00037 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExtensionNoPeriodFacts.C_SHARP_CLASS,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00038"/>00038 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string.Empty,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00039"/>00039 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;null,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00040"/>00040 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;null);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00041"/>00041 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00042"/>00042 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;modelModifier&#32;=&#32;new&#32;TextEditorModelModifier(model);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00043"/>00043 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00044"/>00044 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00045"/>00045 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;[Fact]</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00046"/>00046 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;public&#32;void&#32;Insert_Into_Empty_Model_A_LetterOrDigit()</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00047"/>00047 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00048"/>00048 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;model&#32;=&#32;new&#32;TextEditorModel(</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00049"/>00049 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new&#32;ResourceUri(&quot;&quot;/unitTesting.cs&quot;&quot;),</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00050"/>00050 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DateTime.UtcNow,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00051"/>00051 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExtensionNoPeriodFacts.C_SHARP_CLASS,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00052"/>00052 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string.Empty,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00053"/>00053 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;null,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00054"/>00054 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;null);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00055"/>00055 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00056"/>00056 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;modelModifier&#32;=&#32;new&#32;TextEditorModelModifier(model);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00057"/>00057 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00058"/>00058 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Before-assertions</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00059"/>00059 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00060"/>00060 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(model.RichCharacterList);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00061"/>00061 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00062"/>00062 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;model.LineCount);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00063"/>00063 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileLineEnd&#32;=&#32;model.LineEndList.Single();</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00064"/>00064 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.EndOfFile,&#32;endOfFileLineEnd.LineEndKind);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00065"/>00065 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;endOfFileLineEnd.StartPositionIndexInclusive);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00066"/>00066 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;endOfFileLineEnd.EndPositionIndexExclusive);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00067"/>00067 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00068"/>00068 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.CarriageReturn).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00069"/>00069 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.LineFeed).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00070"/>00070 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.CarriageReturnLineFeed).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00071"/>00071 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00072"/>00072 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(model.TabKeyPositionList);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00073"/>00073 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00074"/>00074 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00075"/>00075 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Variables</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00076"/>00076 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;letterToInsert&#32;=&#32;&quot;&quot;a&quot;&quot;;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00077"/>00077 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00078"/>00078 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;State&#32;change</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00079"/>00079 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00080"/>00080 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cursor&#32;=&#32;new&#32;TextEditorCursor(</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00081"/>00081 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lineIndex:&#32;0,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00082"/>00082 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;columnIndex:&#32;0,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00083"/>00083 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isPrimaryCursor:&#32;true);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00084"/>00084 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cursorModifier&#32;=&#32;new&#32;TextEditorCursorModifier(cursor);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00085"/>00085 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cursorModifierBag&#32;=&#32;new&#32;CursorModifierBagTextEditor(</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00086"/>00086 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&lt;TextEditorViewModel&gt;.Empty,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00087"/>00087 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new&#32;List&lt;TextEditorCursorModifier&gt;()&#32;{&#32;cursorModifier&#32;});</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00088"/>00088 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00089"/>00089 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;modelModifier.Insert(letterToInsert,&#32;cursorModifierBag,&#32;cancellationToken:&#32;CancellationToken.None);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00090"/>00090 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model&#32;=&#32;modelModifier.ToModel();</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00091"/>00091 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00092"/>00092 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00093"/>00093 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;After-assertions</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00094"/>00094 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00095"/>00095 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Single(model.RichCharacterList);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00096"/>00096 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(letterToInsert,&#32;model.RichCharacterList.Single().Value.ToString());</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00097"/>00097 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00098"/>00098 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;model.LineCount);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00099"/>00099 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileLineEnd&#32;=&#32;model.LineEndList.Single();</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00100"/>00100 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.EndOfFile,&#32;endOfFileLineEnd.LineEndKind);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00101"/>00101 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;endOfFileLineEnd.StartPositionIndexInclusive);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00102"/>00102 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;endOfFileLineEnd.EndPositionIndexExclusive);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00103"/>00103 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00104"/>00104 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.CarriageReturn).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00105"/>00105 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.LineFeed).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00106"/>00106 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.CarriageReturnLineFeed).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00107"/>00107 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00108"/>00108 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(model.TabKeyPositionList);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00109"/>00109 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00110"/>00110 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00111"/>00111 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00112"/>00112 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;[Fact]</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00113"/>00113 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;public&#32;void&#32;Insert_Into_Empty_Model_A_LineFeed()</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00114"/>00114 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00115"/>00115 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;model&#32;=&#32;new&#32;TextEditorModel(</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00116"/>00116 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new&#32;ResourceUri(&quot;&quot;/unitTesting.cs&quot;&quot;),</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00117"/>00117 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DateTime.UtcNow,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00118"/>00118 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExtensionNoPeriodFacts.C_SHARP_CLASS,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00119"/>00119 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string.Empty,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00120"/>00120 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;null,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00121"/>00121 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;null);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00122"/>00122 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00123"/>00123 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;modelModifier&#32;=&#32;new&#32;TextEditorModelModifier(model);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00124"/>00124 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00125"/>00125 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Before-assertions</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00126"/>00126 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00127"/>00127 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(model.RichCharacterList);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00128"/>00128 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00129"/>00129 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;model.LineCount);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00130"/>00130 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileLineEnd&#32;=&#32;model.LineEndList.Single();</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00131"/>00131 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.EndOfFile,&#32;endOfFileLineEnd.LineEndKind);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00132"/>00132 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;endOfFileLineEnd.StartPositionIndexInclusive);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00133"/>00133 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;endOfFileLineEnd.EndPositionIndexExclusive);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00134"/>00134 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00135"/>00135 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.CarriageReturn).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00136"/>00136 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.LineFeed).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00137"/>00137 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.CarriageReturnLineFeed).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00138"/>00138 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00139"/>00139 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(model.TabKeyPositionList);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00140"/>00140 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00141"/>00141 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00142"/>00142 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Variables</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00143"/>00143 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;letterToInsert&#32;=&#32;&quot;&quot;\n&quot;&quot;;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00144"/>00144 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00145"/>00145 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;State&#32;change</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00146"/>00146 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00147"/>00147 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cursor&#32;=&#32;new&#32;TextEditorCursor(</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00148"/>00148 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lineIndex:&#32;0,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00149"/>00149 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;columnIndex:&#32;0,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00150"/>00150 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isPrimaryCursor:&#32;true);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00151"/>00151 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cursorModifier&#32;=&#32;new&#32;TextEditorCursorModifier(cursor);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00152"/>00152 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cursorModifierBag&#32;=&#32;new&#32;CursorModifierBagTextEditor(</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00153"/>00153 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&lt;TextEditorViewModel&gt;.Empty,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00154"/>00154 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new&#32;List&lt;TextEditorCursorModifier&gt;()&#32;{&#32;cursorModifier&#32;});</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00155"/>00155 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00156"/>00156 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;modelModifier.Insert(letterToInsert,&#32;cursorModifierBag,&#32;cancellationToken:&#32;CancellationToken.None);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00157"/>00157 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model&#32;=&#32;modelModifier.ToModel();</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00158"/>00158 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00159"/>00159 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00160"/>00160 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;After-assertions</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00161"/>00161 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00162"/>00162 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Single(model.RichCharacterList);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00163"/>00163 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(letterToInsert,&#32;model.RichCharacterList.Single().Value.ToString());</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00164"/>00164 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00165"/>00165 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;model.LineCount);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00166"/>00166 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileLineEnd&#32;=&#32;model.LineEndList.Last();</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00167"/>00167 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.EndOfFile,&#32;endOfFileLineEnd.LineEndKind);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00168"/>00168 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;endOfFileLineEnd.StartPositionIndexInclusive);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00169"/>00169 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;endOfFileLineEnd.EndPositionIndexExclusive);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00170"/>00170 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00171"/>00171 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.CarriageReturn).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00172"/>00172 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.LineFeed).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00173"/>00173 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.CarriageReturnLineFeed).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00174"/>00174 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00175"/>00175 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(model.TabKeyPositionList);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00176"/>00176 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00177"/>00177 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00178"/>00178 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00179"/>00179 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;[Fact]</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00180"/>00180 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;public&#32;void&#32;Insert_Into_Empty_Model_A_CarriageReturn()</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00181"/>00181 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00182"/>00182 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;model&#32;=&#32;new&#32;TextEditorModel(</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00183"/>00183 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new&#32;ResourceUri(&quot;&quot;/unitTesting.cs&quot;&quot;),</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00184"/>00184 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DateTime.UtcNow,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00185"/>00185 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExtensionNoPeriodFacts.C_SHARP_CLASS,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00186"/>00186 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string.Empty,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00187"/>00187 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;null,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00188"/>00188 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;null);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00189"/>00189 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00190"/>00190 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;modelModifier&#32;=&#32;new&#32;TextEditorModelModifier(model);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00191"/>00191 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00192"/>00192 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Before-assertions</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00193"/>00193 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00194"/>00194 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(model.RichCharacterList);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00195"/>00195 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00196"/>00196 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;model.LineCount);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00197"/>00197 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileLineEnd&#32;=&#32;model.LineEndList.Single();</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00198"/>00198 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.EndOfFile,&#32;endOfFileLineEnd.LineEndKind);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00199"/>00199 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;endOfFileLineEnd.StartPositionIndexInclusive);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00200"/>00200 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;endOfFileLineEnd.EndPositionIndexExclusive);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00201"/>00201 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00202"/>00202 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.CarriageReturn).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00203"/>00203 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.LineFeed).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00204"/>00204 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.CarriageReturnLineFeed).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00205"/>00205 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00206"/>00206 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(model.TabKeyPositionList);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00207"/>00207 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00208"/>00208 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00209"/>00209 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Variables</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00210"/>00210 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;letterToInsert&#32;=&#32;&quot;&quot;\r&quot;&quot;;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00211"/>00211 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//#&#32;Any&#32;CarriageReturnNewLine,&#32;or&#32;CarriageReturn,&#32;is&#32;currently</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00212"/>00212 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//#&#32;replaced&#32;with&#32;&apos;\n&apos;.</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00213"/>00213 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//#</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00214"/>00214 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//#&#32;Therefore&#32;the&#32;expected&#32;letter&#32;that&#32;was&#32;inserted&#32;would&#32;be&#32;&quot;&quot;\n&quot;&quot;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00215"/>00215 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//#&#32;(2024-04-12)</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00216"/>00216 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expectedLetterThatWasInserted&#32;=&#32;&quot;&quot;\n&quot;&quot;;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00217"/>00217 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00218"/>00218 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;State&#32;change</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00219"/>00219 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00220"/>00220 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cursor&#32;=&#32;new&#32;TextEditorCursor(</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00221"/>00221 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lineIndex:&#32;0,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00222"/>00222 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;columnIndex:&#32;0,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00223"/>00223 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isPrimaryCursor:&#32;true);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00224"/>00224 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cursorModifier&#32;=&#32;new&#32;TextEditorCursorModifier(cursor);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00225"/>00225 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cursorModifierBag&#32;=&#32;new&#32;CursorModifierBagTextEditor(</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00226"/>00226 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&lt;TextEditorViewModel&gt;.Empty,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00227"/>00227 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new&#32;List&lt;TextEditorCursorModifier&gt;()&#32;{&#32;cursorModifier&#32;});</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00228"/>00228 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00229"/>00229 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;modelModifier.Insert(letterToInsert,&#32;cursorModifierBag,&#32;cancellationToken:&#32;CancellationToken.None);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00230"/>00230 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model&#32;=&#32;modelModifier.ToModel();</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00231"/>00231 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00232"/>00232 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00233"/>00233 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;After-assertions</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00234"/>00234 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00235"/>00235 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Single(model.RichCharacterList);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00236"/>00236 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(expectedLetterThatWasInserted,&#32;model.RichCharacterList.Single().Value.ToString());</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00237"/>00237 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00238"/>00238 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;model.LineCount);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00239"/>00239 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileLineEnd&#32;=&#32;model.LineEndList.Last();</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00240"/>00240 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.EndOfFile,&#32;endOfFileLineEnd.LineEndKind);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00241"/>00241 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;endOfFileLineEnd.StartPositionIndexInclusive);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00242"/>00242 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;endOfFileLineEnd.EndPositionIndexExclusive);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00243"/>00243 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00244"/>00244 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.CarriageReturn).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00245"/>00245 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.LineFeed).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00246"/>00246 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.CarriageReturnLineFeed).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00247"/>00247 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00248"/>00248 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(model.TabKeyPositionList);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00249"/>00249 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00250"/>00250 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00251"/>00251 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00252"/>00252 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;[Fact]</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00253"/>00253 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;public&#32;void&#32;Insert_Into_Empty_Model_A_CarriageReturnNewLine()</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00254"/>00254 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00255"/>00255 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;model&#32;=&#32;new&#32;TextEditorModel(</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00256"/>00256 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new&#32;ResourceUri(&quot;&quot;/unitTesting.cs&quot;&quot;),</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00257"/>00257 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DateTime.UtcNow,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00258"/>00258 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExtensionNoPeriodFacts.C_SHARP_CLASS,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00259"/>00259 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string.Empty,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00260"/>00260 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;null,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00261"/>00261 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;null);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00262"/>00262 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00263"/>00263 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;modelModifier&#32;=&#32;new&#32;TextEditorModelModifier(model);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00264"/>00264 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00265"/>00265 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Before-assertions</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00266"/>00266 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00267"/>00267 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(model.RichCharacterList);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00268"/>00268 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00269"/>00269 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;model.LineCount);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00270"/>00270 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileLineEnd&#32;=&#32;model.LineEndList.Last();</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00271"/>00271 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.EndOfFile,&#32;endOfFileLineEnd.LineEndKind);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00272"/>00272 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;endOfFileLineEnd.StartPositionIndexInclusive);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00273"/>00273 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;endOfFileLineEnd.EndPositionIndexExclusive);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00274"/>00274 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00275"/>00275 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.CarriageReturn).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00276"/>00276 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.LineFeed).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00277"/>00277 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.CarriageReturnLineFeed).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00278"/>00278 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00279"/>00279 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(model.TabKeyPositionList);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00280"/>00280 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00281"/>00281 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00282"/>00282 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Variables</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00283"/>00283 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;letterToInsert&#32;=&#32;&quot;&quot;\r\n&quot;&quot;;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00284"/>00284 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//#&#32;Any&#32;CarriageReturnNewLine,&#32;or&#32;CarriageReturn,&#32;is&#32;currently</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00285"/>00285 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//#&#32;replaced&#32;with&#32;&apos;\n&apos;.</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00286"/>00286 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//#</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00287"/>00287 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//#&#32;Therefore&#32;the&#32;expected&#32;letter&#32;that&#32;was&#32;inserted&#32;would&#32;be&#32;&quot;&quot;\n&quot;&quot;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00288"/>00288 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//#&#32;(2024-04-12)</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00289"/>00289 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expectedLetterThatWasInserted&#32;=&#32;&quot;&quot;\n&quot;&quot;;</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00290"/>00290 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00291"/>00291 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;State&#32;change</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00292"/>00292 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00293"/>00293 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cursor&#32;=&#32;new&#32;TextEditorCursor(</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00294"/>00294 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lineIndex:&#32;0,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00295"/>00295 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;columnIndex:&#32;0,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00296"/>00296 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isPrimaryCursor:&#32;true);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00297"/>00297 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cursorModifier&#32;=&#32;new&#32;TextEditorCursorModifier(cursor);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00298"/>00298 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cursorModifierBag&#32;=&#32;new&#32;CursorModifierBagTextEditor(</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00299"/>00299 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&lt;TextEditorViewModel&gt;.Empty,</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00300"/>00300 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new&#32;List&lt;TextEditorCursorModifier&gt;()&#32;{&#32;cursorModifier&#32;});</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00301"/>00301 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00302"/>00302 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;modelModifier.Insert(letterToInsert,&#32;cursorModifierBag,&#32;cancellationToken:&#32;CancellationToken.None);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00303"/>00303 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model&#32;=&#32;modelModifier.ToModel();</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00304"/>00304 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00305"/>00305 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00306"/>00306 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;After-assertions</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00307"/>00307 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00308"/>00308 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Single(model.RichCharacterList);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00309"/>00309 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(expectedLetterThatWasInserted,&#32;model.RichCharacterList.Single().Value.ToString());</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00310"/>00310 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00311"/>00311 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;model.LineCount);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00312"/>00312 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileLineEnd&#32;=&#32;model.LineEndList.Last();</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00313"/>00313 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.EndOfFile,&#32;endOfFileLineEnd.LineEndKind);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00314"/>00314 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;endOfFileLineEnd.StartPositionIndexInclusive);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00315"/>00315 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;endOfFileLineEnd.EndPositionIndexExclusive);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00316"/>00316 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00317"/>00317 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.CarriageReturn).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00318"/>00318 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.LineFeed).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00319"/>00319 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;model.LineEndKindCountList.Single(x&#32;=&gt;&#32;x.lineEndKind&#32;==&#32;LineEndKind.CarriageReturnLineFeed).count);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00320"/>00320 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00321"/>00321 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(model.TabKeyPositionList);</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00322"/>00322 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00323"/>00323 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00324"/>00324 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00388"/>00388 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00389"/>00389 &#32;&#32;&#32;&#32;public&#32;void&#32;ContentList_Change()
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00390"/>00390 &#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00391"/>00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InitializeTextEditorServicesTestsHelper(
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;var&#32;initialContent,
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;var&#32;refModel,
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;var&#32;viewModel,
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;var&#32;textEditorService);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00396"/>00396 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(initialContent,&#32;refModel.GetAllText());
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00398"/>00398 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00399"/>00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;refModel.CompilerService.ResourceWasModified(
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;refModel.ResourceUri,
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ImmutableArray&lt;TextEditorTextSpan&gt;.Empty);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00402"/>00402 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;refModel&#32;=&#32;textEditorService.ModelApi.GetOrDefault(refModel.ResourceUri)&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00404"/>00404 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;textEditorService.PostIndependent(
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nameof(ContentList_Change),
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;textEditorService.ModelApi.ApplySyntaxHighlightingFactory(refModel.ResourceUri));
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00408"/>00408 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;ContentList
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;contentList&#32;=&#32;refModel.RichCharacterList;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(27,&#32;refModel.RichCharacterList.Count);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00413"/>00413 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;i&#32;=&#32;0;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00415"/>00415 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00416"/>00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Idea:&#32;Would&#32;a&#32;method,&#32;&apos;RichCharacter&#32;GetRichCharacter(int&#32;globalPositionIndex)&apos;,&#32;be&#32;good?
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;&#32;&#32;&#32;&#32;&#32;&#32;Currently,&#32;I&#32;have&#32;to&#32;index&#32;into&#32;two&#32;separate&#32;lists,&#32;i.e.&#32;the&#32;&apos;CharList&apos;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;&#32;&#32;&#32;&#32;&#32;&#32;and&#32;the&#32;DecorationByteList.
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;&#32;&#32;&#32;&#32;&#32;&#32;|
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00420"/>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;&#32;&#32;&#32;&#32;&#32;&#32;Internally&#32;&apos;RichCharacter&#32;GetRichCharacter(int&#32;globalPositionIndex)&apos;&#32;would&#32;be&#32;no&#32;different,
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00421"/>00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;&#32;&#32;&#32;&#32;&#32;&#32;but&#32;perhaps&#32;the&#32;API&#32;would&#32;provide&#32;some&#32;sanity?
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00422"/>00422 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00423"/>00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00424"/>00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;p&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00425"/>00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00426"/>00426 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00427"/>00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00428"/>00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;u&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00429"/>00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00430"/>00430 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00431"/>00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;b&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00434"/>00434 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00435"/>00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;l&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00438"/>00438 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00439"/>00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00440"/>00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;i&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00441"/>00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00442"/>00442 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00443"/>00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00444"/>00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;c&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00446"/>00446 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;&#32;&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00450"/>00450 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00452"/>00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;c&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00454"/>00454 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;l&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00457"/>00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00458"/>00458 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00459"/>00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00460"/>00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;a&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00461"/>00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00462"/>00462 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00464"/>00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;s&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00465"/>00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00466"/>00466 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00467"/>00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00468"/>00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;s&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00469"/>00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00470"/>00470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00471"/>00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00472"/>00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;&#32;&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00473"/>00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00474"/>00474 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00475"/>00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00476"/>00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;M&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00477"/>00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(11,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00478"/>00478 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00479"/>00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00480"/>00480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;y&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00481"/>00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(11,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00482"/>00482 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00483"/>00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00484"/>00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;C&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00485"/>00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(11,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00486"/>00486 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00487"/>00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00488"/>00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;l&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(11,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00490"/>00490 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00491"/>00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00492"/>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;a&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(11,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00494"/>00494 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00495"/>00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00496"/>00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;s&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00497"/>00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(11,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00498"/>00498 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;s&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(11,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00502"/>00502 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00503"/>00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00504"/>00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;\n&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00506"/>00506 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00508"/>00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;{&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00510"/>00510 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00512"/>00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;\n&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00514"/>00514 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00515"/>00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00516"/>00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;\t&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00517"/>00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00518"/>00518 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;\n&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00521"/>00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00522"/>00522 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;}&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00526"/>00526 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00527"/>00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;richCharacter&#32;=&#32;refModel.RichCharacterList[i++]&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00528"/>00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&apos;\n&apos;,&#32;richCharacter.Value);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;richCharacter.DecorationByte);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00530"/>00530 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00531"/>00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(27,&#32;i);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00532"/>00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00533"/>00533 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00534"/>00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;PartitionList
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00535"/>00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00536"/>00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;partitionList&#32;=&#32;refModel.PartitionList;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00537"/>00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Single(partitionList);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00538"/>00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00539"/>00539 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00540"/>00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;EditBlocksList
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00541"/>00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00542"/>00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;editBlocksList&#32;=&#32;refModel.EditBlockList;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00543"/>00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(editBlocksList);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00544"/>00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00545"/>00545 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00546"/>00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;RowEndingPositionsList
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00547"/>00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00548"/>00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rowEndingPositionsList&#32;=&#32;refModel.LineEndList;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00549"/>00549 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(5,&#32;rowEndingPositionsList.Count);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00551"/>00551 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00552"/>00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;i&#32;=&#32;0;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00553"/>00553 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rowEnding&#32;=&#32;rowEndingPositionsList[i++];
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00555"/>00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(20,&#32;rowEnding.StartPositionIndexInclusive);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00556"/>00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(21,&#32;rowEnding.EndPositionIndexExclusive);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00557"/>00557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.LineFeed,&#32;rowEnding.LineEndKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00558"/>00558 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00559"/>00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rowEnding&#32;=&#32;rowEndingPositionsList[i++];
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00560"/>00560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(22,&#32;rowEnding.StartPositionIndexInclusive);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00561"/>00561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(23,&#32;rowEnding.EndPositionIndexExclusive);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00562"/>00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.LineFeed,&#32;rowEnding.LineEndKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00563"/>00563 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00564"/>00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rowEnding&#32;=&#32;rowEndingPositionsList[i++];
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00565"/>00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(24,&#32;rowEnding.StartPositionIndexInclusive);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00566"/>00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(25,&#32;rowEnding.EndPositionIndexExclusive);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00567"/>00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.LineFeed,&#32;rowEnding.LineEndKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00568"/>00568 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00569"/>00569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rowEnding&#32;=&#32;rowEndingPositionsList[i++];
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00570"/>00570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(26,&#32;rowEnding.StartPositionIndexInclusive);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00571"/>00571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(27,&#32;rowEnding.EndPositionIndexExclusive);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00572"/>00572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.LineFeed,&#32;rowEnding.LineEndKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00573"/>00573 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00574"/>00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rowEnding&#32;=&#32;rowEndingPositionsList[i++];
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00575"/>00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(27,&#32;rowEnding.StartPositionIndexInclusive);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00576"/>00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(27,&#32;rowEnding.EndPositionIndexExclusive);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00577"/>00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.EndOfFile,&#32;rowEnding.LineEndKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00578"/>00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00579"/>00579 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00580"/>00580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;RowEndingKindCountsList
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00581"/>00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00582"/>00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rowEndingKindCountsList&#32;=&#32;refModel.LineEndKindCountList;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00583"/>00583 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00584"/>00584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(3,&#32;rowEndingKindCountsList.Count);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00585"/>00585 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00586"/>00586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;i&#32;=&#32;0;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00587"/>00587 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00588"/>00588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rowEndingKindCountTuple&#32;=&#32;rowEndingKindCountsList[i++];
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00589"/>00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.CarriageReturn,&#32;rowEndingKindCountTuple.lineEndKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00590"/>00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;rowEndingKindCountTuple.count);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00591"/>00591 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00592"/>00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rowEndingKindCountTuple&#32;=&#32;rowEndingKindCountsList[i++];
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00593"/>00593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.LineFeed,&#32;rowEndingKindCountTuple.lineEndKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00594"/>00594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(4,&#32;rowEndingKindCountTuple.count);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00595"/>00595 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00596"/>00596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rowEndingKindCountTuple&#32;=&#32;rowEndingKindCountsList[i++];
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00597"/>00597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.CarriageReturnLineFeed,&#32;rowEndingKindCountTuple.lineEndKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00598"/>00598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;rowEndingKindCountTuple.count);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00599"/>00599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00600"/>00600 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00601"/>00601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;PresentationModelsList
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00602"/>00602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00603"/>00603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;presentationModelsList&#32;=&#32;refModel.PresentationModelList;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00604"/>00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Single(presentationModelsList);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00605"/>00605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00606"/>00606 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00607"/>00607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;TabKeyPositionsList
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00608"/>00608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00609"/>00609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;tabKeyPositionsList&#32;=&#32;refModel.TabKeyPositionList;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00610"/>00610 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00611"/>00611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Single(tabKeyPositionsList);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00612"/>00612 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00613"/>00613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;tabKeyPosition&#32;=&#32;tabKeyPositionsList.Single();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00614"/>00614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(23,&#32;tabKeyPosition);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00615"/>00615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00616"/>00616 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00617"/>00617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;OnlyRowEndingKind
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00618"/>00618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00619"/>00619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;onlyRowEndingKind&#32;=&#32;refModel.OnlyLineEndKind;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00620"/>00620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.LineFeed,&#32;onlyRowEndingKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00621"/>00621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00622"/>00622 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00623"/>00623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;UsingRowEndingKind
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00624"/>00624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00625"/>00625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;usingRowEndingKind&#32;=&#32;refModel.LineEndKindPreference;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00626"/>00626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(LineEndKind.LineFeed,&#32;usingRowEndingKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00627"/>00627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00628"/>00628 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00629"/>00629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;ResourceUri
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00630"/>00630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00631"/>00631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;refModel.ResourceUri;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00632"/>00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(new&#32;ResourceUri(&quot;&quot;/unitTesting.cs&quot;&quot;),&#32;resourceUri);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00633"/>00633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00634"/>00634 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00635"/>00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;ResourceLastWriteTime
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00636"/>00636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00637"/>00637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Skip
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00638"/>00638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00639"/>00639 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00640"/>00640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;PartitionSize
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00641"/>00641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00642"/>00642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;partitionSize&#32;=&#32;refModel.PartitionSize;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00643"/>00643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(4096,&#32;partitionSize);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00644"/>00644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00645"/>00645 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00646"/>00646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;FileExtension
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00647"/>00647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00648"/>00648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;fileExtension&#32;=&#32;refModel.FileExtension;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00649"/>00649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(ExtensionNoPeriodFacts.C_SHARP_CLASS,&#32;fileExtension);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00650"/>00650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00651"/>00651 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00652"/>00652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;DecorationMapper
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00653"/>00653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00654"/>00654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;decorationMapper&#32;=&#32;refModel.DecorationMapper;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00655"/>00655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.IsType&lt;GenericDecorationMapper&gt;(decorationMapper);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00656"/>00656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00657"/>00657 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00658"/>00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;CompilerService
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00659"/>00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00660"/>00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;compilerService&#32;=&#32;refModel.CompilerService;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00661"/>00661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.IsType&lt;CSharpCompilerService&gt;(compilerService);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00662"/>00662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00663"/>00663 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00664"/>00664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;TextEditorSaveFileHelper
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00665"/>00665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00666"/>00666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;textEditorSaveFileHelper&#32;=&#32;refModel.TextEditorSaveFileHelper;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00667"/>00667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(textEditorSaveFileHelper);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00668"/>00668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00669"/>00669 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00670"/>00670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;EditBlockIndex
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00671"/>00671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00672"/>00672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;editBlockIndex&#32;=&#32;refModel.EditBlockIndex;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00673"/>00673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;editBlockIndex);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00674"/>00674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00675"/>00675 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00676"/>00676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;IsDirty
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00677"/>00677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00678"/>00678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;isDirty&#32;=&#32;refModel.IsDirty;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00679"/>00679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(isDirty);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00680"/>00680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00681"/>00681 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00682"/>00682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;MostCharactersOnASingleRowTuple
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00683"/>00683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00684"/>00684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;mostCharactersOnASingleLineTuple&#32;=&#32;refModel.MostCharactersOnASingleLineTuple;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00685"/>00685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;mostCharactersOnASingleLineTuple.lineIndex);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00686"/>00686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(26,&#32;mostCharactersOnASingleLineTuple.lineLength);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00687"/>00687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00688"/>00688 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00689"/>00689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;RenderStateKey
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00690"/>00690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00691"/>00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Skip
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00692"/>00692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00693"/>00693 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00694"/>00694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;LineCount
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00695"/>00695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00696"/>00696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lineCount&#32;=&#32;refModel.LineCount;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00697"/>00697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(5,&#32;lineCount);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00698"/>00698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00699"/>00699 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00700"/>00700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;DocumentLength
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00701"/>00701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00702"/>00702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;documentLength&#32;=&#32;refModel.DocumentLength;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00703"/>00703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(27,&#32;documentLength);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00704"/>00704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00705"/>00705 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00706"/>00706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;cSharpResource
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00707"/>00707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00708"/>00708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cSharpResource&#32;=&#32;refModel.CompilerService.GetCompilerServiceResourceFor(refModel.ResourceUri)&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00709"/>00709 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00710"/>00710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;CompilationUnit
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00711"/>00711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00712"/>00712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Skip
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00713"/>00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00714"/>00714 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00715"/>00715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;SyntaxTokenList
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00716"/>00716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00717"/>00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;syntaxTokenList&#32;=&#32;cSharpResource.SyntaxTokenList;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00718"/>00718 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00719"/>00719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(6,&#32;syntaxTokenList.Length);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00720"/>00720 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00721"/>00721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;i&#32;=&#32;0;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00722"/>00722 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00723"/>00723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;token&#32;=&#32;syntaxTokenList[i++];
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00724"/>00724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(SyntaxKind.PublicTokenKeyword,&#32;token.SyntaxKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00725"/>00725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&quot;&quot;public&quot;&quot;,&#32;token.TextSpan.GetText());
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00726"/>00726 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00727"/>00727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token&#32;=&#32;syntaxTokenList[i++];
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00728"/>00728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(SyntaxKind.ClassTokenKeyword,&#32;token.SyntaxKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00729"/>00729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&quot;&quot;class&quot;&quot;,&#32;token.TextSpan.GetText());
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00730"/>00730 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00731"/>00731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token&#32;=&#32;syntaxTokenList[i++];
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00732"/>00732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(SyntaxKind.IdentifierToken,&#32;token.SyntaxKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00733"/>00733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&quot;&quot;MyClass&quot;&quot;,&#32;token.TextSpan.GetText());
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00734"/>00734 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00735"/>00735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token&#32;=&#32;syntaxTokenList[i++];
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00736"/>00736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(SyntaxKind.OpenBraceToken,&#32;token.SyntaxKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00737"/>00737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&quot;&quot;{&quot;&quot;,&#32;token.TextSpan.GetText());
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00738"/>00738 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00739"/>00739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token&#32;=&#32;syntaxTokenList[i++];
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00740"/>00740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(SyntaxKind.CloseBraceToken,&#32;token.SyntaxKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00741"/>00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&quot;&quot;}&quot;&quot;,&#32;token.TextSpan.GetText());
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00742"/>00742 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00743"/>00743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token&#32;=&#32;syntaxTokenList[i++];
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00744"/>00744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(SyntaxKind.EndOfFileToken,&#32;token.SyntaxKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00745"/>00745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(string.Empty,&#32;token.TextSpan.GetText());
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00746"/>00746 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00747"/>00747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(6,&#32;i);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00748"/>00748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00749"/>00749 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00750"/>00750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;GetTokenTextSpans()
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00751"/>00751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00752"/>00752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Skip
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00753"/>00753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00754"/>00754 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00755"/>00755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;GetSymbols()
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00756"/>00756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00757"/>00757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;symbolList&#32;=&#32;cSharpResource.GetSymbols();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00758"/>00758 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00759"/>00759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Single(symbolList);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00760"/>00760 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00761"/>00761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;symbol&#32;=&#32;symbolList.Single();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00762"/>00762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(SyntaxKind.TypeSymbol,&#32;symbol.SyntaxKind);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00763"/>00763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(&quot;&quot;MyClass&quot;&quot;,&#32;symbol.TextSpan.GetText());
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00764"/>00764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00765"/>00765 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00766"/>00766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;GetDiagnostics()
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00767"/>00767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00768"/>00768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;diagnostics&#32;=&#32;cSharpResource.GetDiagnostics();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00769"/>00769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Empty(diagnostics);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00770"/>00770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00771"/>00771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00772"/>00772 &#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00773"/>00773 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00774"/>00774 &#32;&#32;&#32;&#32;private&#32;static&#32;void&#32;InitializeTextEditorServicesTestsHelper(
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00775"/>00775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;string&#32;initialContent,
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00776"/>00776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;TextEditorModel&#32;model,
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00777"/>00777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;TextEditorViewModel&#32;viewModel,
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00778"/>00778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;ITextEditorService&#32;textEditorService)
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00779"/>00779 &#32;&#32;&#32;&#32;{
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00780"/>00780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;backgroundTaskService&#32;=&#32;new&#32;BackgroundTaskServiceSynchronous();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00781"/>00781 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00782"/>00782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;services&#32;=&#32;new&#32;ServiceCollection()
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00783"/>00783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.AddScoped&lt;IJSRuntime,&#32;DoNothingJsRuntime&gt;()
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00784"/>00784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.AddLuthetusIdeRazorLibServices(
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00785"/>00785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new&#32;LuthetusHostingInformation(LuthetusHostingKind.UnitTestingSynchronous,&#32;backgroundTaskService));
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00786"/>00786 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00787"/>00787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;serviceProvider&#32;=&#32;services.BuildServiceProvider();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00788"/>00788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;store&#32;=&#32;serviceProvider.GetRequiredService&lt;IStore&gt;();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00789"/>00789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store.InitializeAsync().Wait();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00790"/>00790 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00791"/>00791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;textEditorRegistryWrap&#32;=&#32;serviceProvider.GetRequiredService&lt;ITextEditorRegistryWrap&gt;();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00792"/>00792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;textEditorRegistryWrap.DecorationMapperRegistry&#32;=&#32;serviceProvider.GetRequiredService&lt;IDecorationMapperRegistry&gt;();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00793"/>00793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;textEditorRegistryWrap.CompilerServiceRegistry&#32;=&#32;serviceProvider.GetRequiredService&lt;ICompilerServiceRegistry&gt;();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00794"/>00794 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00795"/>00795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;textEditorService&#32;=&#32;serviceProvider.GetRequiredService&lt;ITextEditorService&gt;();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00796"/>00796 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00797"/>00797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;fileExtension&#32;=&#32;ExtensionNoPeriodFacts.C_SHARP_CLASS;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00798"/>00798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;new&#32;ResourceUri(&quot;&quot;/unitTesting.cs&quot;&quot;);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00799"/>00799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceLastWriteTime&#32;=&#32;DateTime.UtcNow;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00800"/>00800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initialContent&#32;=&#32;&quot;&quot;public&#32;class&#32;MyClass\n{\n\t\n}\n&quot;&quot;.ReplaceLineEndings(&quot;&quot;\n&quot;&quot;);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00801"/>00801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;genericDecorationMapper&#32;=&#32;((DecorationMapperRegistry)serviceProvider.GetRequiredService&lt;IDecorationMapperRegistry&gt;()).GenericDecorationMapper;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00802"/>00802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cSharpCompilerService&#32;=&#32;((CompilerServiceRegistry)serviceProvider.GetRequiredService&lt;ICompilerServiceRegistry&gt;()).CSharpCompilerService;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00803"/>00803 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00804"/>00804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model&#32;=&#32;new&#32;TextEditorModel(
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00805"/>00805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resourceUri,
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00806"/>00806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resourceLastWriteTime,
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00807"/>00807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileExtension,
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00808"/>00808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initialContent,
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00809"/>00809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;genericDecorationMapper,
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00810"/>00810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cSharpCompilerService);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00811"/>00811 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00812"/>00812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;textEditorService.ModelApi.RegisterCustom(model);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00813"/>00813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cSharpCompilerService.RegisterResource(model.ResourceUri);
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00814"/>00814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model&#32;=&#32;textEditorService.ModelApi.GetOrDefault(resourceUri)&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00815"/>00815 
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00816"/>00816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;viewModelKey&#32;=&#32;Key&lt;TextEditorViewModel&gt;.NewKey();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00817"/>00817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;textEditorService.ViewModelApi.Register(viewModelKey,&#32;resourceUri,&#32;new&#32;Category(&quot;&quot;UnitTesting&quot;&quot;));
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00818"/>00818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewModel&#32;=&#32;textEditorService.ViewModelApi.GetOrDefault(viewModelKey)&#32;??&#32;throw&#32;new&#32;ArgumentNullException();
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00819"/>00819 &#32;&#32;&#32;&#32;}
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00820"/>00820 }
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00821"/>00821 &quot;;
<anchor xml:id="__adhoc_test_8_data_8cs_source_1l00822"/>00822 }
</programlisting></section>
