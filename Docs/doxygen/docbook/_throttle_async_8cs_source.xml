<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__throttle_async_8cs_source" xml:lang="en-US">
<title>ThrottleAsync.cs</title>
<indexterm><primary>Source/Lib/Common/Reactives/Models/ThrottleAsync.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__throttle_async_8cs_source_1l00001"/>00001 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models">Luthetus.Common.RazorLib.Reactives.Models</link>;
<anchor xml:id="__throttle_async_8cs_source_1l00002"/>00002 
<anchor xml:id="__throttle_async_8cs_source_1l00020"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async">00020</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1af1971dc5e9e94fceb853f4d7cece20d8">ThrottleAsync</link>
<anchor xml:id="__throttle_async_8cs_source_1l00021"/>00021 {
<anchor xml:id="__throttle_async_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">object</emphasis>&#32;_lockWorkItems&#32;=&#32;<emphasis role="keyword">new</emphasis>();
<anchor xml:id="__throttle_async_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;
<anchor xml:id="__throttle_async_8cs_source_1l00024"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1af1971dc5e9e94fceb853f4d7cece20d8">00024</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1af1971dc5e9e94fceb853f4d7cece20d8">ThrottleAsync</link>(TimeSpan&#32;throttleTimeSpan)
<anchor xml:id="__throttle_async_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a334c7f9e5c9e767230183e6791e3349a">ThrottleTimeSpan</link>&#32;=&#32;throttleTimeSpan;
<anchor xml:id="__throttle_async_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_8cs_source_1l00028"/>00028 
<anchor xml:id="__throttle_async_8cs_source_1l00029"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a334c7f9e5c9e767230183e6791e3349a">00029</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;TimeSpan&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a334c7f9e5c9e767230183e6791e3349a">ThrottleTimeSpan</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;}
<anchor xml:id="__throttle_async_8cs_source_1l00030"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a49e5e55e3cd54d394c0c420f46f870f7">00030</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Stack&lt;Func&lt;CancellationToken,&#32;Task&gt;&gt;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a49e5e55e3cd54d394c0c420f46f870f7">WorkItemStack</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">set</emphasis>;&#32;}&#32;=&#32;<emphasis role="keyword">new</emphasis>();
<anchor xml:id="__throttle_async_8cs_source_1l00031"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a8a301937581614b77e1cf0e6e02cd6e9">00031</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a8a301937581614b77e1cf0e6e02cd6e9">WorkItemTask</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">set</emphasis>;&#32;}&#32;=&#32;Task.CompletedTask;
<anchor xml:id="__throttle_async_8cs_source_1l00032"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1abccf84bc1b5ac11ebb228368ec1dfa26">00032</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1abccf84bc1b5ac11ebb228368ec1dfa26">IsStoppingFurtherPushes</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__throttle_async_8cs_source_1l00033"/>00033 
<anchor xml:id="__throttle_async_8cs_source_1l00034"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1aae9fc2226e3005d308b43781b57db870">00034</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1aae9fc2226e3005d308b43781b57db870">RunAsync</link>(Func&lt;CancellationToken,&#32;Task&gt;&#32;workItem)
<anchor xml:id="__throttle_async_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lock&#32;(_lockWorkItems)
<anchor xml:id="__throttle_async_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a49e5e55e3cd54d394c0c420f46f870f7">WorkItemStack</link>.Push(workItem);
<anchor xml:id="__throttle_async_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a49e5e55e3cd54d394c0c420f46f870f7">WorkItemStack</link>.Count&#32;&gt;&#32;1)
<anchor xml:id="__throttle_async_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Task.CompletedTask;
<anchor xml:id="__throttle_async_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;
<anchor xml:id="__throttle_async_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;previousTask&#32;=&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a8a301937581614b77e1cf0e6e02cd6e9">WorkItemTask</link>;
<anchor xml:id="__throttle_async_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a8a301937581614b77e1cf0e6e02cd6e9">WorkItemTask</link>&#32;=&#32;ExecuteAsync(previousTask);
<anchor xml:id="__throttle_async_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a8a301937581614b77e1cf0e6e02cd6e9">WorkItemTask</link>;
<anchor xml:id="__throttle_async_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;
<anchor xml:id="__throttle_async_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;async&#32;Task&#32;ExecuteAsync(Task&#32;previousTask)
<anchor xml:id="__throttle_async_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Await&#32;the&#32;previous&#32;work&#32;item&#32;task.</emphasis>
<anchor xml:id="__throttle_async_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;previousTask.ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__throttle_async_8cs_source_1l00052"/>00052 
<anchor xml:id="__throttle_async_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Func&lt;CancellationToken,&#32;Task&gt;&#32;popWorkItem;
<anchor xml:id="__throttle_async_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lock&#32;(_lockWorkItems)
<anchor xml:id="__throttle_async_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a49e5e55e3cd54d394c0c420f46f870f7">WorkItemStack</link>.Count&#32;==&#32;0)
<anchor xml:id="__throttle_async_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__throttle_async_8cs_source_1l00058"/>00058 
<anchor xml:id="__throttle_async_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popWorkItem&#32;=&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a49e5e55e3cd54d394c0c420f46f870f7">WorkItemStack</link>.Pop();
<anchor xml:id="__throttle_async_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a49e5e55e3cd54d394c0c420f46f870f7">WorkItemStack</link>.Clear();
<anchor xml:id="__throttle_async_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_8cs_source_1l00062"/>00062 
<anchor xml:id="__throttle_async_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;Task.WhenAll(
<anchor xml:id="__throttle_async_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popWorkItem.Invoke(CancellationToken.None),
<anchor xml:id="__throttle_async_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Task.Delay(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a334c7f9e5c9e767230183e6791e3349a">ThrottleTimeSpan</link>,&#32;CancellationToken.None))
<anchor xml:id="__throttle_async_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__throttle_async_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_8cs_source_1l00068"/>00068 
<anchor xml:id="__throttle_async_8cs_source_1l00079"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1ae2442663d99f2ab8a42f8b4a0a77200c">00079</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1ae2442663d99f2ab8a42f8b4a0a77200c">UntilIsEmpty</link>(
<anchor xml:id="__throttle_async_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TimeSpan?&#32;pollingTimeSpan&#32;=&#32;<emphasis role="keyword">null</emphasis>,
<anchor xml:id="__throttle_async_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CancellationToken&#32;cancellationToken&#32;=&#32;<emphasis role="keywordflow">default</emphasis>)
<anchor xml:id="__throttle_async_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pollingTimeSpan&#32;??=&#32;TimeSpan.FromMilliseconds(333);
<anchor xml:id="__throttle_async_8cs_source_1l00084"/>00084 
<anchor xml:id="__throttle_async_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!cancellationToken.IsCancellationRequested)
<anchor xml:id="__throttle_async_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a49e5e55e3cd54d394c0c420f46f870f7">WorkItemStack</link>.Count&#32;==&#32;0)
<anchor xml:id="__throttle_async_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__throttle_async_8cs_source_1l00089"/>00089 
<anchor xml:id="__throttle_async_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;Task.Delay(pollingTimeSpan.Value).ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__throttle_async_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_8cs_source_1l00092"/>00092 
<anchor xml:id="__throttle_async_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_async_1a8a301937581614b77e1cf0e6e02cd6e9">WorkItemTask</link>.ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__throttle_async_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_8cs_source_1l00095"/>00095 }
</programlisting></section>
