<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__background_task_worker_8cs_source" xml:lang="en-US">
<title>BackgroundTaskWorker.cs</title>
<indexterm><primary>Source/Lib/Common/BackgroundTasks/Models/BackgroundTaskWorker.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__background_task_worker_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis>Microsoft.Extensions.Hosting;
<anchor xml:id="__background_task_worker_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis>Microsoft.Extensions.Logging;
<anchor xml:id="__background_task_worker_8cs_source_1l00003"/>00003 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_keys_1_1_models">Luthetus.Common.RazorLib.Keys.Models</link>;
<anchor xml:id="__background_task_worker_8cs_source_1l00004"/>00004 
<anchor xml:id="__background_task_worker_8cs_source_1l00005"/>00005 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models">Luthetus.Common.RazorLib.BackgroundTasks.Models</link>;
<anchor xml:id="__background_task_worker_8cs_source_1l00006"/>00006 
<anchor xml:id="__background_task_worker_8cs_source_1l00007"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker">00007</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1ac6e26410b4052aae68a4442730abaab2">BackgroundTaskWorker</link>&#32;:&#32;BackgroundService
<anchor xml:id="__background_task_worker_8cs_source_1l00008"/>00008 {
<anchor xml:id="__background_task_worker_8cs_source_1l00009"/>00009 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;readonly&#32;ILogger&#32;_logger;
<anchor xml:id="__background_task_worker_8cs_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_hasActiveExecutionActive;
<anchor xml:id="__background_task_worker_8cs_source_1l00011"/>00011 
<anchor xml:id="__background_task_worker_8cs_source_1l00012"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1ac6e26410b4052aae68a4442730abaab2">00012</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1ac6e26410b4052aae68a4442730abaab2">BackgroundTaskWorker</link>(
<anchor xml:id="__background_task_worker_8cs_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Key&lt;IBackgroundTaskQueue&gt;&#32;queueKey,
<anchor xml:id="__background_task_worker_8cs_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task_service">IBackgroundTaskService</link>&#32;backgroundTaskService,
<anchor xml:id="__background_task_worker_8cs_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ILoggerFactory&#32;loggerFactory)
<anchor xml:id="__background_task_worker_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_worker_8cs_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a31d2aeb796111c46f960d9fac771780f">QueueKey</link>&#32;=&#32;queueKey;
<anchor xml:id="__background_task_worker_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a27b5f46cf5392a690fd5cd215ea197a6">BackgroundTaskService</link>&#32;=&#32;backgroundTaskService;
<anchor xml:id="__background_task_worker_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_logger&#32;=&#32;loggerFactory.CreateLogger&lt;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1ac6e26410b4052aae68a4442730abaab2">BackgroundTaskWorker</link>&gt;();
<anchor xml:id="__background_task_worker_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_worker_8cs_source_1l00021"/>00021 
<anchor xml:id="__background_task_worker_8cs_source_1l00022"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a31d2aeb796111c46f960d9fac771780f">00022</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Key&lt;IBackgroundTaskQueue&gt;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a31d2aeb796111c46f960d9fac771780f">QueueKey</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;}
<anchor xml:id="__background_task_worker_8cs_source_1l00023"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a27b5f46cf5392a690fd5cd215ea197a6">00023</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_interface_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_i_background_task_service">IBackgroundTaskService</link>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a27b5f46cf5392a690fd5cd215ea197a6">BackgroundTaskService</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;}
<anchor xml:id="__background_task_worker_8cs_source_1l00024"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a3506fcea88964ec7068a1d20ab651d18">00024</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Task?&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a3506fcea88964ec7068a1d20ab651d18">StartAsyncTask</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">set</emphasis>;&#32;}
<anchor xml:id="__background_task_worker_8cs_source_1l00025"/>00025 
<anchor xml:id="__background_task_worker_8cs_source_1l00026"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a976179b8bcaca2e4e14b20ddacf57b14">00026</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;async&#32;<emphasis role="keyword">override</emphasis>&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a976179b8bcaca2e4e14b20ddacf57b14">ExecuteAsync</link>(CancellationToken&#32;cancellationToken)
<anchor xml:id="__background_task_worker_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_worker_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;currentThread&#32;=&#32;Thread.CurrentThread;
<anchor xml:id="__background_task_worker_8cs_source_1l00029"/>00029 
<anchor xml:id="__background_task_worker_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_logger.LogInformation(<emphasis role="stringliteral">&quot;Queued&#32;Hosted&#32;Service&#32;is&#32;starting.&quot;</emphasis>);
<anchor xml:id="__background_task_worker_8cs_source_1l00031"/>00031 
<anchor xml:id="__background_task_worker_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!cancellationToken.IsCancellationRequested)
<anchor xml:id="__background_task_worker_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_worker_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;backgroundTask&#32;=&#32;await&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a27b5f46cf5392a690fd5cd215ea197a6">BackgroundTaskService</link>
<anchor xml:id="__background_task_worker_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.DequeueAsync(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a31d2aeb796111c46f960d9fac771780f">QueueKey</link>,&#32;cancellationToken)
<anchor xml:id="__background_task_worker_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__background_task_worker_8cs_source_1l00037"/>00037 
<anchor xml:id="__background_task_worker_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(backgroundTask&#32;is&#32;not&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__background_task_worker_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_worker_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
<anchor xml:id="__background_task_worker_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_worker_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_hasActiveExecutionActive&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__background_task_worker_8cs_source_1l00043"/>00043 
<anchor xml:id="__background_task_worker_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a27b5f46cf5392a690fd5cd215ea197a6">BackgroundTaskService</link>.SetExecutingBackgroundTask(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a31d2aeb796111c46f960d9fac771780f">QueueKey</link>,&#32;backgroundTask);
<anchor xml:id="__background_task_worker_8cs_source_1l00045"/>00045 
<anchor xml:id="__background_task_worker_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Should&#32;Task.WhenAll&#32;be&#32;used&#32;here&#32;so&#32;the&#32;delay&#32;runs&#32;concurrently...</emphasis>
<anchor xml:id="__background_task_worker_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;...with&#32;the&#32;&apos;HandleEvent&apos;?</emphasis>
<anchor xml:id="__background_task_worker_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__background_task_worker_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Could&#32;it&#32;be&#32;that&#32;the&#32;reason&#32;for&#32;ThrottleController&#32;locking&#32;the&#32;UI&#32;thread...</emphasis>
<anchor xml:id="__background_task_worker_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;...was&#32;because&#32;I&#32;was&#32;using&#32;Task.WhenAll,&#32;and&#32;once&#32;the&#32;tasks&#32;actually&#32;got&#32;awaited,</emphasis>
<anchor xml:id="__background_task_worker_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;they&#32;both&#32;finished&#32;synchronously&#32;somehow,&#32;therefore&#32;an&#32;await&#32;never&#32;occurred?</emphasis>
<anchor xml:id="__background_task_worker_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;task&#32;=&#32;backgroundTask.HandleEvent(cancellationToken);
<anchor xml:id="__background_task_worker_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__background_task_worker_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(task.IsCompleted)
<anchor xml:id="__background_task_worker_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_worker_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;task&#32;completes&#32;synchronously&#32;then&#32;yield</emphasis>
<anchor xml:id="__background_task_worker_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;any&#32;single&#32;threaded&#32;runtimes&#32;so&#32;the&#32;UI&#32;doesn&apos;t&#32;freeze.</emphasis>
<anchor xml:id="__background_task_worker_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;Task.Yield();
<anchor xml:id="__background_task_worker_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_worker_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__background_task_worker_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_worker_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;task.ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__background_task_worker_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_worker_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__background_task_worker_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a27b5f46cf5392a690fd5cd215ea197a6">BackgroundTaskService</link>.CompleteTaskCompletionSource(backgroundTask.BackgroundTaskKey);
<anchor xml:id="__background_task_worker_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_worker_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(Exception&#32;ex)
<anchor xml:id="__background_task_worker_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_worker_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;message&#32;=&#32;ex&#32;is&#32;OperationCanceledException
<anchor xml:id="__background_task_worker_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<emphasis role="stringliteral">&quot;Task&#32;was&#32;cancelled&#32;{0}.&quot;</emphasis>&#32;<emphasis role="comment">//&#32;{0}&#32;=&gt;&#32;WorkItemName</emphasis>
<anchor xml:id="__background_task_worker_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;Error&#32;occurred&#32;executing&#32;{0}.&quot;</emphasis>;&#32;<emphasis role="comment">//&#32;{0}&#32;=&gt;&#32;WorkItemName</emphasis>
<anchor xml:id="__background_task_worker_8cs_source_1l00072"/>00072 
<anchor xml:id="__background_task_worker_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_logger.LogError(ex,&#32;message,&#32;backgroundTask.Name);
<anchor xml:id="__background_task_worker_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine($<emphasis role="stringliteral">&quot;ERROR&#32;on&#32;{backgroundTask.Name}:&#32;{ex.ToString()}&quot;</emphasis>);
<anchor xml:id="__background_task_worker_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_worker_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">finally</emphasis>
<anchor xml:id="__background_task_worker_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_worker_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a27b5f46cf5392a690fd5cd215ea197a6">BackgroundTaskService</link>.SetExecutingBackgroundTask(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a31d2aeb796111c46f960d9fac771780f">QueueKey</link>,&#32;<emphasis role="keyword">null</emphasis>);
<anchor xml:id="__background_task_worker_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__background_task_worker_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_hasActiveExecutionActive&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__background_task_worker_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_worker_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_worker_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_worker_8cs_source_1l00084"/>00084 
<anchor xml:id="__background_task_worker_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_logger.LogInformation(<emphasis role="stringliteral">&quot;Queued&#32;Hosted&#32;Service&#32;is&#32;stopping.&quot;</emphasis>);
<anchor xml:id="__background_task_worker_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_worker_8cs_source_1l00087"/>00087 
<anchor xml:id="__background_task_worker_8cs_source_1l00102"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1aa7fee9aea89dc99238e6577e14fc1cd4">00102</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1aa7fee9aea89dc99238e6577e14fc1cd4">FlushAsync</link>(CancellationToken&#32;cancellationToken)
<anchor xml:id="__background_task_worker_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_worker_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;queue&#32;=&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a27b5f46cf5392a690fd5cd215ea197a6">BackgroundTaskService</link>.GetQueue(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a31d2aeb796111c46f960d9fac771780f">QueueKey</link>);
<anchor xml:id="__background_task_worker_8cs_source_1l00105"/>00105 
<anchor xml:id="__background_task_worker_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(queue.ExecutingBackgroundTask&#32;is&#32;not&#32;<emphasis role="keyword">null</emphasis>&#32;||
<anchor xml:id="__background_task_worker_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_hasActiveExecutionActive&#32;||
<anchor xml:id="__background_task_worker_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;queue.Count&#32;&gt;&#32;0)
<anchor xml:id="__background_task_worker_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_worker_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;Task.Delay(TimeSpan.FromMilliseconds(100),&#32;cancellationToken).ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__background_task_worker_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_worker_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_worker_8cs_source_1l00113"/>00113 
<anchor xml:id="__background_task_worker_8cs_source_1l00114"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a6a0e9ab004fb3ef503cfb8f4a08c5ceb">00114</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a6a0e9ab004fb3ef503cfb8f4a08c5ceb">StopAsync</link>(CancellationToken&#32;cancellationToken)
<anchor xml:id="__background_task_worker_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_worker_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a27b5f46cf5392a690fd5cd215ea197a6">BackgroundTaskService</link>.StopAsync(CancellationToken.None).ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__background_task_worker_8cs_source_1l00117"/>00117 
<anchor xml:id="__background_task_worker_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Polling&#32;solution&#32;for&#32;now,&#32;perhaps&#32;change&#32;to&#32;a&#32;more&#32;optimal&#32;solution?&#32;(2023-11-19)</emphasis>
<anchor xml:id="__background_task_worker_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a27b5f46cf5392a690fd5cd215ea197a6">BackgroundTaskService</link>.Queues.Any(x&#32;=&gt;&#32;x.ExecutingBackgroundTask&#32;is&#32;not&#32;<emphasis role="keyword">null</emphasis>)&#32;||
<anchor xml:id="__background_task_worker_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_hasActiveExecutionActive&#32;||
<anchor xml:id="__background_task_worker_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Here&#32;a&#32;check&#32;is&#32;done&#32;for&#32;if&#32;there&#32;are&#32;background&#32;tasks&#32;pending&#32;for&#32;a&#32;hacky-concurrency&#32;solution</emphasis>
<anchor xml:id="__background_task_worker_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_background_tasks_1_1_models_1_1_background_task_worker_1a27b5f46cf5392a690fd5cd215ea197a6">BackgroundTaskService</link>.Queues.SelectMany(x&#32;=&gt;&#32;x.BackgroundTaskList).Any())
<anchor xml:id="__background_task_worker_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__background_task_worker_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;Task.Delay(TimeSpan.FromMilliseconds(100),&#32;cancellationToken).ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__background_task_worker_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_worker_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;}
<anchor xml:id="__background_task_worker_8cs_source_1l00127"/>00127 }
</programlisting></section>
