<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__throttle_8cs_source" xml:lang="en-US">
<title>Throttle.cs</title>
<indexterm><primary>Source/Lib/Common/Reactives/Models/Throttle.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__throttle_8cs_source_1l00001"/>00001 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models">Luthetus.Common.RazorLib.Reactives.Models</link>;
<anchor xml:id="__throttle_8cs_source_1l00002"/>00002 
<anchor xml:id="__throttle_8cs_source_1l00003"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle">00003</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_1a79d1a34596c9b316513ff6efa3431b3d">Throttle</link>
<anchor xml:id="__throttle_8cs_source_1l00004"/>00004 {
<anchor xml:id="__throttle_8cs_source_1l00005"/>00005 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">object</emphasis>&#32;_lockWorkItems&#32;=&#32;<emphasis role="keyword">new</emphasis>();
<anchor xml:id="__throttle_8cs_source_1l00006"/>00006 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;readonly&#32;Stack&lt;Func&lt;CancellationToken,&#32;Task&gt;&gt;&#32;_workItemStack&#32;=&#32;<emphasis role="keyword">new</emphasis>();
<anchor xml:id="__throttle_8cs_source_1l00007"/>00007 
<anchor xml:id="__throttle_8cs_source_1l00008"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_1a79d1a34596c9b316513ff6efa3431b3d">00008</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_1a79d1a34596c9b316513ff6efa3431b3d">Throttle</link>(TimeSpan&#32;throttleTimeSpan)
<anchor xml:id="__throttle_8cs_source_1l00009"/>00009 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_8cs_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_1a80bf021f3aac67745e00bc6dd722dd1a">ThrottleTimeSpan</link>&#32;=&#32;throttleTimeSpan;
<anchor xml:id="__throttle_8cs_source_1l00011"/>00011 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_8cs_source_1l00012"/>00012 
<anchor xml:id="__throttle_8cs_source_1l00013"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_1a9e265a2518027b7391c46a974a94c14d">00013</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_1a9e265a2518027b7391c46a974a94c14d">_workItemTask</link>&#32;=&#32;Task.CompletedTask;
<anchor xml:id="__throttle_8cs_source_1l00014"/>00014 
<anchor xml:id="__throttle_8cs_source_1l00015"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_1a80bf021f3aac67745e00bc6dd722dd1a">00015</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;TimeSpan&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_1a80bf021f3aac67745e00bc6dd722dd1a">ThrottleTimeSpan</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;}
<anchor xml:id="__throttle_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;
<anchor xml:id="__throttle_8cs_source_1l00017"/><link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_1a7e136803a9f3f8bdb774828cd6401f40">00017</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_1a7e136803a9f3f8bdb774828cd6401f40">Run</link>(Func&lt;CancellationToken,&#32;Task&gt;&#32;workItem)
<anchor xml:id="__throttle_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lock&#32;(_lockWorkItems)
<anchor xml:id="__throttle_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_workItemStack.Push(workItem);
<anchor xml:id="__throttle_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_workItemStack.Count&#32;&gt;&#32;1)
<anchor xml:id="__throttle_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__throttle_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_8cs_source_1l00025"/>00025 
<anchor xml:id="__throttle_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;previousTask&#32;=&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_1a9e265a2518027b7391c46a974a94c14d">_workItemTask</link>;
<anchor xml:id="__throttle_8cs_source_1l00027"/>00027 
<anchor xml:id="__throttle_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_1a9e265a2518027b7391c46a974a94c14d">_workItemTask</link>&#32;=&#32;Task.Run(async&#32;()&#32;=&gt;
<anchor xml:id="__throttle_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Await&#32;the&#32;previous&#32;work&#32;item&#32;task.</emphasis>
<anchor xml:id="__throttle_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;previousTask.ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__throttle_8cs_source_1l00032"/>00032 
<anchor xml:id="__throttle_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Func&lt;CancellationToken,&#32;Task&gt;&#32;popWorkItem;
<anchor xml:id="__throttle_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lock&#32;(_lockWorkItems)
<anchor xml:id="__throttle_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_workItemStack.Count&#32;==&#32;0)
<anchor xml:id="__throttle_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__throttle_8cs_source_1l00038"/>00038 
<anchor xml:id="__throttle_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popWorkItem&#32;=&#32;_workItemStack.Pop();
<anchor xml:id="__throttle_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_workItemStack.Clear();
<anchor xml:id="__throttle_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_8cs_source_1l00042"/>00042 
<anchor xml:id="__throttle_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;Task.WhenAll(
<anchor xml:id="__throttle_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popWorkItem.Invoke(CancellationToken.None),
<anchor xml:id="__throttle_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Task.Delay(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models_1_1_throttle_1a80bf021f3aac67745e00bc6dd722dd1a">ThrottleTimeSpan</link>))
<anchor xml:id="__throttle_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.ConfigureAwait(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__throttle_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
<anchor xml:id="__throttle_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_8cs_source_1l00049"/>00049 }
</programlisting></section>
