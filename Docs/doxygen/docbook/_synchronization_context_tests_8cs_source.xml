<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__synchronization_context_tests_8cs_source" xml:lang="en-US">
<title>SynchronizationContextTests.cs</title>
<indexterm><primary>Source/Tests/Ide/Adhoc/SynchronizationContextTests.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__synchronization_context_tests_8cs_source_1l00001"/><link linkend="_namespace_luthetus_1_1_ide_1_1_tests">00001</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_luthetus_1_1_ide_1_1_tests_1_1_adhoc">Luthetus.Ide.Tests.Adhoc</link>;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00002"/>00002 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00032"/><link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests">00032</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests">SynchronizationContextTests</link>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00033"/>00033 {
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00041"/><link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1acd375081173a230d49e43dab7601bbea">00041</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1acd375081173a230d49e43dab7601bbea">Synchronous</link>()
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;initialValue&#32;=&#32;2;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expectedValue&#32;=&#32;3;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00045"/>00045 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;x&#32;=&#32;initialValue;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x++;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00048"/>00048 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(expectedValue,&#32;x);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00051"/>00051 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00059"/><link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a0204609155382c9e2089d20874b2e00a">00059</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a0204609155382c9e2089d20874b2e00a">AsynchronousWithAwait</link>()
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;initialValue&#32;=&#32;2;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expectedValue&#32;=&#32;3;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00063"/>00063 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;x&#32;=&#32;initialValue;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;Task.Run(()&#32;=&gt;&#32;{&#32;x++;&#32;});
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00066"/>00066 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(expectedValue,&#32;x);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00069"/>00069 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00091"/>00091 <emphasis role="preprocessor">#pragma&#32;warning&#32;disable&#32;CS1998&#32;</emphasis><emphasis role="comment">//&#32;Async&#32;method&#32;lacks&#32;&apos;await&apos;&#32;operators&#32;and&#32;will&#32;run&#32;synchronously</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00092"/><link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1ac084ebb129deff829b4fc8f6b98f2e04">00092</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1ac084ebb129deff829b4fc8f6b98f2e04">AsynchronousNoAwait</link>()
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00093"/>00093 <emphasis role="preprocessor">#pragma&#32;warning&#32;restore&#32;CS1998&#32;</emphasis><emphasis role="comment">//&#32;Async&#32;method&#32;lacks&#32;&apos;await&apos;&#32;operators&#32;and&#32;will&#32;run&#32;synchronously</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;initialValue&#32;=&#32;2;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expectedValue&#32;=&#32;2;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00097"/>00097 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;x&#32;=&#32;initialValue;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00099"/>00099 <emphasis role="preprocessor">#pragma&#32;warning&#32;disable&#32;CS4014&#32;</emphasis><emphasis role="comment">//&#32;Because&#32;this&#32;call&#32;is&#32;not&#32;awaited,&#32;execution&#32;of&#32;the&#32;current&#32;method&#32;continues&#32;before&#32;the&#32;call&#32;is&#32;completed</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Task.Run(()&#32;=&gt;&#32;{&#32;x++;&#32;});
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00101"/>00101 <emphasis role="preprocessor">#pragma&#32;warning&#32;restore&#32;CS4014&#32;</emphasis><emphasis role="comment">//&#32;Because&#32;this&#32;call&#32;is&#32;not&#32;awaited,&#32;execution&#32;of&#32;the&#32;current&#32;method&#32;continues&#32;before&#32;the&#32;call&#32;is&#32;completed</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00102"/>00102 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(expectedValue,&#32;x);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00105"/>00105 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00112"/>00112 <emphasis role="preprocessor">#pragma&#32;warning&#32;disable&#32;CS1998&#32;</emphasis><emphasis role="comment">//&#32;Async&#32;method&#32;lacks&#32;&apos;await&apos;&#32;operators&#32;and&#32;will&#32;run&#32;synchronously</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00113"/><link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1aa60f58c443bfaf0e11fea31a65f3fba7">00113</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1aa60f58c443bfaf0e11fea31a65f3fba7">AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByExecutingSynchronousCodeBetweenItAndTheIncrementation_LargeForLoopUpperBound</link>()
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00114"/>00114 <emphasis role="preprocessor">#pragma&#32;warning&#32;restore&#32;CS1998&#32;</emphasis><emphasis role="comment">//&#32;Async&#32;method&#32;lacks&#32;&apos;await&apos;&#32;operators&#32;and&#32;will&#32;run&#32;synchronously</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;initialValue&#32;=&#32;2;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expectedValue&#32;=&#32;3;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00118"/>00118 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;x&#32;=&#32;initialValue;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00120"/>00120 <emphasis role="preprocessor">#pragma&#32;warning&#32;disable&#32;CS4014&#32;</emphasis><emphasis role="comment">//&#32;Because&#32;this&#32;call&#32;is&#32;not&#32;awaited,&#32;execution&#32;of&#32;the&#32;current&#32;method&#32;continues&#32;before&#32;the&#32;call&#32;is&#32;completed</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Task.Run(()&#32;=&gt;&#32;{&#32;x++;&#32;});
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00122"/>00122 <emphasis role="preprocessor">#pragma&#32;warning&#32;restore&#32;CS4014&#32;</emphasis><emphasis role="comment">//&#32;Because&#32;this&#32;call&#32;is&#32;not&#32;awaited,&#32;execution&#32;of&#32;the&#32;current&#32;method&#32;continues&#32;before&#32;the&#32;call&#32;is&#32;completed</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00123"/>00123 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(var&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;1_000_000;&#32;i++)
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;I&#32;leave&#32;this&#32;empty&#32;could&#32;the&#32;compiler&#32;decide&#32;to&#32;&apos;optimize&apos;&#32;it&#32;out,</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;on&#32;the&#32;basis&#32;that&#32;it&#32;has&#32;an&#32;empty&#32;code&#32;block?</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00129"/>00129 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(expectedValue,&#32;x);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00132"/>00132 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00173"/>00173 <emphasis role="preprocessor">#pragma&#32;warning&#32;disable&#32;CS1998&#32;</emphasis><emphasis role="comment">//&#32;Async&#32;method&#32;lacks&#32;&apos;await&apos;&#32;operators&#32;and&#32;will&#32;run&#32;synchronously</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00174"/><link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a3b1e5f4e5ad4be57203500b92644a4a9">00174</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a3b1e5f4e5ad4be57203500b92644a4a9">AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByExecutingSynchronousCodeBetweenItAndTheIncrementation_SmallForLoopUpperBound</link>()
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00175"/>00175 <emphasis role="preprocessor">#pragma&#32;warning&#32;restore&#32;CS1998&#32;</emphasis><emphasis role="comment">//&#32;Async&#32;method&#32;lacks&#32;&apos;await&apos;&#32;operators&#32;and&#32;will&#32;run&#32;synchronously</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;initialValue&#32;=&#32;2;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expectedValue&#32;=&#32;2;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00179"/>00179 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;x&#32;=&#32;initialValue;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00181"/>00181 <emphasis role="preprocessor">#pragma&#32;warning&#32;disable&#32;CS4014&#32;</emphasis><emphasis role="comment">//&#32;Because&#32;this&#32;call&#32;is&#32;not&#32;awaited,&#32;execution&#32;of&#32;the&#32;current&#32;method&#32;continues&#32;before&#32;the&#32;call&#32;is&#32;completed</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Task.Run(()&#32;=&gt;&#32;{&#32;x++;&#32;});
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00183"/>00183 <emphasis role="preprocessor">#pragma&#32;warning&#32;restore&#32;CS4014&#32;</emphasis><emphasis role="comment">//&#32;Because&#32;this&#32;call&#32;is&#32;not&#32;awaited,&#32;execution&#32;of&#32;the&#32;current&#32;method&#32;continues&#32;before&#32;the&#32;call&#32;is&#32;completed</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00184"/>00184 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(var&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;10;&#32;i++)
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;I&#32;leave&#32;this&#32;empty&#32;could&#32;the&#32;compiler&#32;decide&#32;to&#32;&apos;optimize&apos;&#32;it&#32;out,</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;on&#32;the&#32;basis&#32;that&#32;it&#32;has&#32;an&#32;empty&#32;code&#32;block?</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00190"/>00190 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(expectedValue,&#32;x);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00193"/>00193 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00198"/><link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a9a95ae60246c950f91694f80a8357bc9">00198</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a9a95ae60246c950f91694f80a8357bc9">AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementation_TaskDelayNonZero</link>()
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;initialValue&#32;=&#32;2;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expectedValue&#32;=&#32;3;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00202"/>00202 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;x&#32;=&#32;initialValue;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00204"/>00204 <emphasis role="preprocessor">#pragma&#32;warning&#32;disable&#32;CS4014&#32;</emphasis><emphasis role="comment">//&#32;Because&#32;this&#32;call&#32;is&#32;not&#32;awaited,&#32;execution&#32;of&#32;the&#32;current&#32;method&#32;continues&#32;before&#32;the&#32;call&#32;is&#32;completed</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Task.Run(()&#32;=&gt;&#32;{&#32;x++;&#32;});
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00206"/>00206 <emphasis role="preprocessor">#pragma&#32;warning&#32;restore&#32;CS4014&#32;</emphasis><emphasis role="comment">//&#32;Because&#32;this&#32;call&#32;is&#32;not&#32;awaited,&#32;execution&#32;of&#32;the&#32;current&#32;method&#32;continues&#32;before&#32;the&#32;call&#32;is&#32;completed</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00207"/>00207 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;Task.Delay(100);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00209"/>00209 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(expectedValue,&#32;x);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00212"/>00212 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00216"/>00216 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00217"/><link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a188ba522857c739aa993046d5f2db7f1">00217</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a188ba522857c739aa993046d5f2db7f1">AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementationTaskDelayZero</link>()
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00218"/>00218 &#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;initialValue&#32;=&#32;2;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expectedValue&#32;=&#32;2;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00221"/>00221 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;x&#32;=&#32;initialValue;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00223"/>00223 <emphasis role="preprocessor">#pragma&#32;warning&#32;disable&#32;CS4014&#32;</emphasis><emphasis role="comment">//&#32;Because&#32;this&#32;call&#32;is&#32;not&#32;awaited,&#32;execution&#32;of&#32;the&#32;current&#32;method&#32;continues&#32;before&#32;the&#32;call&#32;is&#32;completed</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Task.Run(()&#32;=&gt;&#32;{&#32;x++;&#32;});
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00225"/>00225 <emphasis role="preprocessor">#pragma&#32;warning&#32;restore&#32;CS4014&#32;</emphasis><emphasis role="comment">//&#32;Because&#32;this&#32;call&#32;is&#32;not&#32;awaited,&#32;execution&#32;of&#32;the&#32;current&#32;method&#32;continues&#32;before&#32;the&#32;call&#32;is&#32;completed</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00226"/>00226 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;Task.Delay(0);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00228"/>00228 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(expectedValue,&#32;x);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00230"/>00230 &#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00231"/>00231 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00245"/>00245 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00246"/><link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a6171884db76ec3c2d3426b068743d8f2">00246</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a6171884db76ec3c2d3426b068743d8f2">AsynchronousNoAwait_TryToGetTheNotAwaitedTaskToComplete_ByAwaitingATaskBetweenItAndTheIncrementationTaskDelayOne</link>()
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;initialValue&#32;=&#32;2;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expectedValue&#32;=&#32;3;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00250"/>00250 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;x&#32;=&#32;initialValue;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00252"/>00252 <emphasis role="preprocessor">#pragma&#32;warning&#32;disable&#32;CS4014&#32;</emphasis><emphasis role="comment">//&#32;Because&#32;this&#32;call&#32;is&#32;not&#32;awaited,&#32;execution&#32;of&#32;the&#32;current&#32;method&#32;continues&#32;before&#32;the&#32;call&#32;is&#32;completed</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Task.Run(()&#32;=&gt;&#32;{&#32;x++;&#32;});
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00254"/>00254 <emphasis role="preprocessor">#pragma&#32;warning&#32;restore&#32;CS4014&#32;</emphasis><emphasis role="comment">//&#32;Because&#32;this&#32;call&#32;is&#32;not&#32;awaited,&#32;execution&#32;of&#32;the&#32;current&#32;method&#32;continues&#32;before&#32;the&#32;call&#32;is&#32;completed</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00255"/>00255 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;Task.Delay(1);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00257"/>00257 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(expectedValue,&#32;x);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00259"/>00259 &#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00260"/>00260 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00283"/>00283 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00284"/><link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a7b892bae8808820a3accf384ec109758">00284</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a7b892bae8808820a3accf384ec109758">Concurrency_WhenAll</link>()
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;delayOne&#32;=&#32;Task.Delay(1_500);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;delayTwo&#32;=&#32;Task.Delay(1_500);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00288"/>00288 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;idea&#32;here&#32;is&#32;to&#32;await&#32;two&#32;&apos;Task.Delay&apos;(s)</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;see&#32;that&#32;the&#32;duration&#32;of&#32;this&#32;test&#32;was&#32;less&#32;than</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;sum&#32;of&#32;delayOne&#32;and&#32;delayTwo.</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;Task.WhenAll(<emphasis role="keyword">new</emphasis>[]&#32;{&#32;delayOne,&#32;delayTwo&#32;});
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00293"/>00293 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;But,&#32;is&#32;this&#32;even&#32;concurrency?</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;unit&#32;test&#32;seems&#32;runnable&#32;as&#32;either&#32;concurrently,</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;or&#32;in&#32;parallel,&#32;and&#32;that&#32;both&#32;are&#32;equivalent</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;from&#32;the&#32;perspective&#32;of&#32;a&#32;user.</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;How&#32;do&#32;I&#32;know&#32;if&#32;this&#32;test&#32;gets&#32;ran&#32;concurrently&#32;or&#32;in&#32;parallel?</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00300"/>00300 &#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00301"/>00301 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00302"/>00302 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00303"/><link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a5b85d3fc42489018135560ed815657b6">00303</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a5b85d3fc42489018135560ed815657b6">Concurrency_OneAtATime</link>()
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00304"/>00304 &#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;idea&#32;here&#32;is&#32;to&#32;await&#32;two&#32;&apos;Task.Delay&apos;(s)</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;see&#32;that&#32;the&#32;duration&#32;of&#32;this&#32;test&#32;is&#32;greater&#32;than&#32;or&#32;equal&#32;to</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;sum&#32;of&#32;delayOne&#32;and&#32;delayTwo.</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;Task.Delay(1_500);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;Task.Delay(1_500);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00310"/>00310 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;I&apos;m&#32;getting&#32;2&#32;seconds&#32;for&#32;both&#32;of&#32;these&#32;tests?</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Presumably&#32;because&#32;the&#32;&apos;var&#32;delayOne&#32;=&#32;Task.Delay(...)&apos;</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;starts&#32;the&#32;delay,</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;I&#32;need&#32;to&#32;instead&#32;move&#32;the&#32;await&#32;to&#32;the&#32;same&#32;line</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;where&#32;the&#32;variables&#32;are.</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;After&#32;moving&#32;the&#32;await&#32;to&#32;be&#32;done&#32;immediately,</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;I&apos;m&#32;getting&#32;1.5sec&#32;vs&#32;3sec&#32;when&#32;using&#32;a&#32;1,500ms&#32;delay</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;both&#32;invocations.</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00320"/>00320 &#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00321"/>00321 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00322"/>00322 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.parallel</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00323"/>00323 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>Test
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00324"/>00324 &#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;N&#32;=&#32;1000;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00326"/>00326 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;TestMethod()
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Using&#32;a&#32;named&#32;method.</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Parallel.For(0,&#32;N,&#32;Method2);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00331"/>00331 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Using&#32;an&#32;anonymous&#32;method.</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Parallel.For(0,&#32;N,&#32;delegate&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i)
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;Work.</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00337"/>00337 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Using&#32;a&#32;lambda&#32;expression.</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Parallel.For(0,&#32;N,&#32;i&#32;=&gt;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;Work.</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00344"/>00344 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Method2(<emphasis role="keywordtype">int</emphasis>&#32;i)
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;work.</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00349"/>00349 &#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00350"/>00350 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00354"/>00354 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00355"/><link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1aabd5fd38d0b6f33648437452adcd87b7">00355</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1aabd5fd38d0b6f33648437452adcd87b7">Parallel_Sync</link>()
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00356"/>00356 &#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lockSecondsWaited&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;object();
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expectedSecondsWaited&#32;=&#32;10;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;actualSecondsWaited&#32;=&#32;0;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00360"/>00360 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;parallelLoopResult&#32;=&#32;Parallel.For(0,&#32;expectedSecondsWaited,&#32;iteration&#32;=&gt;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;I&#32;tried&#32;100&#32;seconds,&#32;the&#32;actualSecondsWaited&#32;was&#32;88,</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;but&#32;I&#32;suspect&#32;that&#32;some&#32;&apos;thread&#32;safe&apos;&#32;logic&#32;is&#32;needed</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;when&#32;incrementing&#32;the&#32;&apos;actualSecondsWaited&apos;.</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;After&#32;adding&#32;&apos;thread&#32;safety&apos;&#32;to&#32;the&#32;incrementation,&#32;the&#32;actualSecondsWaited&#32;was&#32;100,</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;the&#32;total&#32;time&#32;was&#32;16.9&#32;sec.&#32;I&#32;will&#32;lower&#32;the&#32;expectedSecondsWaited,&#32;because&#32;at&#32;100&#32;it&#32;takes&#32;a&#32;while.</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Task.Delay(1_000)
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.ContinueWith(x&#32;=&gt;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lock&#32;(lockSecondsWaited)
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actualSecondsWaited++;
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}).Wait();
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00378"/>00378 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(expectedSecondsWaited,&#32;actualSecondsWaited);
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00380"/>00380 &#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00381"/>00381 
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00385"/>00385 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00386"/><link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a0ef8e06e0da6ebd62edaed01c4689ae4">00386</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_ide_1_1_tests_1_1_adhoc_1_1_synchronization_context_tests_1a0ef8e06e0da6ebd62edaed01c4689ae4">Parallel_Async</link>()
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00387"/>00387 &#32;&#32;&#32;&#32;{
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;This&#32;and&#32;more,&#32;I&#32;have&#32;an&#32;idea&#32;about&#32;the&#32;application&#32;and&#32;want&#32;to&#32;look&#32;into&#32;that&#32;before&#32;continuing&#32;these.</emphasis>
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00389"/>00389 &#32;&#32;&#32;&#32;}
<anchor xml:id="__synchronization_context_tests_8cs_source_1l00390"/>00390 }
</programlisting></section>
