<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__string_walker_tests_8cs_source" xml:lang="en-US">
<title>StringWalkerTests.cs</title>
<indexterm><primary>Source/Tests/TextEditor/Basis/CompilerServices/StringWalkerTests.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__string_walker_tests_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis>System.Collections.Immutable;
<anchor xml:id="__string_walker_tests_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models">Luthetus.TextEditor.RazorLib.Lexers.Models</link>;
<anchor xml:id="__string_walker_tests_8cs_source_1l00003"/>00003 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_generic_lexer_1_1_decoration">Luthetus.TextEditor.RazorLib.CompilerServices.GenericLexer.Decoration</link>;
<anchor xml:id="__string_walker_tests_8cs_source_1l00004"/>00004 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_utility">Luthetus.TextEditor.RazorLib.CompilerServices.Utility</link>;
<anchor xml:id="__string_walker_tests_8cs_source_1l00005"/>00005 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_facts">Luthetus.TextEditor.RazorLib.CompilerServices.Facts</link>;
<anchor xml:id="__string_walker_tests_8cs_source_1l00006"/>00006 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_tests_1_1_basis_1_1_text_editors_1_1_models">Luthetus.TextEditor.Tests.Basis.TextEditors.Models</link>;
<anchor xml:id="__string_walker_tests_8cs_source_1l00007"/>00007 
<anchor xml:id="__string_walker_tests_8cs_source_1l00008"/>00008 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_tests_1_1_basis_1_1_compiler_services">Luthetus.TextEditor.Tests.Basis.CompilerServices</link>;
<anchor xml:id="__string_walker_tests_8cs_source_1l00009"/>00009 
<anchor xml:id="__string_walker_tests_8cs_source_1l00013"/><link linkend="_class_luthetus_1_1_text_editor_1_1_tests_1_1_basis_1_1_compiler_services_1_1_string_walker_tests">00013</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_luthetus_1_1_text_editor_1_1_tests_1_1_basis_1_1_compiler_services_1_1_string_walker_tests">StringWalkerTests</link>
<anchor xml:id="__string_walker_tests_8cs_source_1l00014"/>00014 {
<anchor xml:id="__string_walker_tests_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__string_walker_tests_8cs_source_1l00041"/><link linkend="_class_luthetus_1_1_text_editor_1_1_tests_1_1_basis_1_1_compiler_services_1_1_string_walker_tests_1a9aaad456119366fd13e389a73263d228">00041</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_text_editor_1_1_tests_1_1_basis_1_1_compiler_services_1_1_string_walker_tests_1a9aaad456119366fd13e389a73263d228">Constructor</link>()
<anchor xml:id="__string_walker_tests_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;/unitTesting.txt&quot;</emphasis>);
<anchor xml:id="__string_walker_tests_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<link linkend="_class_luthetus_1_1_text_editor_1_1_tests_1_1_basis_1_1_text_editors_1_1_models_1_1_test_constants">TestConstants</link>.<link linkend="_class_luthetus_1_1_text_editor_1_1_tests_1_1_basis_1_1_text_editors_1_1_models_1_1_test_constants_1a7d84f6aa424d602f63231ee5147681da">SOURCE_TEXT</link>;
<anchor xml:id="__string_walker_tests_8cs_source_1l00045"/>00045 
<anchor xml:id="__string_walker_tests_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;stringWalker&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_utility_1_1_string_walker">StringWalker</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00047"/>00047 
<anchor xml:id="__string_walker_tests_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;initial&#32;values&#32;of&#32;Properties</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;stringWalker.PositionIndex);
<anchor xml:id="__string_walker_tests_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(resourceUri,&#32;stringWalker.ResourceUri);
<anchor xml:id="__string_walker_tests_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(sourceText,&#32;stringWalker.SourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;H&apos;</emphasis>,&#32;stringWalker.CurrentCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;e&apos;</emphasis>,&#32;stringWalker.NextCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;Hello&#32;World!\n7&#32;Pillows\n&#32;\n,abc123&quot;</emphasis>,&#32;stringWalker.RemainingText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(stringWalker.IsEof);
<anchor xml:id="__string_walker_tests_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00058"/>00058 
<anchor xml:id="__string_walker_tests_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;a&#32;character</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;H&apos;</emphasis>,&#32;stringWalker.ReadCharacter());
<anchor xml:id="__string_walker_tests_8cs_source_1l00062"/>00062 
<anchor xml:id="__string_walker_tests_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;values&#32;of&#32;Properties&#32;after&#32;having&#32;read&#32;a&#32;character</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;stringWalker.PositionIndex);
<anchor xml:id="__string_walker_tests_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(resourceUri,&#32;stringWalker.ResourceUri);
<anchor xml:id="__string_walker_tests_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(sourceText,&#32;stringWalker.SourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;e&apos;</emphasis>,&#32;stringWalker.CurrentCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;l&apos;</emphasis>,&#32;stringWalker.NextCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;ello&#32;World!\n7&#32;Pillows\n&#32;\n,abc123&quot;</emphasis>,&#32;stringWalker.RemainingText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(stringWalker.IsEof);
<anchor xml:id="__string_walker_tests_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00072"/>00072 
<anchor xml:id="__string_walker_tests_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Peek&#32;a&#32;character</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Peek&#32;current&#32;character</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;e&apos;</emphasis>,&#32;stringWalker.PeekCharacter(0));
<anchor xml:id="__string_walker_tests_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Peek&#32;next&#32;character</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;l&apos;</emphasis>,&#32;stringWalker.PeekCharacter(1));
<anchor xml:id="__string_walker_tests_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Peek&#32;the&#32;character&#32;two&#32;indices&#32;higher</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;l&apos;</emphasis>,&#32;stringWalker.PeekCharacter(2));
<anchor xml:id="__string_walker_tests_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Peek&#32;the&#32;character&#32;three&#32;indices&#32;higher</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;o&apos;</emphasis>,&#32;stringWalker.PeekCharacter(3));
<anchor xml:id="__string_walker_tests_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__string_walker_tests_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;values&#32;of&#32;Properties&#32;after&#32;having&#32;peeked&#32;a&#32;character</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;These&#32;values&#32;should&#32;not&#32;have&#32;changed&#32;since&#32;the&#32;peek&#32;method&#32;was&#32;used.</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;stringWalker.PositionIndex);
<anchor xml:id="__string_walker_tests_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(resourceUri,&#32;stringWalker.ResourceUri);
<anchor xml:id="__string_walker_tests_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(sourceText,&#32;stringWalker.SourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;e&apos;</emphasis>,&#32;stringWalker.CurrentCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;l&apos;</emphasis>,&#32;stringWalker.NextCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;ello&#32;World!\n7&#32;Pillows\n&#32;\n,abc123&quot;</emphasis>,&#32;stringWalker.RemainingText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(stringWalker.IsEof);
<anchor xml:id="__string_walker_tests_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00094"/>00094 
<anchor xml:id="__string_walker_tests_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Backtrack&#32;a&#32;character</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;H&apos;</emphasis>,&#32;stringWalker.BacktrackCharacter());
<anchor xml:id="__string_walker_tests_8cs_source_1l00098"/>00098 
<anchor xml:id="__string_walker_tests_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;values&#32;of&#32;Properties&#32;after&#32;having&#32;backtracked&#32;a&#32;character</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;These&#32;values&#32;should&#32;be&#32;equal&#32;to&#32;the&#32;initial&#32;state.</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;stringWalker.PositionIndex);
<anchor xml:id="__string_walker_tests_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(resourceUri,&#32;stringWalker.ResourceUri);
<anchor xml:id="__string_walker_tests_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(sourceText,&#32;stringWalker.SourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;H&apos;</emphasis>,&#32;stringWalker.CurrentCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;e&apos;</emphasis>,&#32;stringWalker.NextCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;Hello&#32;World!\n7&#32;Pillows\n&#32;\n,abc123&quot;</emphasis>,&#32;stringWalker.RemainingText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(stringWalker.IsEof);
<anchor xml:id="__string_walker_tests_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00109"/>00109 
<anchor xml:id="__string_walker_tests_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;a&#32;range&#32;of&#32;characters</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;goalString&#32;=&#32;<emphasis role="stringliteral">&quot;Hello&quot;</emphasis>;
<anchor xml:id="__string_walker_tests_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;charsToRead&#32;=&#32;goalString.Length;
<anchor xml:id="__string_walker_tests_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(goalString,&#32;stringWalker.ReadRange(charsToRead));
<anchor xml:id="__string_walker_tests_8cs_source_1l00115"/>00115 
<anchor xml:id="__string_walker_tests_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;values&#32;of&#32;Properties&#32;after&#32;having&#32;read&#32;a&#32;range&#32;of&#32;characters</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(goalString.Length,&#32;stringWalker.PositionIndex);
<anchor xml:id="__string_walker_tests_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(resourceUri,&#32;stringWalker.ResourceUri);
<anchor xml:id="__string_walker_tests_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(sourceText,&#32;stringWalker.SourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>,&#32;stringWalker.CurrentCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;W&apos;</emphasis>,&#32;stringWalker.NextCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;&#32;World!\n7&#32;Pillows\n&#32;\n,abc123&quot;</emphasis>,&#32;stringWalker.RemainingText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(stringWalker.IsEof);
<anchor xml:id="__string_walker_tests_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00125"/>00125 
<anchor xml:id="__string_walker_tests_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Peek&#32;a&#32;range&#32;of&#32;characters</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;goalString&#32;=&#32;<emphasis role="stringliteral">&quot;World&quot;</emphasis>;
<anchor xml:id="__string_walker_tests_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;charsToRead&#32;=&#32;goalString.Length;
<anchor xml:id="__string_walker_tests_8cs_source_1l00130"/>00130 
<anchor xml:id="__string_walker_tests_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;cursor&#32;is&#32;one&#32;character&#32;away&#32;from&#32;reading&#32;the&#32;goal&#32;string.</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;So&#32;another&#32;assertion&#32;can&#32;test&#32;the&#32;&apos;offset&apos;&#32;argument&#32;of&#32;&apos;PeekRange&apos;</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;&#32;Worl&quot;</emphasis>,&#32;stringWalker.PeekRange(0,&#32;charsToRead));
<anchor xml:id="__string_walker_tests_8cs_source_1l00134"/>00134 
<anchor xml:id="__string_walker_tests_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Increase&#32;index&#32;to&#32;begin&#32;reading&#32;by&#32;1.&#32;This&#32;puts&#32;the&#32;cursor</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;at&#32;the&#32;correct&#32;position&#32;to&#32;read&#32;the&#32;goalString.</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(goalString,&#32;stringWalker.PeekRange(1,&#32;charsToRead));
<anchor xml:id="__string_walker_tests_8cs_source_1l00138"/>00138 
<anchor xml:id="__string_walker_tests_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;values&#32;of&#32;Properties&#32;after&#32;having&#32;peeked&#32;a&#32;range&#32;of&#32;characters</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;These&#32;values&#32;should&#32;be&#32;unchanged&#32;from&#32;the&#32;&apos;read&#32;range&apos;&#32;assertions</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(goalString.Length,&#32;stringWalker.PositionIndex);
<anchor xml:id="__string_walker_tests_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(resourceUri,&#32;stringWalker.ResourceUri);
<anchor xml:id="__string_walker_tests_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(sourceText,&#32;stringWalker.SourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>,&#32;stringWalker.CurrentCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;W&apos;</emphasis>,&#32;stringWalker.NextCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;&#32;World!\n7&#32;Pillows\n&#32;\n,abc123&quot;</emphasis>,&#32;stringWalker.RemainingText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(stringWalker.IsEof);
<anchor xml:id="__string_walker_tests_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00149"/>00149 
<anchor xml:id="__string_walker_tests_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Backtrack&#32;a&#32;range&#32;of&#32;characters</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;By&#32;backtracking&#32;a&#32;length&#32;equal&#32;to&#32;the&#32;current&#32;position&#32;index,</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;one&#32;returns&#32;to&#32;the&#32;initial&#32;state</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;result&#32;=&#32;stringWalker.BacktrackRange(stringWalker.PositionIndex);
<anchor xml:id="__string_walker_tests_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>(<emphasis role="stringliteral">&quot;Hello&quot;</emphasis>.Reverse().ToArray()),&#32;result);
<anchor xml:id="__string_walker_tests_8cs_source_1l00156"/>00156 
<anchor xml:id="__string_walker_tests_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;initial&#32;values&#32;of&#32;Properties</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;stringWalker.PositionIndex);
<anchor xml:id="__string_walker_tests_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(resourceUri,&#32;stringWalker.ResourceUri);
<anchor xml:id="__string_walker_tests_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(sourceText,&#32;stringWalker.SourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;H&apos;</emphasis>,&#32;stringWalker.CurrentCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;e&apos;</emphasis>,&#32;stringWalker.NextCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;Hello&#32;World!\n7&#32;Pillows\n&#32;\n,abc123&quot;</emphasis>,&#32;stringWalker.RemainingText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(stringWalker.IsEof);
<anchor xml:id="__string_walker_tests_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00168"/>00168 
<anchor xml:id="__string_walker_tests_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Peek&#32;the&#32;next&#32;word</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;Hello&quot;</emphasis>,&#32;stringWalker.PeekNextWord());
<anchor xml:id="__string_walker_tests_8cs_source_1l00172"/>00172 
<anchor xml:id="__string_walker_tests_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;values&#32;of&#32;Properties.</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;values&#32;should&#32;not&#32;have&#32;changed&#32;from&#32;&apos;Backtrack&apos;&#32;since&#32;a&#32;peek&#32;was&#32;performed.</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;stringWalker.PositionIndex);
<anchor xml:id="__string_walker_tests_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(resourceUri,&#32;stringWalker.ResourceUri);
<anchor xml:id="__string_walker_tests_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(sourceText,&#32;stringWalker.SourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;H&apos;</emphasis>,&#32;stringWalker.CurrentCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;e&apos;</emphasis>,&#32;stringWalker.NextCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;Hello&#32;World!\n7&#32;Pillows\n&#32;\n,abc123&quot;</emphasis>,&#32;stringWalker.RemainingText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(stringWalker.IsEof);
<anchor xml:id="__string_walker_tests_8cs_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00185"/>00185 
<anchor xml:id="__string_walker_tests_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Peek&#32;for&#32;substring</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(stringWalker.PeekForSubstring(<emphasis role="stringliteral">&quot;AlphabetSoup&quot;</emphasis>));
<anchor xml:id="__string_walker_tests_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(stringWalker.PeekForSubstring(<emphasis role="stringliteral">&quot;Hello&quot;</emphasis>));
<anchor xml:id="__string_walker_tests_8cs_source_1l00190"/>00190 
<anchor xml:id="__string_walker_tests_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;values&#32;of&#32;Properties.</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;values&#32;should&#32;not&#32;have&#32;changed&#32;from&#32;&apos;Peek&#32;the&#32;next&#32;word&apos;&#32;since&#32;a&#32;peek&#32;was&#32;performed.</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;stringWalker.PositionIndex);
<anchor xml:id="__string_walker_tests_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(resourceUri,&#32;stringWalker.ResourceUri);
<anchor xml:id="__string_walker_tests_8cs_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(sourceText,&#32;stringWalker.SourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;H&apos;</emphasis>,&#32;stringWalker.CurrentCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;e&apos;</emphasis>,&#32;stringWalker.NextCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;Hello&#32;World!\n7&#32;Pillows\n&#32;\n,abc123&quot;</emphasis>,&#32;stringWalker.RemainingText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(stringWalker.IsEof);
<anchor xml:id="__string_walker_tests_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00203"/>00203 
<anchor xml:id="__string_walker_tests_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Peek&#32;for&#32;a&#32;range&#32;of&#32;substrings</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;substringsList&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;string&gt;&#32;
<anchor xml:id="__string_walker_tests_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;AlphabetSoup&quot;</emphasis>,
<anchor xml:id="__string_walker_tests_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Abc123&quot;</emphasis>,
<anchor xml:id="__string_walker_tests_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Apple&#32;Sauce&quot;</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__string_walker_tests_8cs_source_1l00212"/>00212 
<anchor xml:id="__string_walker_tests_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;false&#32;result</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(stringWalker.PeekForSubstringRange(
<anchor xml:id="__string_walker_tests_8cs_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;substringsList.ToImmutableArray(),
<anchor xml:id="__string_walker_tests_8cs_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;var&#32;matchedOn));
<anchor xml:id="__string_walker_tests_8cs_source_1l00218"/>00218 
<anchor xml:id="__string_walker_tests_8cs_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(matchedOn);
<anchor xml:id="__string_walker_tests_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00221"/>00221 
<anchor xml:id="__string_walker_tests_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;true&#32;result</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;substringsList.Add(<emphasis role="stringliteral">&quot;Hello&quot;</emphasis>);
<anchor xml:id="__string_walker_tests_8cs_source_1l00225"/>00225 
<anchor xml:id="__string_walker_tests_8cs_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(stringWalker.PeekForSubstringRange(
<anchor xml:id="__string_walker_tests_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;substringsList.ToImmutableArray(),
<anchor xml:id="__string_walker_tests_8cs_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;var&#32;matchedOn));
<anchor xml:id="__string_walker_tests_8cs_source_1l00229"/>00229 
<anchor xml:id="__string_walker_tests_8cs_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;Hello&quot;</emphasis>,&#32;matchedOn);
<anchor xml:id="__string_walker_tests_8cs_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00232"/>00232 
<anchor xml:id="__string_walker_tests_8cs_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;values&#32;of&#32;Properties.</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;values&#32;should&#32;not&#32;have&#32;changed&#32;from&#32;&apos;Peek&#32;for&#32;substring&apos;&#32;since&#32;a&#32;peek&#32;was&#32;performed.</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(0,&#32;stringWalker.PositionIndex);
<anchor xml:id="__string_walker_tests_8cs_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(resourceUri,&#32;stringWalker.ResourceUri);
<anchor xml:id="__string_walker_tests_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(sourceText,&#32;stringWalker.SourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;H&apos;</emphasis>,&#32;stringWalker.CurrentCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;e&apos;</emphasis>,&#32;stringWalker.NextCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;Hello&#32;World!\n7&#32;Pillows\n&#32;\n,abc123&quot;</emphasis>,&#32;stringWalker.RemainingText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(stringWalker.IsEof);
<anchor xml:id="__string_walker_tests_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00245"/>00245 
<anchor xml:id="__string_walker_tests_8cs_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;until&#32;a&#32;character</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expectedOutput&#32;=&#32;<emphasis role="stringliteral">&quot;Hello&quot;</emphasis>&#32;+&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
<anchor xml:id="__string_walker_tests_8cs_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;actualOutput&#32;=&#32;stringWalker.ReadUntil(<emphasis role="charliteral">&apos;W&apos;</emphasis>);
<anchor xml:id="__string_walker_tests_8cs_source_1l00250"/>00250 
<anchor xml:id="__string_walker_tests_8cs_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(expectedOutput,&#32;actualOutput);
<anchor xml:id="__string_walker_tests_8cs_source_1l00252"/>00252 
<anchor xml:id="__string_walker_tests_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;values&#32;of&#32;Properties.</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(expectedOutput.Length,&#32;stringWalker.PositionIndex);
<anchor xml:id="__string_walker_tests_8cs_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(resourceUri,&#32;stringWalker.ResourceUri);
<anchor xml:id="__string_walker_tests_8cs_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(sourceText,&#32;stringWalker.SourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;W&apos;</emphasis>,&#32;stringWalker.CurrentCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;o&apos;</emphasis>,&#32;stringWalker.NextCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;World!\n7&#32;Pillows\n&#32;\n,abc123&quot;</emphasis>,&#32;stringWalker.RemainingText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(stringWalker.IsEof);
<anchor xml:id="__string_walker_tests_8cs_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00264"/>00264 
<anchor xml:id="__string_walker_tests_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;a&#32;line</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expectedOutput&#32;=&#32;<emphasis role="stringliteral">&quot;World!&quot;</emphasis>;
<anchor xml:id="__string_walker_tests_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;actualOutput&#32;=&#32;stringWalker.ReadLine();
<anchor xml:id="__string_walker_tests_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__string_walker_tests_8cs_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(expectedOutput,&#32;actualOutput);
<anchor xml:id="__string_walker_tests_8cs_source_1l00271"/>00271 
<anchor xml:id="__string_walker_tests_8cs_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert&#32;values&#32;of&#32;Properties.</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(12,&#32;stringWalker.PositionIndex);
<anchor xml:id="__string_walker_tests_8cs_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(resourceUri,&#32;stringWalker.ResourceUri);
<anchor xml:id="__string_walker_tests_8cs_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(sourceText,&#32;stringWalker.SourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;\n&apos;</emphasis>,&#32;stringWalker.CurrentCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;7&apos;</emphasis>,&#32;stringWalker.NextCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;\n7&#32;Pillows\n&#32;\n,abc123&quot;</emphasis>,&#32;stringWalker.RemainingText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.False(stringWalker.IsEof);
<anchor xml:id="__string_walker_tests_8cs_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00283"/>00283 
<anchor xml:id="__string_walker_tests_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;a&#32;word-tuple</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;whitespace&#32;as&#32;to&#32;position&#32;the&#32;cursor&#32;at&#32;a&#32;word.</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_&#32;=&#32;stringWalker.ReadWhitespace();
<anchor xml:id="__string_walker_tests_8cs_source_1l00288"/>00288 
<anchor xml:id="__string_walker_tests_8cs_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;textSpan&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a1ffd1a7706dfd364560b76d47467812f">TextEditorTextSpan</link>(
<anchor xml:id="__string_walker_tests_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;13,
<anchor xml:id="__string_walker_tests_8cs_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;14,
<anchor xml:id="__string_walker_tests_8cs_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">byte</emphasis>)<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_generic_lexer_1_1_decoration_1a7f6068f17a9d3ed70d4b8eefd0fcbcf0">GenericDecorationKind</link>.None,
<anchor xml:id="__string_walker_tests_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resourceUri,
<anchor xml:id="__string_walker_tests_8cs_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00295"/>00295 
<anchor xml:id="__string_walker_tests_8cs_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;expectedOutput&#32;=&#32;(textSpan,&#32;<emphasis role="stringliteral">&quot;7&quot;</emphasis>);
<anchor xml:id="__string_walker_tests_8cs_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;actualOutput&#32;=&#32;stringWalker.ReadWordTuple();
<anchor xml:id="__string_walker_tests_8cs_source_1l00298"/>00298 
<anchor xml:id="__string_walker_tests_8cs_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(expectedOutput,&#32;actualOutput);
<anchor xml:id="__string_walker_tests_8cs_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00301"/>00301 &#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00302"/>00302 &#32;&#32;&#32;&#32;
<anchor xml:id="__string_walker_tests_8cs_source_1l00306"/>00306 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__string_walker_tests_8cs_source_1l00307"/><link linkend="_class_luthetus_1_1_text_editor_1_1_tests_1_1_basis_1_1_compiler_services_1_1_string_walker_tests_1a2c02da46f1f1f8b469b3d8c74fb7cb94">00307</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_text_editor_1_1_tests_1_1_basis_1_1_compiler_services_1_1_string_walker_tests_1a2c02da46f1f1f8b469b3d8c74fb7cb94">ReadUnsignedNumericLiteral</link>()
<anchor xml:id="__string_walker_tests_8cs_source_1l00308"/>00308 &#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;decimal&#32;place</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;/unitTesting.txt&quot;</emphasis>);
<anchor xml:id="__string_walker_tests_8cs_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;123abc&quot;</emphasis>;
<anchor xml:id="__string_walker_tests_8cs_source_1l00313"/>00313 
<anchor xml:id="__string_walker_tests_8cs_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;stringWalker&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_utility_1_1_string_walker">StringWalker</link>(
<anchor xml:id="__string_walker_tests_8cs_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resourceUri,
<anchor xml:id="__string_walker_tests_8cs_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00317"/>00317 
<anchor xml:id="__string_walker_tests_8cs_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;numeric&#32;=&#32;stringWalker.ReadUnsignedNumericLiteral();
<anchor xml:id="__string_walker_tests_8cs_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;123&quot;</emphasis>,&#32;numeric.TextSpan.GetText());
<anchor xml:id="__string_walker_tests_8cs_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__string_walker_tests_8cs_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;With&#32;decimal&#32;place</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;/unitTesting.txt&quot;</emphasis>);
<anchor xml:id="__string_walker_tests_8cs_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;123.456abc&quot;</emphasis>;
<anchor xml:id="__string_walker_tests_8cs_source_1l00326"/>00326 
<anchor xml:id="__string_walker_tests_8cs_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;stringWalker&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_utility_1_1_string_walker">StringWalker</link>(
<anchor xml:id="__string_walker_tests_8cs_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resourceUri,
<anchor xml:id="__string_walker_tests_8cs_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00330"/>00330 
<anchor xml:id="__string_walker_tests_8cs_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;numeric&#32;=&#32;stringWalker.ReadUnsignedNumericLiteral();
<anchor xml:id="__string_walker_tests_8cs_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;123.456&quot;</emphasis>,&#32;numeric.TextSpan.GetText());
<anchor xml:id="__string_walker_tests_8cs_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__string_walker_tests_8cs_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;With&#32;decimal&#32;place&#32;AND&#32;a&#32;period&#32;character</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;/unitTesting.txt&quot;</emphasis>);
<anchor xml:id="__string_walker_tests_8cs_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;123.456.abc&quot;</emphasis>;
<anchor xml:id="__string_walker_tests_8cs_source_1l00339"/>00339 
<anchor xml:id="__string_walker_tests_8cs_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;stringWalker&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_utility_1_1_string_walker">StringWalker</link>(
<anchor xml:id="__string_walker_tests_8cs_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resourceUri,
<anchor xml:id="__string_walker_tests_8cs_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00343"/>00343 
<anchor xml:id="__string_walker_tests_8cs_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;numeric&#32;=&#32;stringWalker.ReadUnsignedNumericLiteral();
<anchor xml:id="__string_walker_tests_8cs_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;123.456&quot;</emphasis>,&#32;numeric.TextSpan.GetText());
<anchor xml:id="__string_walker_tests_8cs_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00347"/>00347 &#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00348"/>00348 
<anchor xml:id="__string_walker_tests_8cs_source_1l00352"/>00352 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__string_walker_tests_8cs_source_1l00353"/><link linkend="_class_luthetus_1_1_text_editor_1_1_tests_1_1_basis_1_1_compiler_services_1_1_string_walker_tests_1a0ce25b2925999451623d74759594a3ae">00353</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_text_editor_1_1_tests_1_1_basis_1_1_compiler_services_1_1_string_walker_tests_1a0ce25b2925999451623d74759594a3ae">ReadWhitespace</link>()
<anchor xml:id="__string_walker_tests_8cs_source_1l00354"/>00354 &#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;whitespaceOverrideList</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;/unitTesting.txt&quot;</emphasis>);
<anchor xml:id="__string_walker_tests_8cs_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;+&#32;<emphasis role="stringliteral">&quot;\t\r\n\n\rApple&quot;</emphasis>;
<anchor xml:id="__string_walker_tests_8cs_source_1l00359"/>00359 
<anchor xml:id="__string_walker_tests_8cs_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;stringWalker&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_utility_1_1_string_walker">StringWalker</link>(
<anchor xml:id="__string_walker_tests_8cs_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resourceUri,
<anchor xml:id="__string_walker_tests_8cs_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00363"/>00363 
<anchor xml:id="__string_walker_tests_8cs_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;whitespace&#32;=&#32;stringWalker.ReadWhitespace();
<anchor xml:id="__string_walker_tests_8cs_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;+&#32;<emphasis role="stringliteral">&quot;\t\r\n\n\r&quot;</emphasis>,&#32;whitespace);
<anchor xml:id="__string_walker_tests_8cs_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;A&apos;</emphasis>,&#32;stringWalker.CurrentCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00368"/>00368 
<anchor xml:id="__string_walker_tests_8cs_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;With&#32;whitespaceOverrideList</emphasis>
<anchor xml:id="__string_walker_tests_8cs_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;/unitTesting.txt&quot;</emphasis>);
<anchor xml:id="__string_walker_tests_8cs_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;+&#32;<emphasis role="stringliteral">&quot;\t\r\n\n\rApple&quot;</emphasis>;
<anchor xml:id="__string_walker_tests_8cs_source_1l00373"/>00373 
<anchor xml:id="__string_walker_tests_8cs_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;stringWalker&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_utility_1_1_string_walker">StringWalker</link>(
<anchor xml:id="__string_walker_tests_8cs_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resourceUri,
<anchor xml:id="__string_walker_tests_8cs_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sourceText);
<anchor xml:id="__string_walker_tests_8cs_source_1l00377"/>00377 
<anchor xml:id="__string_walker_tests_8cs_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;char&gt;&#32;whitespaceOverrideList&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;char&gt;
<anchor xml:id="__string_walker_tests_8cs_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__string_walker_tests_8cs_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WhitespaceFacts.SPACE,
<anchor xml:id="__string_walker_tests_8cs_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__string_walker_tests_8cs_source_1l00382"/>00382 
<anchor xml:id="__string_walker_tests_8cs_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;whitespace&#32;=&#32;stringWalker.ReadWhitespace(whitespaceOverrideList);
<anchor xml:id="__string_walker_tests_8cs_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>,&#32;whitespace);
<anchor xml:id="__string_walker_tests_8cs_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<emphasis role="charliteral">&apos;\t&apos;</emphasis>,&#32;stringWalker.CurrentCharacter);
<anchor xml:id="__string_walker_tests_8cs_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00387"/>00387 &#32;&#32;&#32;&#32;}
<anchor xml:id="__string_walker_tests_8cs_source_1l00388"/>00388 }
</programlisting></section>
