<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__throttle_async_tests_8cs_source" xml:lang="en-US">
<title>ThrottleAsyncTests.cs</title>
<indexterm><primary>Source/Tests/Common/Basis/Reactives/Models/ThrottleAsyncTests.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__throttle_async_tests_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_reactives_1_1_models">Luthetus.Common.RazorLib.Reactives.Models</link>;
<anchor xml:id="__throttle_async_tests_8cs_source_1l00002"/>00002 
<anchor xml:id="__throttle_async_tests_8cs_source_1l00003"/><link linkend="_namespace_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives">00003</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models">Luthetus.Common.Tests.Basis.Reactives.Models</link>;
<anchor xml:id="__throttle_async_tests_8cs_source_1l00004"/>00004 
<anchor xml:id="__throttle_async_tests_8cs_source_1l00008"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models_1_1_throttle_async_tests">00008</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models_1_1_throttle_async_tests">ThrottleAsyncTests</link>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00009"/>00009 {
<anchor xml:id="__throttle_async_tests_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__throttle_async_tests_8cs_source_1l00017"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models_1_1_throttle_async_tests_1a7b18fa66255d40b4f27055523c3ea526">00017</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models_1_1_throttle_async_tests_1a7b18fa66255d40b4f27055523c3ea526">Constructor_TimeSpan</link>()
<anchor xml:id="__throttle_async_tests_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_tests_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Testing&#32;two&#32;distinct&#32;values&#32;to&#32;ensure&#32;the&#32;parameter&#32;didn&apos;t&#32;happen&#32;to&#32;be&#32;the&#32;default&#32;value.</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_tests_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//var&#32;timeSpan&#32;=&#32;TimeSpan.FromMilliseconds(333);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//var&#32;throttle&#32;=&#32;new&#32;ThrottleAsync(timeSpan);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Assert.Equal(timeSpan,&#32;throttle.ThrottleTimeSpan);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Assert.True(throttle.ShouldWaitForPreviousWorkItemToComplete);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_tests_8cs_source_1l00026"/>00026 
<anchor xml:id="__throttle_async_tests_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Testing&#32;two&#32;distinct&#32;values&#32;to&#32;ensure&#32;the&#32;parameter&#32;didn&apos;t&#32;happen&#32;to&#32;be&#32;the&#32;default&#32;value.</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_tests_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//var&#32;timeSpan&#32;=&#32;TimeSpan.FromMilliseconds(100);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//var&#32;throttle&#32;=&#32;new&#32;ThrottleAsync(timeSpan);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Assert.Equal(timeSpan,&#32;throttle.ThrottleTimeSpan);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Assert.True(throttle.ShouldWaitForPreviousWorkItemToComplete);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_tests_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_tests_8cs_source_1l00035"/>00035 
<anchor xml:id="__throttle_async_tests_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__throttle_async_tests_8cs_source_1l00043"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models_1_1_throttle_async_tests_1a984078ede24544491c8c920cadfab70e">00043</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models_1_1_throttle_async_tests_1a984078ede24544491c8c920cadfab70e">Constructor_TimeSpan_bool</link>()
<anchor xml:id="__throttle_async_tests_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_tests_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;true&#32;==&#32;ShouldWaitForPreviousWorkItemToComplete</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_tests_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Testing&#32;two&#32;distinct&#32;values&#32;to&#32;ensure&#32;the&#32;parameter&#32;didn&apos;t&#32;happen&#32;to&#32;be&#32;the&#32;default&#32;value.</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_tests_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//var&#32;timeSpan&#32;=&#32;TimeSpan.FromMilliseconds(333);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//var&#32;shouldWaitForPreviousWorkItemToComplete&#32;=&#32;true;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//var&#32;throttle&#32;=&#32;new&#32;ThrottleAsync(timeSpan,&#32;shouldWaitForPreviousWorkItemToComplete);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Assert.Equal(timeSpan,&#32;throttle.ThrottleTimeSpan);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Assert.True(throttle.ShouldWaitForPreviousWorkItemToComplete);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_tests_8cs_source_1l00055"/>00055 
<anchor xml:id="__throttle_async_tests_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Testing&#32;two&#32;distinct&#32;values&#32;to&#32;ensure&#32;the&#32;parameter&#32;didn&apos;t&#32;happen&#32;to&#32;be&#32;the&#32;default&#32;value.</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_tests_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;var&#32;timeSpan&#32;=&#32;TimeSpan.FromMilliseconds(100);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;var&#32;shouldWaitForPreviousWorkItemToComplete&#32;=&#32;true;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;var&#32;throttle&#32;=&#32;new&#32;ThrottleAsync(timeSpan,&#32;shouldWaitForPreviousWorkItemToComplete);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.Equal(timeSpan,&#32;throttle.ThrottleTimeSpan);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.True(throttle.ShouldWaitForPreviousWorkItemToComplete);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_tests_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_tests_8cs_source_1l00065"/>00065 
<anchor xml:id="__throttle_async_tests_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;false&#32;==&#32;ShouldWaitForPreviousWorkItemToComplete</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_tests_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Testing&#32;two&#32;distinct&#32;values&#32;to&#32;ensure&#32;the&#32;parameter&#32;didn&apos;t&#32;happen&#32;to&#32;be&#32;the&#32;default&#32;value.</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_tests_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;var&#32;timeSpan&#32;=&#32;TimeSpan.FromMilliseconds(333);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;var&#32;shouldWaitForPreviousWorkItemToComplete&#32;=&#32;false;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;var&#32;throttle&#32;=&#32;new&#32;ThrottleAsync(timeSpan,&#32;shouldWaitForPreviousWorkItemToComplete);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.Equal(timeSpan,&#32;throttle.ThrottleTimeSpan);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.False(throttle.ShouldWaitForPreviousWorkItemToComplete);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_tests_8cs_source_1l00076"/>00076 
<anchor xml:id="__throttle_async_tests_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Testing&#32;two&#32;distinct&#32;values&#32;to&#32;ensure&#32;the&#32;parameter&#32;didn&apos;t&#32;happen&#32;to&#32;be&#32;the&#32;default&#32;value.</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_tests_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;var&#32;timeSpan&#32;=&#32;TimeSpan.FromMilliseconds(100);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;var&#32;shouldWaitForPreviousWorkItemToComplete&#32;=&#32;false;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;var&#32;throttle&#32;=&#32;new&#32;ThrottleAsync(timeSpan,&#32;shouldWaitForPreviousWorkItemToComplete);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.Equal(timeSpan,&#32;throttle.ThrottleTimeSpan);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.False(throttle.ShouldWaitForPreviousWorkItemToComplete);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_tests_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_tests_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_tests_8cs_source_1l00087"/>00087 
<anchor xml:id="__throttle_async_tests_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__throttle_async_tests_8cs_source_1l00092"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models_1_1_throttle_async_tests_1abbca7ed4a41f4ea1231fb577ea3ec1ca">00092</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models_1_1_throttle_async_tests_1abbca7ed4a41f4ea1231fb577ea3ec1ca">PushEvent_One</link>()
<anchor xml:id="__throttle_async_tests_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_tests_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00095"/>00095 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;throttle&#32;=&#32;new&#32;ThrottleAsync(TimeSpan.FromMilliseconds(100));</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00096"/>00096 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00097"/>00097 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;i&#32;=&#32;0;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00098"/>00098 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00099"/>00099 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;workItem&#32;=&#32;new&#32;Func&lt;CancellationToken,&#32;Task&gt;(_&#32;=&gt;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00100"/>00100 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00101"/>00101 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00102"/>00102 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;Task.CompletedTask;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00103"/>00103 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00104"/>00104 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00105"/>00105 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.PushEvent(workItem);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00106"/>00106 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00107"/>00107 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.StopFurtherPushes();</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00108"/>00108 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.UntilIsEmpty();</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00109"/>00109 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00110"/>00110 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(1,&#32;i);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00111"/>00111 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_tests_8cs_source_1l00113"/>00113 
<anchor xml:id="__throttle_async_tests_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__throttle_async_tests_8cs_source_1l00118"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models_1_1_throttle_async_tests_1a335c2e04fbaae301e3dcdaf885ccd25b">00118</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models_1_1_throttle_async_tests_1a335c2e04fbaae301e3dcdaf885ccd25b">PushEvent_Two</link>()
<anchor xml:id="__throttle_async_tests_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_tests_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00121"/>00121 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;throttle&#32;=&#32;new&#32;ThrottleAsync(TimeSpan.FromMilliseconds(5_000));</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00122"/>00122 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00123"/>00123 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;i&#32;=&#32;0;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00124"/>00124 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00125"/>00125 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;workItem&#32;=&#32;new&#32;Func&lt;CancellationToken,&#32;Task&gt;(_&#32;=&gt;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00126"/>00126 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00127"/>00127 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00128"/>00128 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;Task.CompletedTask;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00129"/>00129 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00130"/>00130 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00131"/>00131 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.PushEvent(workItem);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00132"/>00132 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.PushEvent(workItem);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00133"/>00133 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00134"/>00134 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.StopFurtherPushes();</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00135"/>00135 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.UntilIsEmpty();</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00136"/>00136 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00137"/>00137 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;i);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00138"/>00138 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_tests_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;
<anchor xml:id="__throttle_async_tests_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__throttle_async_tests_8cs_source_1l00145"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models_1_1_throttle_async_tests_1ac0d740f8750f5ee37fbc7738c5944983">00145</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models_1_1_throttle_async_tests_1ac0d740f8750f5ee37fbc7738c5944983">PushEvent_Three</link>()
<anchor xml:id="__throttle_async_tests_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_tests_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00148"/>00148 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;throttle&#32;=&#32;new&#32;ThrottleAsync(TimeSpan.FromMilliseconds(5_000));</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00149"/>00149 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00150"/>00150 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;i&#32;=&#32;0;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00151"/>00151 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00152"/>00152 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;workItem&#32;=&#32;new&#32;Func&lt;CancellationToken,&#32;Task&gt;(_&#32;=&gt;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00153"/>00153 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00154"/>00154 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00155"/>00155 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;Task.CompletedTask;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00156"/>00156 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00157"/>00157 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00158"/>00158 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.PushEvent(workItem);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00159"/>00159 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.PushEvent(workItem);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00160"/>00160 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.PushEvent(workItem);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00161"/>00161 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00162"/>00162 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.StopFurtherPushes();</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00163"/>00163 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.UntilIsEmpty();</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00164"/>00164 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00165"/>00165 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;i);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00166"/>00166 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_tests_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;
<anchor xml:id="__throttle_async_tests_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__throttle_async_tests_8cs_source_1l00173"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models_1_1_throttle_async_tests_1aff16cef8170624344321b12b8edce16f">00173</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;async&#32;Task&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models_1_1_throttle_async_tests_1aff16cef8170624344321b12b8edce16f">PushEvent_Four</link>()
<anchor xml:id="__throttle_async_tests_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_tests_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00176"/>00176 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;throttle&#32;=&#32;new&#32;ThrottleAsync(TimeSpan.FromMilliseconds(5_000));</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00177"/>00177 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00178"/>00178 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;i&#32;=&#32;0;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00179"/>00179 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00180"/>00180 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;workItem&#32;=&#32;new&#32;Func&lt;CancellationToken,&#32;Task&gt;(_&#32;=&gt;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00181"/>00181 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00182"/>00182 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00183"/>00183 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;Task.CompletedTask;</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00184"/>00184 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00185"/>00185 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00186"/>00186 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.PushEvent(workItem);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00187"/>00187 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.PushEvent(workItem);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00188"/>00188 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.PushEvent(workItem);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00189"/>00189 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.PushEvent(workItem);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00190"/>00190 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00191"/>00191 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.StopFurtherPushes();</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00192"/>00192 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;await&#32;throttle.UntilIsEmpty();</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00193"/>00193 <emphasis role="comment"></emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00194"/>00194 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;i);</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00195"/>00195 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__throttle_async_tests_8cs_source_1l00196"/>00196 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_tests_8cs_source_1l00197"/>00197 
<anchor xml:id="__throttle_async_tests_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__throttle_async_tests_8cs_source_1l00202"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models_1_1_throttle_async_tests_1afc4eb4e8d92af09f5c81b78a10e54d6c">00202</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reactives_1_1_models_1_1_throttle_async_tests_1afc4eb4e8d92af09f5c81b78a10e54d6c">Dispose</link>()
<anchor xml:id="__throttle_async_tests_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;{
<anchor xml:id="__throttle_async_tests_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__throttle_async_tests_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;}
<anchor xml:id="__throttle_async_tests_8cs_source_1l00206"/>00206 }
</programlisting></section>
