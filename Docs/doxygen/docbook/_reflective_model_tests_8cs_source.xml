<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__reflective_model_tests_8cs_source" xml:lang="en-US">
<title>ReflectiveModelTests.cs</title>
<indexterm><primary>Source/Tests/Common/Basis/Reflectives/Models/ReflectiveModelTests.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__reflective_model_tests_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis>Fluxor;
<anchor xml:id="__reflective_model_tests_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_models">Luthetus.Common.RazorLib.Reflectives.Models</link>;
<anchor xml:id="__reflective_model_tests_8cs_source_1l00003"/>00003 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_person_case">Luthetus.Common.RazorLib.Reflectives.PersonCase</link>;
<anchor xml:id="__reflective_model_tests_8cs_source_1l00004"/>00004 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_states">Luthetus.Common.RazorLib.Reflectives.States</link>;
<anchor xml:id="__reflective_model_tests_8cs_source_1l00005"/>00005 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_keys_1_1_models">Luthetus.Common.RazorLib.Keys.Models</link>;
<anchor xml:id="__reflective_model_tests_8cs_source_1l00006"/>00006 <emphasis role="keyword">using&#32;</emphasis>Microsoft.Extensions.DependencyInjection;
<anchor xml:id="__reflective_model_tests_8cs_source_1l00007"/>00007 <emphasis role="keyword">using&#32;</emphasis>System.Reflection;
<anchor xml:id="__reflective_model_tests_8cs_source_1l00008"/>00008 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00009"/><link linkend="_namespace_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reflectives">00009</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reflectives_1_1_models">Luthetus.Common.Tests.Basis.Reflectives.Models</link>;
<anchor xml:id="__reflective_model_tests_8cs_source_1l00010"/>00010 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00014"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reflectives_1_1_models_1_1_reflective_model_tests">00014</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reflectives_1_1_models_1_1_reflective_model_tests">ReflectiveModelTests</link>
<anchor xml:id="__reflective_model_tests_8cs_source_1l00015"/>00015 {
<anchor xml:id="__reflective_model_tests_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__reflective_model_tests_8cs_source_1l00022"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reflectives_1_1_models_1_1_reflective_model_tests_1ace2b133b3ebffb8bd13dcdc2d73bf094">00022</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reflectives_1_1_models_1_1_reflective_model_tests_1ace2b133b3ebffb8bd13dcdc2d73bf094">Constructor</link>()
<anchor xml:id="__reflective_model_tests_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;{
<anchor xml:id="__reflective_model_tests_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;InitializeReflectiveModelTests&#32;has&#32;an&#32;out&#32;variable&#32;for&#32;a&#32;ReflectiveModel.</emphasis>
<anchor xml:id="__reflective_model_tests_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
<anchor xml:id="__reflective_model_tests_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;not&#32;use&#32;that&#32;out&#32;variable&#32;for&#32;the&#32;Constructor&#32;test&#32;however,</emphasis>
<anchor xml:id="__reflective_model_tests_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;since&#32;the&#32;inner&#32;details&#32;must&#32;be&#32;tested&#32;and&#32;asserted&#32;within&#32;this&#32;unit&#32;test&#32;itself.</emphasis>
<anchor xml:id="__reflective_model_tests_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InitializeReflectiveModelTests(out&#32;var&#32;dispatcher,&#32;out&#32;_);
<anchor xml:id="__reflective_model_tests_8cs_source_1l00029"/>00029 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;key&#32;=&#32;Key&lt;ReflectiveModel&gt;.NewKey();
<anchor xml:id="__reflective_model_tests_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;personDisplayType&#32;=&#32;typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_person_case_1_1_person_display">PersonDisplay</link>);
<anchor xml:id="__reflective_model_tests_8cs_source_1l00032"/>00032 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;componentTypeList&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;Type&gt;
<anchor xml:id="__reflective_model_tests_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__reflective_model_tests_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;personDisplayType,
<anchor xml:id="__reflective_model_tests_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_person_case_1_1_person_simple_display">PersonSimpleDisplay</link>),
<anchor xml:id="__reflective_model_tests_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__reflective_model_tests_8cs_source_1l00038"/>00038 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;componentPropertyInfoList&#32;=&#32;Array.Empty&lt;PropertyInfo&gt;();
<anchor xml:id="__reflective_model_tests_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;previousTypeGuid&#32;=&#32;Guid.Empty;
<anchor xml:id="__reflective_model_tests_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;reflectiveParameterMap&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Dictionary&lt;string,&#32;IReflectiveParameter&gt;();
<anchor xml:id="__reflective_model_tests_8cs_source_1l00042"/>00042 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;model&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_models_1a87d77c11765aadf12d63350b888987e6">ReflectiveModel</link>(
<anchor xml:id="__reflective_model_tests_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key,
<anchor xml:id="__reflective_model_tests_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;componentTypeList,
<anchor xml:id="__reflective_model_tests_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;personDisplayType.GUID,
<anchor xml:id="__reflective_model_tests_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;previousTypeGuid,
<anchor xml:id="__reflective_model_tests_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;componentPropertyInfoList,
<anchor xml:id="__reflective_model_tests_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reflectiveParameterMap,
<anchor xml:id="__reflective_model_tests_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dispatcher);
<anchor xml:id="__reflective_model_tests_8cs_source_1l00051"/>00051 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(key,&#32;model.Key);
<anchor xml:id="__reflective_model_tests_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(componentTypeList,&#32;model.ComponentTypeList);
<anchor xml:id="__reflective_model_tests_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(personDisplayType.GUID,&#32;model.ChosenTypeGuid);
<anchor xml:id="__reflective_model_tests_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(previousTypeGuid,&#32;model.PreviousTypeGuid);
<anchor xml:id="__reflective_model_tests_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(componentPropertyInfoList,&#32;model.ComponentPropertyInfoList);
<anchor xml:id="__reflective_model_tests_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(reflectiveParameterMap,&#32;model.ReflectiveParameterMap);
<anchor xml:id="__reflective_model_tests_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(dispatcher,&#32;model.Dispatcher);
<anchor xml:id="__reflective_model_tests_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(personDisplayType,&#32;model.ChosenType);
<anchor xml:id="__reflective_model_tests_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;}
<anchor xml:id="__reflective_model_tests_8cs_source_1l00061"/>00061 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__reflective_model_tests_8cs_source_1l00069"/><link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reflectives_1_1_models_1_1_reflective_model_tests_1a35657957772c3a644db9a8d04786909d">00069</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_common_1_1_tests_1_1_basis_1_1_reflectives_1_1_models_1_1_reflective_model_tests_1a35657957772c3a644db9a8d04786909d">ConstructBlazorParameters</link>()
<anchor xml:id="__reflective_model_tests_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;{
<anchor xml:id="__reflective_model_tests_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InitializeReflectiveModelTests(out&#32;var&#32;dispatcher,&#32;out&#32;var&#32;model);
<anchor xml:id="__reflective_model_tests_8cs_source_1l00072"/>00072 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;reflectiveParameter&#32;=&#32;model.GetParameter(
<anchor xml:id="__reflective_model_tests_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nameof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_person_case_1_1_person_display">PersonDisplay</link>.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_person_case_1_1_person_display_1aee77058e2fb42024547ece66d0d7d64c">PersonModel</link>),
<anchor xml:id="__reflective_model_tests_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_models_1_1_reflective_parameter">ReflectiveParameter</link>.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_models_1_1_reflective_parameter_1a73ddc1565bfcd601c94b53ba7db9f99b">ConstructOther</link>(typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_person_case_1_1_person_model">PersonModel</link>)));
<anchor xml:id="__reflective_model_tests_8cs_source_1l00076"/>00076 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Null(reflectiveParameter.Value);
<anchor xml:id="__reflective_model_tests_8cs_source_1l00078"/>00078 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model.SetParameter(
<anchor xml:id="__reflective_model_tests_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nameof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_person_case_1_1_person_display">PersonDisplay</link>.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_person_case_1_1_person_display_1aee77058e2fb42024547ece66d0d7d64c">PersonModel</link>),
<anchor xml:id="__reflective_model_tests_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_models_1_1_reflective_parameter">ReflectiveParameter</link>.<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_models_1_1_reflective_parameter_1a73ddc1565bfcd601c94b53ba7db9f99b">ConstructOther</link>(typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_person_case_1_1_person_model">PersonModel</link>)));
<anchor xml:id="__reflective_model_tests_8cs_source_1l00082"/>00082 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__reflective_model_tests_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;}
<anchor xml:id="__reflective_model_tests_8cs_source_1l00085"/>00085 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;InitializeReflectiveModelTests(
<anchor xml:id="__reflective_model_tests_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;IDispatcher&#32;dispatcher,
<anchor xml:id="__reflective_model_tests_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;<link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_models_1a87d77c11765aadf12d63350b888987e6">ReflectiveModel</link>&#32;model)
<anchor xml:id="__reflective_model_tests_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;{
<anchor xml:id="__reflective_model_tests_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;services&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ServiceCollection()
<anchor xml:id="__reflective_model_tests_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.AddFluxor(options&#32;=&gt;&#32;options.ScanAssemblies(typeof(<link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_states_1acba6b3f1b3436e8855ad1401b1d8718e">ReflectiveState</link>).Assembly));
<anchor xml:id="__reflective_model_tests_8cs_source_1l00092"/>00092 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;serviceProvider&#32;=&#32;services.BuildServiceProvider();
<anchor xml:id="__reflective_model_tests_8cs_source_1l00094"/>00094 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;store&#32;=&#32;serviceProvider.GetRequiredService&lt;IStore&gt;();
<anchor xml:id="__reflective_model_tests_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store.InitializeAsync().Wait();
<anchor xml:id="__reflective_model_tests_8cs_source_1l00097"/>00097 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dispatcher&#32;=&#32;serviceProvider.GetRequiredService&lt;IDispatcher&gt;();
<anchor xml:id="__reflective_model_tests_8cs_source_1l00099"/>00099 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;key&#32;=&#32;Key&lt;ReflectiveModel&gt;.NewKey();
<anchor xml:id="__reflective_model_tests_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;personDisplayType&#32;=&#32;typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_person_case_1_1_person_display">PersonDisplay</link>);
<anchor xml:id="__reflective_model_tests_8cs_source_1l00102"/>00102 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;componentTypeList&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;Type&gt;
<anchor xml:id="__reflective_model_tests_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__reflective_model_tests_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;personDisplayType,
<anchor xml:id="__reflective_model_tests_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeof(<link linkend="_class_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_person_case_1_1_person_simple_display">PersonSimpleDisplay</link>),
<anchor xml:id="__reflective_model_tests_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__reflective_model_tests_8cs_source_1l00108"/>00108 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;componentPropertyInfoList&#32;=&#32;Array.Empty&lt;PropertyInfo&gt;();
<anchor xml:id="__reflective_model_tests_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;previousTypeGuid&#32;=&#32;Guid.Empty;
<anchor xml:id="__reflective_model_tests_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;reflectiveParameterMap&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Dictionary&lt;string,&#32;IReflectiveParameter&gt;();
<anchor xml:id="__reflective_model_tests_8cs_source_1l00112"/>00112 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_common_1_1_razor_lib_1_1_reflectives_1_1_models_1a87d77c11765aadf12d63350b888987e6">ReflectiveModel</link>(
<anchor xml:id="__reflective_model_tests_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key,
<anchor xml:id="__reflective_model_tests_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;componentTypeList,
<anchor xml:id="__reflective_model_tests_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;personDisplayType.GUID,
<anchor xml:id="__reflective_model_tests_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;previousTypeGuid,
<anchor xml:id="__reflective_model_tests_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;componentPropertyInfoList,
<anchor xml:id="__reflective_model_tests_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reflectiveParameterMap,
<anchor xml:id="__reflective_model_tests_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dispatcher);
<anchor xml:id="__reflective_model_tests_8cs_source_1l00121"/>00121 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;chosenComponentChangeCounter&#32;=&#32;0;
<anchor xml:id="__reflective_model_tests_8cs_source_1l00123"/>00123 
<anchor xml:id="__reflective_model_tests_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model.CalculateComponentPropertyInfoList(
<anchor xml:id="__reflective_model_tests_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model.ChosenTypeGuid.ToString(),
<anchor xml:id="__reflective_model_tests_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref&#32;chosenComponentChangeCounter);
<anchor xml:id="__reflective_model_tests_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;}
<anchor xml:id="__reflective_model_tests_8cs_source_1l00128"/>00128 }
</programlisting></section>
