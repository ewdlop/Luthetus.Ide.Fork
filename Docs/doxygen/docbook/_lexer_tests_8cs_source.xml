<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__lexer_tests_8cs_source" xml:lang="en-US">
<title>LexerTests.cs</title>
<indexterm><primary>Source/Tests/CompilerServices/CSharp/SmokeTests/Lexers/LexerTests.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__lexer_tests_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models">Luthetus.TextEditor.RazorLib.Lexers.Models</link>;
<anchor xml:id="__lexer_tests_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Tokens</link>;
<anchor xml:id="__lexer_tests_8cs_source_1l00003"/>00003 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax">Luthetus.TextEditor.RazorLib.CompilerServices.Syntax</link>;
<anchor xml:id="__lexer_tests_8cs_source_1l00004"/>00004 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case">Luthetus.CompilerServices.CSharp.LexerCase</link>;
<anchor xml:id="__lexer_tests_8cs_source_1l00005"/>00005 
<anchor xml:id="__lexer_tests_8cs_source_1l00006"/><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests">00006</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers">Luthetus.CompilerServices.CSharp.Tests.SmokeTests.Lexers</link>;
<anchor xml:id="__lexer_tests_8cs_source_1l00007"/>00007 
<anchor xml:id="__lexer_tests_8cs_source_1l00008"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests">00008</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests">LexerTests</link>
<anchor xml:id="__lexer_tests_8cs_source_1l00009"/>00009 {
<anchor xml:id="__lexer_tests_8cs_source_1l00010"/>00010 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00011"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a1cd2b998e8d99b1ee4276811aa98f6d4">00011</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a1cd2b998e8d99b1ee4276811aa98f6d4">LEX_ArraySyntaxToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00012"/>00012 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__lexer_tests_8cs_source_1l00014"/>00014 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00015"/>00015 
<anchor xml:id="__lexer_tests_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00017"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a84e5241150635723d96e95cf3ffcf914">00017</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a84e5241150635723d96e95cf3ffcf914">LEX_AssociatedNameToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__lexer_tests_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00021"/>00021 
<anchor xml:id="__lexer_tests_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00023"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1af1f491153c7e2b12155afd78c761ab4f">00023</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1af1f491153c7e2b12155afd78c761ab4f">LEX_AssociatedValueToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__lexer_tests_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00027"/>00027 
<anchor xml:id="__lexer_tests_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00029"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1ac3bd260deeffc1e2c9ba22e4a8f09a69">00029</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1ac3bd260deeffc1e2c9ba22e4a8f09a69">LEX_BadToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__lexer_tests_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00033"/>00033 
<anchor xml:id="__lexer_tests_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00035"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a50d3158e72c048929733cf7a222d7a21">00035</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a50d3158e72c048929733cf7a222d7a21">LEX_BangToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;!&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00041"/>00041 
<anchor xml:id="__lexer_tests_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;bangToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_bang_token">BangToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00045"/>00045 
<anchor xml:id="__lexer_tests_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.BangToken,&#32;bangToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00048"/>00048 
<anchor xml:id="__lexer_tests_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00050"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1aebe0f23c8d803f53dd66c07a278abb57">00050</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1aebe0f23c8d803f53dd66c07a278abb57">LEX_CloseAngleBracketToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00056"/>00056 
<anchor xml:id="__lexer_tests_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;closeAngleBracketToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_close_angle_bracket_token">CloseAngleBracketToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00060"/>00060 
<anchor xml:id="__lexer_tests_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.CloseAngleBracketToken,&#32;closeAngleBracketToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00063"/>00063 
<anchor xml:id="__lexer_tests_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00065"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1af447bca57bc8f082239f2c4080c580fe">00065</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1af447bca57bc8f082239f2c4080c580fe">LEX_CloseAssociatedGroupToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__lexer_tests_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00069"/>00069 
<anchor xml:id="__lexer_tests_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00071"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a97f51bda545c7e60a495314062dcf41c">00071</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a97f51bda545c7e60a495314062dcf41c">LEX_CloseBraceToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00077"/>00077 
<anchor xml:id="__lexer_tests_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;closeBraceToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_close_brace_token">CloseBraceToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00081"/>00081 
<anchor xml:id="__lexer_tests_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.CloseBraceToken,&#32;closeBraceToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00084"/>00084 
<anchor xml:id="__lexer_tests_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00086"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a9c9abc25d60c3ddeef4aa9725041e47d">00086</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a9c9abc25d60c3ddeef4aa9725041e47d">LEX_CloseParenthesisToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00092"/>00092 
<anchor xml:id="__lexer_tests_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;closeParenthesisToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_close_parenthesis_token">CloseParenthesisToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00096"/>00096 
<anchor xml:id="__lexer_tests_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.CloseParenthesisToken,&#32;closeParenthesisToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00099"/>00099 
<anchor xml:id="__lexer_tests_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00101"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1aa892433f7cc072d4ce0e5692661a7972">00101</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1aa892433f7cc072d4ce0e5692661a7972">LEX_CloseSquareBracketToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00107"/>00107 
<anchor xml:id="__lexer_tests_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;closeSquareBracketToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_close_square_bracket_token">CloseSquareBracketToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00111"/>00111 
<anchor xml:id="__lexer_tests_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.CloseSquareBracketToken,&#32;closeSquareBracketToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00114"/>00114 
<anchor xml:id="__lexer_tests_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00116"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a867a091c73054afea7620b163c30db3b">00116</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a867a091c73054afea7620b163c30db3b">LEX_ColonToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00122"/>00122 
<anchor xml:id="__lexer_tests_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;colonToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_colon_token">ColonToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00126"/>00126 
<anchor xml:id="__lexer_tests_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.ColonToken,&#32;colonToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00129"/>00129 
<anchor xml:id="__lexer_tests_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00131"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a686b95bee78bbda3dd68776186e49402">00131</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a686b95bee78bbda3dd68776186e49402">LEX_CommaToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00137"/>00137 
<anchor xml:id="__lexer_tests_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;commaToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_comma_token">CommaToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00141"/>00141 
<anchor xml:id="__lexer_tests_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.CommaToken,&#32;commaToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00144"/>00144 
<anchor xml:id="__lexer_tests_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00146"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1ac6b6b2c7ce7c627a565011e599832f25">00146</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1ac6b6b2c7ce7c627a565011e599832f25">LEX_CommentMultiLineToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__lexer_tests_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00150"/>00150 
<anchor xml:id="__lexer_tests_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00152"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1ac8b179fae5487589061a633a18c1d75a">00152</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1ac8b179fae5487589061a633a18c1d75a">LEX_CommentSingleLineToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__lexer_tests_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00156"/>00156 
<anchor xml:id="__lexer_tests_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00158"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a12772802fa8d6feb978af8217bfc65c0">00158</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a12772802fa8d6feb978af8217bfc65c0">LEX_DollarSignToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;$&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00164"/>00164 
<anchor xml:id="__lexer_tests_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;dollarSignToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_dollar_sign_token">DollarSignToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00168"/>00168 
<anchor xml:id="__lexer_tests_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.DollarSignToken,&#32;dollarSignToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00171"/>00171 
<anchor xml:id="__lexer_tests_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00173"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a869479934193e624b12d1060149a764b">00173</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a869479934193e624b12d1060149a764b">LEX_EndOfFileToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__lexer_tests_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00177"/>00177 
<anchor xml:id="__lexer_tests_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00179"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a42dcfa9219e31b786c84518704ad281e">00179</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a42dcfa9219e31b786c84518704ad281e">LEX_EqualsEqualsToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;==&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00185"/>00185 
<anchor xml:id="__lexer_tests_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;equalsEqualsToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_equals_equals_token">EqualsEqualsToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00189"/>00189 
<anchor xml:id="__lexer_tests_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.EqualsEqualsToken,&#32;equalsEqualsToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00192"/>00192 
<anchor xml:id="__lexer_tests_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00194"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a9d1bc63f0c039165cf67551092233a58">00194</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a9d1bc63f0c039165cf67551092233a58">LEX_EqualsToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;=&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00200"/>00200 
<anchor xml:id="__lexer_tests_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;equalsToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_equals_token">EqualsToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00204"/>00204 
<anchor xml:id="__lexer_tests_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.EqualsToken,&#32;equalsToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00207"/>00207 
<anchor xml:id="__lexer_tests_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;[Theory]
<anchor xml:id="__lexer_tests_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;a&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;b&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;c&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;d&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;e&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00214"/>00214 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;f&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00215"/>00215 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;g&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00216"/>00216 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;h&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00217"/>00217 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;i&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00218"/>00218 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;j&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00219"/>00219 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;k&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;l&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00221"/>00221 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;m&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;n&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;o&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;p&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00225"/>00225 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;q&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00226"/>00226 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;r&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;s&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00228"/>00228 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;t&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00229"/>00229 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;u&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00230"/>00230 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;v&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00231"/>00231 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;w&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00232"/>00232 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;x&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00233"/>00233 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;y&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00234"/>00234 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;z&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00235"/>00235 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;A&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00236"/>00236 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;B&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00237"/>00237 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;C&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;D&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00239"/>00239 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;E&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00240"/>00240 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;F&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;G&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;H&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;I&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;J&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00245"/>00245 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;K&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00246"/>00246 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;L&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;M&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;N&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00249"/>00249 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;O&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;P&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00251"/>00251 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;Q&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00252"/>00252 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;R&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;S&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00254"/>00254 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;T&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00255"/>00255 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;U&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00256"/>00256 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;V&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00257"/>00257 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;W&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00258"/>00258 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;X&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00259"/>00259 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;Y&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00260"/>00260 &#32;&#32;&#32;&#32;[InlineData(<emphasis role="stringliteral">&quot;Z&quot;</emphasis>)]
<anchor xml:id="__lexer_tests_8cs_source_1l00261"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1ad052c3a91d630378747696b09012c210">00261</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1ad052c3a91d630378747696b09012c210">LEX_IdentifierToken</link>(<emphasis role="keywordtype">string</emphasis>&#32;sourceText)
<anchor xml:id="__lexer_tests_8cs_source_1l00262"/>00262 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00266"/>00266 
<anchor xml:id="__lexer_tests_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;identifierToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_identifier_token">IdentifierToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00270"/>00270 
<anchor xml:id="__lexer_tests_8cs_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.IdentifierToken,&#32;identifierToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00272"/>00272 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00273"/>00273 
<anchor xml:id="__lexer_tests_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00275"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1aaebd72dbd0ced40a002a6c7b7b13edb7">00275</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1aaebd72dbd0ced40a002a6c7b7b13edb7">LEX_KeywordContextualToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00276"/>00276 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__lexer_tests_8cs_source_1l00278"/>00278 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00279"/>00279 
<anchor xml:id="__lexer_tests_8cs_source_1l00280"/>00280 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00281"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a42d5abd146fa4b5184937b6b0ae569f0">00281</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a42d5abd146fa4b5184937b6b0ae569f0">LEX_KeywordToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__lexer_tests_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00285"/>00285 
<anchor xml:id="__lexer_tests_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00287"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1ad26058fd0f34f7b9bfa0f56a81ce7323">00287</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1ad26058fd0f34f7b9bfa0f56a81ce7323">LEX_LibraryReferenceToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00288"/>00288 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__lexer_tests_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00291"/>00291 
<anchor xml:id="__lexer_tests_8cs_source_1l00292"/>00292 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00293"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a5bf4692097dca84cea56ca0865dd6451">00293</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a5bf4692097dca84cea56ca0865dd6451">LEX_MemberAccessToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00294"/>00294 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00299"/>00299 
<anchor xml:id="__lexer_tests_8cs_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;memberAccessToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_member_access_token">MemberAccessToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00303"/>00303 
<anchor xml:id="__lexer_tests_8cs_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.MemberAccessToken,&#32;memberAccessToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00305"/>00305 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00306"/>00306 
<anchor xml:id="__lexer_tests_8cs_source_1l00307"/>00307 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00308"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1af64a78458a179de14e903ef3d5831b79">00308</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1af64a78458a179de14e903ef3d5831b79">LEX_MinusMinusToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00309"/>00309 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;--&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00314"/>00314 
<anchor xml:id="__lexer_tests_8cs_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;minusMinusToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_minus_minus_token">MinusMinusToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00318"/>00318 
<anchor xml:id="__lexer_tests_8cs_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.MinusMinusToken,&#32;minusMinusToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00320"/>00320 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00321"/>00321 
<anchor xml:id="__lexer_tests_8cs_source_1l00322"/>00322 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00323"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1af4b04026365b937d9afe7eb9638cd04e">00323</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1af4b04026365b937d9afe7eb9638cd04e">LEX_MinusToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00324"/>00324 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00329"/>00329 
<anchor xml:id="__lexer_tests_8cs_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;minusToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_minus_token">MinusToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00333"/>00333 
<anchor xml:id="__lexer_tests_8cs_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.MinusToken,&#32;minusToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00335"/>00335 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00336"/>00336 
<anchor xml:id="__lexer_tests_8cs_source_1l00337"/>00337 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00338"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a4ff7da23cf8769eb5e41607abdf3ca7d">00338</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a4ff7da23cf8769eb5e41607abdf3ca7d">LEX_NumericLiteralToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00339"/>00339 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;2&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00344"/>00344 
<anchor xml:id="__lexer_tests_8cs_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;numericLiteralToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_numeric_literal_token">NumericLiteralToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00348"/>00348 
<anchor xml:id="__lexer_tests_8cs_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.NumericLiteralToken,&#32;numericLiteralToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00350"/>00350 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00351"/>00351 
<anchor xml:id="__lexer_tests_8cs_source_1l00352"/>00352 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00353"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1aac737a0da983fef922b251a4facb93dc">00353</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1aac737a0da983fef922b251a4facb93dc">LEX_OpenAngleBracketToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00354"/>00354 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00359"/>00359 
<anchor xml:id="__lexer_tests_8cs_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;openAngleBracketToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_open_angle_bracket_token">OpenAngleBracketToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00363"/>00363 
<anchor xml:id="__lexer_tests_8cs_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.OpenAngleBracketToken,&#32;openAngleBracketToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00365"/>00365 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00366"/>00366 
<anchor xml:id="__lexer_tests_8cs_source_1l00367"/>00367 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00368"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a52920c677b565c87349b6abee40221cc">00368</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a52920c677b565c87349b6abee40221cc">LEX_OpenAssociatedGroupToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00369"/>00369 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__lexer_tests_8cs_source_1l00371"/>00371 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00372"/>00372 
<anchor xml:id="__lexer_tests_8cs_source_1l00373"/>00373 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00374"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a0257dc62cca5e489054a9d41309e76a6">00374</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a0257dc62cca5e489054a9d41309e76a6">LEX_OpenBraceToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00375"/>00375 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;{&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00380"/>00380 
<anchor xml:id="__lexer_tests_8cs_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;openBraceToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_open_brace_token">OpenBraceToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00384"/>00384 
<anchor xml:id="__lexer_tests_8cs_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.OpenBraceToken,&#32;openBraceToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00386"/>00386 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00387"/>00387 
<anchor xml:id="__lexer_tests_8cs_source_1l00388"/>00388 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00389"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1ab5948c36203bdbdec4af096e3be0f950">00389</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1ab5948c36203bdbdec4af096e3be0f950">LEX_OpenParenthesisToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00390"/>00390 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00391"/>00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00395"/>00395 
<anchor xml:id="__lexer_tests_8cs_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;openParenthesisToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_open_parenthesis_token">OpenParenthesisToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00399"/>00399 
<anchor xml:id="__lexer_tests_8cs_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.OpenParenthesisToken,&#32;openParenthesisToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00401"/>00401 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00402"/>00402 
<anchor xml:id="__lexer_tests_8cs_source_1l00403"/>00403 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00404"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1aad22e63c085935af0e0cf8d907279bca">00404</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1aad22e63c085935af0e0cf8d907279bca">LEX_OpenSquareBracketToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00405"/>00405 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00410"/>00410 
<anchor xml:id="__lexer_tests_8cs_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;openSquareBracketToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_open_square_bracket_token">OpenSquareBracketToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00414"/>00414 
<anchor xml:id="__lexer_tests_8cs_source_1l00415"/>00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.OpenSquareBracketToken,&#32;openSquareBracketToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00416"/>00416 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00417"/>00417 
<anchor xml:id="__lexer_tests_8cs_source_1l00418"/>00418 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00419"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a0c201f473f8dbcbe9b1d88bfc7a7305b">00419</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a0c201f473f8dbcbe9b1d88bfc7a7305b">LEX_PlusPlusToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00420"/>00420 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00421"/>00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00422"/>00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;++&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00423"/>00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00424"/>00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00425"/>00425 
<anchor xml:id="__lexer_tests_8cs_source_1l00426"/>00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00427"/>00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;plusPlusToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_plus_plus_token">PlusPlusToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00428"/>00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00429"/>00429 
<anchor xml:id="__lexer_tests_8cs_source_1l00430"/>00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.PlusPlusToken,&#32;plusPlusToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00431"/>00431 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00432"/>00432 
<anchor xml:id="__lexer_tests_8cs_source_1l00433"/>00433 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00434"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1aae1b34a7b561b845cf12d04e85bbdb66">00434</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1aae1b34a7b561b845cf12d04e85bbdb66">LEX_PlusToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00435"/>00435 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;+&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00438"/>00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00439"/>00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00440"/>00440 
<anchor xml:id="__lexer_tests_8cs_source_1l00441"/>00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00442"/>00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;plusToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_plus_token">PlusToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00443"/>00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00444"/>00444 
<anchor xml:id="__lexer_tests_8cs_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.PlusToken,&#32;plusToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00446"/>00446 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00447"/>00447 
<anchor xml:id="__lexer_tests_8cs_source_1l00448"/>00448 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00449"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1ae0b16e6d249b2f01d65fa5412cd9d104">00449</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1ae0b16e6d249b2f01d65fa5412cd9d104">LEX_PreprocessorDirectiveToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00450"/>00450 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__lexer_tests_8cs_source_1l00452"/>00452 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00453"/>00453 
<anchor xml:id="__lexer_tests_8cs_source_1l00454"/>00454 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00455"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1adf69f203d5bbc24b6a64a02b6c93b3c3">00455</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1adf69f203d5bbc24b6a64a02b6c93b3c3">LEX_QuestionMarkQuestionMarkToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00456"/>00456 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00457"/>00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00458"/>00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;??&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00459"/>00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00460"/>00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00461"/>00461 
<anchor xml:id="__lexer_tests_8cs_source_1l00462"/>00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;questionMarkQuestionMarkToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_question_mark_question_mark_token">QuestionMarkQuestionMarkToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00464"/>00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00465"/>00465 
<anchor xml:id="__lexer_tests_8cs_source_1l00466"/>00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.QuestionMarkQuestionMarkToken,&#32;questionMarkQuestionMarkToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00467"/>00467 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00468"/>00468 
<anchor xml:id="__lexer_tests_8cs_source_1l00469"/>00469 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00470"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1adf2fa8734b9c9b19f4bf7ede2f6c9945">00470</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1adf2fa8734b9c9b19f4bf7ede2f6c9945">LEX_QuestionMarkToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00471"/>00471 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00472"/>00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00473"/>00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;?&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00474"/>00474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00475"/>00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00476"/>00476 
<anchor xml:id="__lexer_tests_8cs_source_1l00477"/>00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00478"/>00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;questionMarkToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_question_mark_token">QuestionMarkToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00479"/>00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00480"/>00480 
<anchor xml:id="__lexer_tests_8cs_source_1l00481"/>00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.QuestionMarkToken,&#32;questionMarkToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00482"/>00482 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00483"/>00483 
<anchor xml:id="__lexer_tests_8cs_source_1l00484"/>00484 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00485"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1adb06258cf1bf9cb0a14f0c88edd54598">00485</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1adb06258cf1bf9cb0a14f0c88edd54598">LEX_StarToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00486"/>00486 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00487"/>00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00488"/>00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;*&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00490"/>00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00491"/>00491 
<anchor xml:id="__lexer_tests_8cs_source_1l00492"/>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;starToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_star_token">StarToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00494"/>00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00495"/>00495 
<anchor xml:id="__lexer_tests_8cs_source_1l00496"/>00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.StarToken,&#32;starToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00497"/>00497 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00498"/>00498 
<anchor xml:id="__lexer_tests_8cs_source_1l00499"/>00499 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00500"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a3a2776d9637b122ce643c9025e00974f">00500</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a3a2776d9637b122ce643c9025e00974f">LEX_StatementDelimiterToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00501"/>00501 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00502"/>00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00503"/>00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00504"/>00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00506"/>00506 
<anchor xml:id="__lexer_tests_8cs_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00508"/>00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;statementDelimiterToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_statement_delimiter_token">StatementDelimiterToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00510"/>00510 
<anchor xml:id="__lexer_tests_8cs_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.StatementDelimiterToken,&#32;statementDelimiterToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00512"/>00512 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00513"/>00513 
<anchor xml:id="__lexer_tests_8cs_source_1l00514"/>00514 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00515"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a98b0aed531a0ea79887385f6f5f44196">00515</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a98b0aed531a0ea79887385f6f5f44196">LEX_StringLiteralToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00516"/>00516 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00517"/>00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00518"/>00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">&quot;\&quot;Hello&#32;World!\&quot;&quot;</emphasis>;
<anchor xml:id="__lexer_tests_8cs_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00521"/>00521 
<anchor xml:id="__lexer_tests_8cs_source_1l00522"/>00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(2,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;stringLiteralToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_string_literal_token">StringLiteralToken</link>)lexer.SyntaxTokenList[0];
<anchor xml:id="__lexer_tests_8cs_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;endOfFileToken&#32;=&#32;(<link linkend="_struct_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1_1_tokens_1_1_end_of_file_token">EndOfFileToken</link>)lexer.SyntaxTokenList[1];
<anchor xml:id="__lexer_tests_8cs_source_1l00525"/>00525 
<anchor xml:id="__lexer_tests_8cs_source_1l00526"/>00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_compiler_services_1_1_syntax_1ae4bcfe414c318a050bbef43ec92f921b">SyntaxKind</link>.StringLiteralToken,&#32;stringLiteralToken.SyntaxKind);
<anchor xml:id="__lexer_tests_8cs_source_1l00527"/>00527 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00528"/>00528 
<anchor xml:id="__lexer_tests_8cs_source_1l00529"/>00529 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00530"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a297a365cb9a273478aa0be9a62fb330a">00530</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a297a365cb9a273478aa0be9a62fb330a">LEX_TriviaToken</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00531"/>00531 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00532"/>00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__lexer_tests_8cs_source_1l00533"/>00533 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00534"/>00534 
<anchor xml:id="__lexer_tests_8cs_source_1l00535"/>00535 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00536"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a4d01c04f43769b7f791cb275c53099d4">00536</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1a4d01c04f43769b7f791cb275c53099d4">LEX_EscapedStrings</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00537"/>00537 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00538"/>00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">@&quot;public&#32;const&#32;string&#32;Tag&#32;=&#32;&quot;&quot;`&apos;\&quot;&quot;;luth_clipboard&quot;&quot;;&quot;</emphasis>.ReplaceLineEndings(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00539"/>00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00540"/>00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00541"/>00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00542"/>00542 
<anchor xml:id="__lexer_tests_8cs_source_1l00543"/>00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__lexer_tests_8cs_source_1l00544"/>00544 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00545"/>00545 
<anchor xml:id="__lexer_tests_8cs_source_1l00546"/>00546 &#32;&#32;&#32;&#32;[Fact]
<anchor xml:id="__lexer_tests_8cs_source_1l00547"/><link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1afac11771e50ff319de695a94ce64c847">00547</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_tests_1_1_smoke_tests_1_1_lexers_1_1_lexer_tests_1afac11771e50ff319de695a94ce64c847">LEX_ClassDefinition</link>()
<anchor xml:id="__lexer_tests_8cs_source_1l00548"/>00548 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lexer_tests_8cs_source_1l00549"/>00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sourceText&#32;=&#32;<emphasis role="stringliteral">@&quot;public&#32;class&#32;MyClass</emphasis>
<anchor xml:id="__lexer_tests_8cs_source_1l00550"/>00550 <emphasis role="stringliteral">{</emphasis>
<anchor xml:id="__lexer_tests_8cs_source_1l00551"/>00551 <emphasis role="stringliteral">}&quot;</emphasis>.ReplaceLineEndings(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00552"/>00552 
<anchor xml:id="__lexer_tests_8cs_source_1l00553"/>00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resourceUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_luthetus_1_1_text_editor_1_1_razor_lib_1_1_lexers_1_1_models_1a26a1b63ad28ec7955b30bc6c91571eca">ResourceUri</link>(<emphasis role="stringliteral">&quot;UnitTests&quot;</emphasis>);
<anchor xml:id="__lexer_tests_8cs_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lexer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_luthetus_1_1_compiler_services_1_1_c_sharp_1_1_lexer_case_1_1_c_sharp_lexer">CSharpLexer</link>(resourceUri,&#32;sourceText);
<anchor xml:id="__lexer_tests_8cs_source_1l00555"/>00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lexer.Lex();
<anchor xml:id="__lexer_tests_8cs_source_1l00556"/>00556 
<anchor xml:id="__lexer_tests_8cs_source_1l00557"/>00557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Tokens:&#32;&apos;public&apos;&#32;&apos;class&apos;&#32;&apos;MyClass&apos;&#32;&apos;{&apos;&#32;&apos;}&apos;&#32;&apos;EndOfFileToken&apos;</emphasis>
<anchor xml:id="__lexer_tests_8cs_source_1l00558"/>00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Equal(6,&#32;lexer.SyntaxTokenList.Length);
<anchor xml:id="__lexer_tests_8cs_source_1l00559"/>00559 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lexer_tests_8cs_source_1l00560"/>00560 }
</programlisting></section>
