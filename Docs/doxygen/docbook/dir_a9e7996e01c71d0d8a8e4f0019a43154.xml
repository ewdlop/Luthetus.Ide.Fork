<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_dir_a9e7996e01c71d0d8a8e4f0019a43154" xml:lang="en-US">
<title>Source/Tests/CompilerServices/Css/Basis Directory Reference</title>
<indexterm><primary>Source/Tests/CompilerServices/Css/Basis Directory Reference</primary></indexterm>
Directory dependency graph for Basis:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="dir_a9e7996e01c71d0d8a8e4f0019a43154_dep.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<section>
<title>Detailed Description</title>

<para>One might decide to have a unit test for every public API.</para>

<para>That is the idea of this folder. A one to one unit test per public API at minimum.</para>

<para>Whether every public API will be done or not is being decided upon. But, perhaps that wording illustrates the purpose of this folder.</para>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
</para>

<para>Ideas:</para>

<para><itemizedlist>
<listitem>
<para>Automate test heatmap... If a C# compiler service could identify all publically scoped API, it could verify if after the basis was ran whether all public API was used.</para>
</listitem><listitem>
<para>Visualize the &quot;basis&quot;... so one could look at a given release of <link linkend="_namespace_luthetus_1_1_ide">Luthetus.Ide</link> and then bring up the &quot;UnitTests-Basis-Visualization&quot; for that given release.<itemizedlist>
<listitem>
<para>Draw a graph of all public API references.</para>
</listitem><listitem>
<para>Color the connection green if no exception occurred.</para>
</listitem><listitem>
<para>Color the connection red if an exception occurred.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para>Automate test generation...<itemizedlist>
<listitem>
<para>Try any meaningful arguments, automatically as their own test cast. Ex: a method which accepts an &apos;int&apos;. One could decide that meaningful arguments are [ Int.Min, -2, -1, 0, 1, 2 Int.Max ]</para>
</listitem><listitem>
<para>Concerns: could automated test cases result in bad outcomes? I.e. somehow the test case does bank.Withdraw(Int.Max). As per the concern, none of this automation exists at the moment. </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</section>
</section>
